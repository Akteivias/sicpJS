<ABOUT>
The pages accessible at 
<SPLITINLINE><JAVASCRIPT><LINK address="sicp.html"><TT>sicp_javascript.html</TT></LINK></JAVASCRIPT>
<SCHEME><LINK address="sicp.html"><TT>sicp_scheme.html</TT></LINK></SCHEME></SPLITINLINE>
were generated from a single source
<LINK address="xml/book.xml"><TT>book.xml</TT></LINK> 
that contains an XML version of the original <LATEXINLINE>\LaTeX</LATEXINLINE> source (courtesy
of the SICP authors), using <TT>make</TT>,
<LATEXINLINE>\LaTeX</LATEXINLINE>, and XSLT, as described below. 
If you want to play with this setup, feel free to download all files
in a single <LINK address="sicp.zip">zip file</LINK>.

<H2>Makefile</H2>

A master
<LINK address="Makefile">Makefile</LINK> provides for
<ul>
<li> generation of the HTML pages and of <LATEXINLINE>\LaTeX</LATEXINLINE> sources
(target <TT>html</TT>), and 
</li>
<li>
generation of the images that represent
formulas <SPLITINLINE><SCHEME>and programs</SCHEME></SPLITINLINE> 
(target <TT>png</TT>) using <LATEXINLINE>\LaTeX</LATEXINLINE>.
</li>
</ul>
See below for details on these steps.

<H2>Processing XML</H2>

The XML document <LINK address="xml/book.xml"><TT>book.xml</TT></LINK> is processed
using XSLT. For that, the 
<SPLITINLINE>
<JAVASCRIPT>
<LINK address="html_javascript/Makefile"><TT>Makefile</TT></LINK>
</JAVASCRIPT>
<SCHEME>
<LINK address="html_scheme/Makefile"><TT>Makefile</TT></LINK>
</SCHEME>
</SPLITINLINE>
calls
<PRE>
xsltproc --output book.html xsl/book.xsl xml/code.xml
</PRE>
When processing the XML document, the stylesheet
<LINK address="xsl/book.xsl"><TT>book.xsl</TT></LINK> 
generates the HTML files and places them in the 
<SPLITINLINE>
<JAVASCRIPT>
<LINK address="html_javascript"><TT>html_javascript</TT></LINK> 
</JAVASCRIPT>
<SCHEME>
<LINK address="html_scheme"><TT>html_scheme</TT></LINK> 
</SCHEME>
</SPLITINLINE>
folder.
It also places for each formula and program in the XML document a separate 
<LATEXINLINE>\LaTeX</LATEXINLINE> file into a corresponding
<LINK address="."><TT>img_...</TT></LINK> 
folder,
containing the formula/program ready for the typesetter.

<SPLIT>
<SCHEME>
<H2>Typesetting the Formulas and Programs</H2>

The Scheme programs in 
<LINK address="xml/book.xml"><TT>book.xml</TT></LINK> 
are taken from the original SICP LaTeX sources.
The stylesheet produces <LATEXINLINE>\LaTeX</LATEXINLINE> source files, such as
<LINK address="img_scheme/scheme_692.tex"><TT>img_scheme/scheme_692.tex</TT></LINK>,
by placing the program in a 
<PRE>
\begin{lstlisting}
\end{lstlisting}
</PRE>
environment. The package 
<LINK address="http://en.wikibooks.org/wiki/LaTeX/Packages/Listings">
<TT>listings</TT></LINK> provides highlighting of keywords. Since neither
JavaScript nor Scheme are supported by this package, I added
<LINK address="src/tc/app/sicp/listingsconfig.txt">a configuration for JavaScript and Scheme</LINK> 
to the file
<TT>tex/latex/listings/lstlang1.sty</TT> in my LaTeX distribution.
<p/>
Running <TT>pdflatex</TT> on these files produces PDF files.

<H2>Generating Images of Formulas and Programs</H2>

In order to render the program in HTML, the 
<LINK address="src/tc/app/sicp/Makefile"><TT>Makefile</TT></LINK> calls the utility
<TT>convert</TT> from ImageMagick on the PDF files (using various
tricks), 
resulting in a PNG file that is referenced by the
HTML files and rendered by the browser.

<H2>Interpretation of Scheme Programs</H2>

For the interpretation of Scheme expressions,
I am using a (canibalized version of) 
<LINK address="http://www.bluishcoder.co.nz/2006/05/scheme-implementation-in-javascript.html">jsScheme (as modified by BLUISH CODER)</LINK>, in form of the 
file <LINK address="src/tc/app/sicp/js/scheme.js"><TT>scheme.js</TT></LINK>.
<p/>
The file <LINK address="src/tc/app/sicp/js/eval.js"><TT>eval.js</TT></LINK> 
contains the JavaScript functions
that invoke these evaluators, including the functions that open up a new
browser window for editing and executing the programs.
<p/>
In the textbook, program fragments often require other program fragments.
In order to collect and execute the necessary program fragments, the corresponding
<TT>SNIPPET</TT> tags in
<LINK address="src/tc/app/sicp/xml/book.xml"><TT>book.xml</TT></LINK>
include 
<TT>REQUIRES</TT> tags. The stylesheet
<LINK address="src/tc/app/sicp/xsl/book.xsl"><TT>book.xsl</TT></LINK> uses these tags in order
to assemble the executable programs. To see and execute the full programs,
click on the result of evaluation or on "Play", 
which displays the program in a separate window.
</SCHEME>
<JAVASCRIPT>
<H2>Displaying, Editing and Interpreting Programs</H2>

The JavaScript programs in
<LINK address="xml/book.xml"><TT>book.xml</TT></LINK> 
were written by me. The display of Javascript programs is done using 
<LINK address="http://jush.sourceforge.net">JUSH</LINK> and the editing of the
programs is handled by 
<LINK address="http://marijn.haverbeke.nl/codemirror/">CodeMirror</LINK>.
JavaScript programs are evaluated easily, of course, using 
JavaScript<APOS/>s built-in
<TT>eval()</TT> function. 
The file <LINK address="src/tc/app/sicp/js/eval.js"><TT>eval.js</TT></LINK> 
contains the JavaScript functions
that invoke the evaluator, including the functions that open up a 
window for editing and executing the programs.
<P/>
In the textbook, program fragments often require other program fragments.
In order to collect and execute the necessary programs, the corresponding
<TT>SNIPPET</TT> tags in
<LINK address="xml/book.xml"><TT>book.xml</TT></LINK>
include 
<TT>REQUIRES</TT> tags. The stylesheet
<LINK address="xsl/book.xsl"><tt>book.xsl</tt></LINK> uses these tags in order
to assemble the executable programs. To see and execute the full programs,
click on the program text, which displays the program in a separate window.

<H2>Typesetting the Formulas</H2>

The stylesheet produces <LATEXINLINE>\LaTeX</LATEXINLINE> source files for each formula, 
such as
<LINK address="img_javascript/latex_inline_64.tex"><TT>img_javascript/latex_inline_64.tex</TT></LINK>.
Running <TT>pdflatex</TT> on these files produces PDF files.
In order to render the formulas in HTML, the 
<LINK address="src/tc/app/sicp/Makefile"><TT>Makefile</TT></LINK> calls the utility
<TT>convert</TT> from ImageMagick on the PDF files (using various tricks), 
resulting in a PNG file that is referenced by the
HTML files and rendered by the browser.

</JAVASCRIPT>
</SPLIT>


<!--
<H2>Parsing JavaScript Programs</H2>

The parser used in 
<LINK address="code.html#chapter_4">Chapter 4</LINK>
is generated using the parser generator 
<LINK address="http://jscc.jmksf.com">JS/CC</LINK> by Jan Max
Meyer, J.M.K S.F. Software Technologies. The grammar
is included in 
<LINK address="../xml/book.xml"><tt>book.xml</tt></LINK>
(see tag <tt>GRAMMAR</tt>).

<p/>
The last example of 
<LINK address="code.html#subsection_4_1_5">From Strings to Statements</LINK>
shows an integration of parser generation with evaluation; 
you can change the grammar between each
iteration of the evaluator loop!
-->

</ABOUT>
