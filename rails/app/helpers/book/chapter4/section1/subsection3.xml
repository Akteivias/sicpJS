    <SUBSECTION>
      <NAME>
  Evaluator Data Structures
      </NAME>

      <LABEL NAME="sec:eval-data-structures"/>
      <TEXT>
  In addition to defining the external syntax of expressions, the
  evaluator implementation must also define the data structures that the
  evaluator manipulates internally, as part of the execution of a
  program, such as the representation of
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  and environments and
  the representation of true and false.
      </TEXT>

      <SUBHEADING>
  <NAME>Testing of predicates</NAME>
      </SUBHEADING>


      <INDEX>metacircular evaluator for Scheme<SUBINDEX>representation of true and false</SUBINDEX></INDEX>

      <TEXT>
  <SPLIT>
    <SCHEME>
  For conditionals, we accept anything to be true that is not
  the explicit <SCHEMEINLINE>false</SCHEMEINLINE> object.
    </SCHEME>
    <JAVASCRIPT>
      So far, we have been careful to only use <JAVASCRIPTINLINE>true</JAVASCRIPTINLINE> and
      <JAVASCRIPTINLINE>false</JAVASCRIPTINLINE> as predicates in conditionals. The language
      JavaScript, however, accepts any value as predicate. In conditionals the following
      values are considered <QUOTE>falsy</QUOTE>; they lead to the alternative branch: 
      <JAVASCRIPTINLINE>false</JAVASCRIPTINLINE>, 
      <JAVASCRIPTINLINE>0</JAVASCRIPTINLINE>, <JAVASCRIPTINLINE>""</JAVASCRIPTINLINE>,
      <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> and <JAVASCRIPTINLINE>NaN</JAVASCRIPTINLINE>.
      The latter <JAVASCRIPTINLINE>NaN</JAVASCRIPTINLINE> value stands for 
      <QUOTE>not a number</QUOTE> and is the result of some arithmetic operations such as
      <JAVASCRIPTINLINE>0 / 0</JAVASCRIPTINLINE>, according to the IEEE 754 standard for
      floating point arithmetic. Values that are not considered falsy are considered
      <QUOTE>truthy</QUOTE> and lead to the consequent branch of conditionals.
    </JAVASCRIPT>
  </SPLIT>
  <SNIPPET PAGE="377">
    <NAME>true</NAME>
    <SCHEME>
(define (true? x)
  (not (eq? x false)))

(define (false? x)
  (eq? x false))
    </SCHEME>
    <JAVASCRIPT>
function is_true(x) {
   return ! is_false(x);
}
function is_false(x) {
   return x === false || x === 0 || x === "" || x === undefined || x === NaN;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Representing
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></NAME>
      </SUBHEADING>

      <INDEX>metacircular evaluator for Scheme<SUBINDEX>representation of
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>

      <TEXT>
  To handle primitives, we assume that we have available the
  following
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>:

  <UL>
    <LI>
      <!--  \indcode{apply-primitive-procedure} -->
      <P>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(apply-primitive-procedure</SCHEMEINLINE> <LATEXINLINE>proc args</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>apply_primitive_function(</JAVASCRIPTINLINE><LATEXINLINE>fun,args</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      </P>
      applies the given primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      to the argument values in the
      list <LATEXINLINE>args</LATEXINLINE> and returns the result of the application.

    </LI>
    <LI>
      <!--  \indcode{primitive-procedure?} -->
      <P>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(primitive-procedure?</SCHEMEINLINE> <LATEXINLINE>proc</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_primitive_function(</JAVASCRIPTINLINE><LATEXINLINE>fun</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      </P>
      tests whether 
        <SPLITINLINE><SCHEME><LATEXINLINE>proc</LATEXINLINE></SCHEME>
        <JAVASCRIPT><LATEXINLINE>fun</LATEXINLINE></JAVASCRIPT></SPLITINLINE>
        is a primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.

    </LI>
  </UL>

  These mechanisms for handling primitives are further described in
  Section<SPACE/><REF NAME="sec:running-eval"/>.
      </TEXT>

      <TEXT>
  Compound
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  are constructed from parameters,
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  bodies, and environments using the constructor 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>make-procedure</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>make_function_value</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:

  <SNIPPET PAGE="377">
    <NAME>make_procedure</NAME>
    <SCHEME>
(define (make-procedure parameters body env)
  (list \&apos;procedure parameters body env))

(define (compound-procedure? p)
  (tagged-list? p \&apos;procedure))

(define (procedure-parameters p) (cadr p))
(define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))
    </SCHEME>
    <JAVASCRIPT>
function evaluate_function_definition(stmt,env) {
   return make_function_value(
             function_definition_parameters(stmt),
             function_definition_body(stmt),
             env);
}
function make_function_value(parameters,body,env) {
   return { tag: "function_value",
            parameters: parameters,
            body: body,
            environment: env };
}
function is_compound_function_value(f) {
   return is_tagged_object(f,"function_value");
}
function function_value_parameters(value) {
   return value.parameters;
}
function function_value_body(value) {
   return value.body;
}
function function_value_environment(value) {
   return value.environment;
}
    </JAVASCRIPT>
  </SNIPPET>

<!--  DODO: add explanation of return values -->

  <SNIPPET PAGE="366">
    <NAME>return_value</NAME>
    <JAVASCRIPT>
function make_return_value(content) {
   return { tag: "return_value", content: content };
}
function is_return_value(value) {
   return is_tagged_object(value,"return_value");
}
function return_value_content(value) {
   return value.content;
}
    </JAVASCRIPT>
  </SNIPPET>

      </TEXT>

      <SUBHEADING>
  <NAME>Operations on Environments</NAME>
      </SUBHEADING>

      <LABEL NAME="sec:operations-on-environments"/>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>environment operations</SUBINDEX></INDEX>
      <TEXT>
  The evaluator needs operations for manipulating environments.  As
  explained in Section<SPACE/><REF NAME="sec:environment-model"/>, an environment is a
  sequence of frames, where each frame is a table of bindings that
  associate variables with their corresponding values.  We use
  the following operations for manipulating environments:

  <UL>
    <!--  \indcode{lookup-variable-value} -->
    <LI><SPLITINLINE><SCHEME><SCHEMEINLINE>(lookup-variable-value </SCHEMEINLINE><LATEXINLINE>var env</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>lookup_variable_value(</JAVASCRIPTINLINE><LATEXINLINE>var,env</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      <P>
      returns the value that is bound to the symbol <LATEXINLINE>var</LATEXINLINE> in the
      environment <LATEXINLINE>env</LATEXINLINE>, or signals an error if the variable is unbound.
      </P>
    </LI>
    <LI>
      <!--  \indcode{extend-environment} -->
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(extend-environment </SCHEMEINLINE><LATEXINLINE>variables values base-env</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>extend_environment(</JAVASCRIPTINLINE><LATEXINLINE>variables,values,base-env</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      <P>
      returns a new environment, consisting of a new frame in which the
      symbols in the list <LATEXINLINE>variables</LATEXINLINE> are bound to the corresponding
      elements in the list <LATEXINLINE>values</LATEXINLINE>, where the enclosing environment is
      the environment <LATEXINLINE>base-env</LATEXINLINE>.
      </P>
    </LI>
    <LI>
      <!--  \indcode{define-variable!} -->
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(define-variable! </SCHEMEINLINE><LATEXINLINE>var value env</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>define_variable(</JAVASCRIPTINLINE><LATEXINLINE>var,value,env</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      <P>
      adds to the first frame in the environment <LATEXINLINE>env</LATEXINLINE> a new binding that
      associates the variable <LATEXINLINE>var</LATEXINLINE> with the value <LATEXINLINE>value</LATEXINLINE>.
      </P>
    </LI>
    <LI>
      <!--  \indcode{set-variable-value!} -->
      <SPLITINLINE><SCHEME><SCHEMEINLINE>(set-variable-value! </SCHEMEINLINE><LATEXINLINE>var value env</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_variable_value(</JAVASCRIPTINLINE><LATEXINLINE>var,value,env</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      <P>
      changes the binding of the variable <LATEXINLINE>var</LATEXINLINE> in the environment <LATEXINLINE>env</LATEXINLINE>
      so that the variable is now bound to the value <LATEXINLINE>value</LATEXINLINE>, or signals
      an error if the variable is unbound.
      </P>
    </LI>

  </UL>
      </TEXT>

      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>representation of environments|(</SUBINDEX></INDEX>
  To implement these operations we represent an environment as a list of
  frames.  The enclosing environment of an environment is the <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of
  the list.  The empty environment is simply the empty list.

  <SNIPPET PAGE="378">
    <NAME>enclosing_environment</NAME>
    <SCHEME>
(define (enclosing-environment env) (cdr env))

(define (first-frame env) (car env))

(define the-empty-environment \&apos;())
    </SCHEME>
    <JAVASCRIPT>
function enclosing_environment(env) {
   return tail(env);
}
function first_frame(env) {
   return head(env);
}
var the_empty_environment = [];
var an_empty_frame = {};
function is_empty_environment(env) {
   return is_empty_list(env);
}
function enclose_by(frame,env) {
   return pair(frame,env);
}
    </JAVASCRIPT>  
  </SNIPPET>
      </TEXT>

      <TEXT>
      <SPLIT>
  <SCHEME>
  Each frame of an environment is represented as a pair of lists: a list
  of the variables bound in that frame and a list of the associated values.<FOOTNOTE>Frames are not really a data abstraction in the following code:
<SPLITINLINE><SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_variable_value</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
and 
<SPLITINLINE><SCHEME><SCHEMEINLINE>define-variable!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>define_variable</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
use 
<SPLITINLINE><SCHEME><SCHEMEINLINE>set-car!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    to directly modify the values in a frame.  The purpose of the frame
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    is to make the environment-manipulation
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    easy to read.</FOOTNOTE>
  <SNIPPET PAGE="378">
    <NAME>make_frame</NAME>
    <SCHEME>
(define (make-frame variables values)
  (cons variables values))

(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))

(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
    </SCHEME>
  </SNIPPET>
  </SCHEME>
  <JAVASCRIPT>
  Each frame of an environment is represented as a JavaScript object that maps 
  the variables bound in that frame to the associated values.

    <SNIPPET PAGE="378">
    <NAME>make_frame</NAME>
    <JAVASCRIPT>
function make_frame(variables,values) {
   if (is_empty_list(variables) &amp;&amp; is_empty_list(values)) 
      return {};
   else {
      var frame = make_frame(tail(variables),tail(values));
      frame[head(variables)] = head(values); // object field
                                             // assignment
      return frame;
   }
}
function add_binding_to_frame(variable,value,frame) {
   frame[variable] = value; // object field assignment
   return;
}
function has_binding_in_frame(variable,frame) {
   return frame.hasOwnProperty(variable);
}
    </JAVASCRIPT>
  </SNIPPET>
  </JAVASCRIPT>
      </SPLIT>
      </TEXT>

      <TEXT>
  To extend an environment by a new frame that associates variables with
  values, we make a frame consisting of the list of variables and the
  list of values, and we adjoin this to the environment.  We signal
  an error if the number of variables does not match the number of values.

  <SNIPPET PAGE="379">
    <NAME>extend_environment</NAME>
    <REQUIRES>make_frame</REQUIRES>
    <SCHEME>
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (&lt; (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
    </SCHEME>
    <JAVASCRIPT>
function extend_environment(vars,vals,base_env) {
   if (length(vars) === length(vals))
      return enclose_by(make_frame(vars,vals),base_env);
   else if (length(vars) &lt; length(vals))
      error("Too many arguments supplied: ",vars,vals);
   else
      error("Too few arguments supplied: ",vars,vals);
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  To look up a variable in an environment, we scan the list of variables
  in the first frame.  If we find the desired variable, we return
  the corresponding element in the list of values.  If we do not find
  the variable in the current frame, we search the enclosing environment,
  and so on.  If we reach the empty environment, we signal an <QUOTE>unbound
    variable</QUOTE> error.

  <SNIPPET PAGE="379">
    <NAME>lookup_variable_value</NAME>
    <REQUIRES>enclosing_environment</REQUIRES>
    <SCHEME>
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
    </SCHEME>
          <TEXT>Since frames are already hash tables, there is no need for scanning.</TEXT>
    <JAVASCRIPT>
function lookup_variable_value(variable,env) {
   function env_loop(env) {
      if (is_empty_environment(env))
         error("Unbound variable: ",variable);
      else if (has_binding_in_frame(variable,first_frame(env)))
         return first_frame(env)[variable];
      else return env_loop(enclosing_environment(env));
   }
   return env_loop(env);
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  To set a variable to a new value in a specified environment, we scan
  for the variable, just as in 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>lookup_variable_value</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, 
  and change
  the corresponding value when we find it.

  <SNIPPET PAGE="379">
    <NAME>set_variable_value</NAME>
    <REQUIRES>enclosing_environment</REQUIRES>
    <SCHEME>
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable - - SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
    </SCHEME>
          <TEXT>Since frames are already hash tables, there is no need for scanning.</TEXT>
    <JAVASCRIPT>
function set_variable_value(variable,value,env) {
   function env_loop(env) {
      if (is_empty_environment(env))
         error("Unbound variable - - assignment: ",variable);
      else if (has_binding_in_frame(variable,first_frame(env)))
         add_binding_to_frame(variable,value,first_frame(env));
      else env_loop(enclosing_environment(env));
   }
   env_loop(env);
   return;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  To define a variable, we search the first frame for a binding for
  the variable, and change the binding if it exists
  (just as in 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>set_variable_value</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
  If no such binding
  exists, we adjoin one to the first frame.

  <SNIPPET PAGE="380">
    <NAME>define_variable</NAME>
    <REQUIRES>make_frame</REQUIRES>
    <SCHEME>
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
    </SCHEME>
          <TEXT>Since frames are already hash tables, there is no need for scanning.</TEXT>
    <JAVASCRIPT>
function define_variable(variable,value,env) {
   var frame = first_frame(env);
   return add_binding_to_frame(variable,value,frame);
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>data abstraction in</SUBINDEX></INDEX>
  The method described here is only one of many plausible ways to
  represent environments.  Since we used data abstraction to isolate the
  rest of the evaluator from the detailed choice of representation, we
  could change the environment representation if we wanted to.  (See
  Exercise<SPACE/><REF NAME="ex:alternate-frame-representation"/>.)  In a
  production-quality <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system, the speed of the evaluator<APOS/>s
  environment operations<EMDASH/>especially that of variable lookup<EMDASH/>has a
  major impact on the performance of the system.  The representation
  described here, although conceptually simple, is not efficient and
  would not ordinarily be used in a production system.<FOOTNOTE>The drawback of this representation (as well as the variant in
    Exercise<SPACE/><REF NAME="ex:alternate-frame-representation"/>) is that the evaluator
    may have to search through many frames in order to find the binding
    for a given variable.
    <INDEX>deep binding</INDEX><INDEX>binding<SUBINDEX>deep</SUBINDEX></INDEX>
    (Such an approach is referred to as <EM>deep binding</EM>.)
    One way to avoid
    this inefficiency is to make use of a strategy called <EM>lexical
      addressing</EM>, which will be discussed in
    Section<SPACE/><REF NAME="sec:lexical-addressing"/>.</FOOTNOTE>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>representation of environments|)</SUBINDEX></INDEX>
      </TEXT>

      <EXERCISE>
  Instead of representing a frame as a pair of lists, we can represent a
  frame as a list of bindings, where each binding is a name-value pair.
  Rewrite the environment operations to use this alternative
  representation.
  <LABEL NAME="ex:alternate-frame-representation"/>
      </EXERCISE>

      <EXERCISE><LABEL NAME="ex:env-program-abstraction"/>
  The
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>set-variable-value!</SCHEMEINLINE>, <SCHEMEINLINE>define-variable!</SCHEMEINLINE>,
  and <SCHEMEINLINE>lookup\?variable-value</SCHEMEINLINE> can be expressed in terms of
  more abstract
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  for traversing the environment structure.
  Define abstractions that capture the common patterns and redefine
  the three
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  in terms of these abstractions.
      </EXERCISE>

      <SPLIT>
  <SCHEME>
      <EXERCISE>
  Scheme allows us to create new bindings for variables by means of <SCHEMEINLINE>define</SCHEMEINLINE>, but provides no way to get rid of bindings.  Implement for
  the evaluator a special form <SCHEMEINLINE>make-unbound!</SCHEMEINLINE> that removes the
  binding of a given symbol from the environment in which the
  <SCHEMEINLINE>make-unbound!</SCHEMEINLINE> expression is evaluated.
  This problem is not completely specified.  For example,
  should we remove only the binding in the first frame of the
  environment?  Complete the specification and justify any choices you
  make.
  <LABEL NAME="ex:make-unbound"/>
      </EXERCISE>
  </SCHEME>
      </SPLIT>

    </SUBSECTION>