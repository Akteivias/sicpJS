
<ABOUT>
<H1>JavaScript Adaptation Making-of</H1>
<P>
  This is the online version of <EM>Structure and Interpretation of Computer Programs, JavaScript Adaptation</EM>.
  The authors of <EM>Structure and Interpretation of Computer Programs</EM> are Hal Abelson and Jerry
  Sussman. The adapter of the JavaScript Adaptation is Martin Henz.
  The rendering system was originally designed and implemented by Liu Hang in 2017 and then further developed
  by Feng Piaopiao in 2018.
  Formulas are rendered using MathJax. 
</P>
<P>
The pages accessible under <SPLITINLINE><JAVASCRIPT><LINK address="index.html"><TT>chapters/</TT></LINK></JAVASCRIPT>
	<SCHEME><LINK address="index.html"><TT>chapters/</TT></LINK></SCHEME></SPLITINLINE>
were generated from the source folder
<LINK address="xml/"><TT>/xml</TT></LINK>
that contains the XML version of the original <LATEXINLINE>\LaTeX</LATEXINLINE> source (courtesy
of the SICP authors), using <TT>make</TT>,
Rails, and Mathjax, as described below.
</P>
<!--
If you want to play with this setup, feel free to download all files
in a single <LINK address="sicp.zip">zip file</LINK>.
-->

<H2>Makefile</H2>

A master Makefile provides for generation of the HTML pages. See below for details on these steps.

<H2>Processing XML</H2>

The XML documents are processed using Nokogiri. For that, the website is originally
hosted as a Ruby on Rails application and the Nokogiri gem is used .

<SPLIT>
<SCHEME>
<H2>Typesetting the Formulas and Programs</H2>

The Scheme programs in
<LINK address="xml/book.xml"><TT>book.xml</TT></LINK>
are taken from the original SICP LaTeX sources.

<!--
The stylesheet produces <LATEXINLINE>\LaTeX</LATEXINLINE> source files, such as
<LINK address="img_scheme/scheme_692.tex"><TT>img_scheme/scheme_692.tex</TT></LINK>,
by placing the program in a
<PRE>
\begin{lstlisting}
\end{lstlisting}
</PRE>
environment. The package
<LINK address="http://en.wikibooks.org/wiki/LaTeX/Packages/Listings">
<TT>listings</TT></LINK> provides highlighting of keywords. Since neither
JavaScript nor Scheme are supported by this package, I added
<LINK address="src/tc/app/sicp/listingsconfig.txt">a configuration for JavaScript and Scheme</LINK>
to the file
<TT>tex/latex/listings/lstlang1.sty</TT> in my LaTeX distribution.
<p/>
Running <TT>pdflatex</TT> on these files produces PDF files.

<H2>Generating Images of Formulas and Programs</H2>

In order to render the program in HTML, the
<LINK address="src/tc/app/sicp/Makefile"><TT>Makefile</TT></LINK> calls the utility
<TT>convert</TT> from ImageMagick on the PDF files (using various
tricks),
resulting in a PNG file that is referenced by the
HTML files and rendered by the browser.
-->

<H2>Interpretation of Scheme Programs</H2>

<!-- I haven't implemented these !! -->
<!--
For the interpretation of Scheme expressions,
I am using a (canibalized version of)
<LINK address="http://www.bluishcoder.co.nz/2006/05/scheme-implementation-in-javascript.html">jsScheme (as modified by BLUISH CODER)</LINK>, in form of the
file <LINK address="src/tc/app/sicp/js/scheme.js"><TT>scheme.js</TT></LINK>.
<p/>
The file <LINK address="src/tc/app/sicp/js/eval.js"><TT>eval.js</TT></LINK>
contains the JavaScript functions
that invoke these evaluators, including the functions that open up a new
browser window for editing and executing the programs.
<p/>
In the textbook, program fragments often require other program fragments.
In order to collect and execute the necessary program fragments, the corresponding
<TT>SNIPPET</TT> tags in
<LINK address="src/tc/app/sicp/xml/book.xml"><TT>book.xml</TT></LINK>
include
<TT>REQUIRES</TT> tags. The stylesheet
<LINK address="src/tc/app/sicp/xsl/book.xsl"><TT>book.xsl</TT></LINK> uses these tags in order
to assemble the executable programs. To see and execute the full programs,
click on the result of evaluation or on "Play",
which displays the program in a separate window.
-->
</SCHEME>
<JAVASCRIPT>
<H2>Displaying, Editing and Interpreting Programs</H2>

The JavaScript programs in the texbook were written by Prof. Martin Henz. The display
of Javascript programs is done using <LINK address="https://github.com/google/code-prettify">
Google Code Prettifier</LINK>
and the editing of the programs is handled by
<LINK address="https://codemirror.net/">CodeMirror</LINK>.
JavaScript programs are evaluated easily, of course, using
JavaScript<APOS/>s built-in <TT>eval()</TT> function.
<!-- I don't think I used eval.js -->
<!--
The file <TT>eval.js</TT> contains the JavaScript functions
that invoke the evaluator, including the functions that open up a
window for editing and executing the programs. -->
<P/>
In the textbook, program fragments often require other program fragments.
In order to collect and execute the necessary programs, the corresponding
<TT>SNIPPET</TT> tags in the xml files include <TT>REQUIRES</TT> tags. The Rails
server uses these tags in order to assemble the executable programs. The required
snippets are executed in the background when the program text is clicked and the
snippet is displayed in a popup box.

<H2>Typesetting the Formulas</H2>

<LATEXINLINE>\LaTeX</LATEXINLINE> formulas are currently rendered by Mathjax. For
command not yet supported by Mathjax, png files from the previous version are used
instead.

</JAVASCRIPT>
</SPLIT>


<!--
<H2>Parsing JavaScript Programs</H2>

The parser used in
<LINK address="code.html#chapter_4">Chapter 4</LINK>
is generated using the parser generator
<LINK address="http://jscc.jmksf.com">JS/CC</LINK> by Jan Max
Meyer, J.M.K S.F. Software Technologies. The grammar
is included in
<LINK address="../xml/book.xml"><tt>book.xml</tt></LINK>
(see tag <tt>GRAMMAR</tt>).

<p/>
The last example of
<LINK address="code.html#subsection_4_1_5">From Strings to Statements</LINK>
shows an integration of parser generation with evaluation;
you can change the grammar between each
iteration of the evaluator loop!
-->

</ABOUT>
