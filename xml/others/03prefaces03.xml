<MATTER>
  <NAME>
    <SPLITINLINE>
      <SCHEME>Preface to the Second Edition</SCHEME>
      <JAVASCRIPT>Preface</JAVASCRIPT>
    </SPLITINLINE>
  </NAME>

  <SPLITINLINE>
    <JAVASCRIPT>
<TEXT>
    The book <EM>Structure and Interpretation of Computer
    Programs</EM>
    <INDEX>SICP</INDEX>
    (SICP) introduces the reader to central ideas of
    computation by establishing a series of mental models for computation.
    Chapters 1<ENDASH/>3 cover programming concepts that are common to all
    modern high-level programming languages. The original first two editions
    of SICP use the programming language Scheme in their program examples,
    whose minimalist, expression-oriented syntax allows the book to focus
    on the underlying ideas rather than the design of the chosen language.
    Chapters<SPACE/>4 and<SPACE/>5 use Scheme to formulate language
    processors for Scheme, deepening the readers<APOS/> understanding of the
    mental models and exploring language extensions and alternatives.
  </TEXT>

  <TEXT>
    Since its publication in 1984 and its second edition in 1996, SICP has been
    adopted as a textbook by universities and colleges around the world,
    including the National University of Singapore (NUS), which
    introduced the SICP-based introductory course CS1101S in 1997.
    In the mid-1990s, the languages Python, JavaScript,
    and Ruby emerged, which share central design elements with Scheme,
    but which employ a more complex, statement-oriented syntax that uses
    familiar algebraic (infix) notation. Their rise in popularity led
    instructors to adapt their SICP-based courses, typically by
    translating the example programs to their language of choice, by
    adding material specific to that language, and by omitting the
    material of chapters<SPACE/>4 and<SPACE/>5.
  </TEXT>

  <SUBHEADING><NAME>Adapting SICP to JavaScript</NAME></SUBHEADING>
  
  <TEXT>
    The work on adapting the second edition of SICP to JavaScript
    <INDEX>SICP JS</INDEX>
    (SICP JS)
    started at NUS in 2008, and CS1101S switched to JavaScript in 2012. The language
    standard ECMAScript 2015 introduced lambda expressions, tail recursion,
    and block-scoped variables and constants, which enabled the adaptation
    to become quite close to the original. We made substantial changes to
    SICP only when we felt they were forced by differences
    between JavaScript and Scheme. The book covers just a small
    fraction of JavaScript, so a reader would be ill-advised to use it
    to learn the language. For example, the notion of a JavaScript
    object<EMDASH/>considered one of its fundamental ingredients by any
    measure<EMDASH/>is not even mentioned!
  </TEXT>

  <TEXT>
    It was straightforward to translate the programs of chapters
    1<ENDASH/>3 to JavaScript by adding libraries that mirror Scheme
    primitives<EMDASH/>including support for list structure<EMDASH/>and adapting the
    text accordingly. However, the switch to JavaScript forced us to make
    subtle changes in the interpreters and compiler of
    chapters<SPACE/>4 and<SPACE/>5 in order to handle return statements.
    Scheme's expression-oriented syntax doesn't have return statements,
    which are a prominent feature of statement-oriented languages.
  </TEXT>

  <TEXT>
    By using JavaScript, chapters<SPACE/>1<ENDASH/>3 introduce the reader
    to the syntactic style of most mainstream languages today.
    However, that same syntactic style
    gave rise to significant changes in chapter<SPACE/>4, because
    the direct representation of programs as data structures could
    no longer be taken for granted. This provided us with an
    opportunity to introduce the reader to the notion of program parsing
    in section<SPACE/>4.1,
    an important component of programming-language processors.
    In section 4.4, the rigid syntactic structure of JavaScript
    complicated the implementation of the presented logic programming system
    and exposed the limitations of JavaScript as a tool for programming
    language design.
  </TEXT>

<SUBHEADING><NAME>Resources for using SICP JS</NAME></SUBHEADING>
<PDF_ONLY>
  \thispagestyle{Preface}
</PDF_ONLY>

  <TEXT>
    The
    <LINK address="https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1">MIT
    Press web page for SICP JS</LINK>
    links to support for users of this book. This provides all programs from the book
    and extensive instructor resources, including
    a large collection of additional exercises and
    recommendations on selecting a subset of SICP JS that can be covered in a
    typical college semester. The JavaScript programs in the book run in the
    recommended strict mode in any JavaScript interpreter that complies with
    the ECMAScript 2020 specification of JavaScript (<CITATION>ECMA 2020</CITATION>).
    The MIT Press web page includes the JavaScript package
    <JAVASCRIPTINLINE>sicp</JAVASCRIPTINLINE>, which provides all JavaScript functions
    that are considered <QUOTE>primitive</QUOTE> in the book.
  </TEXT>

  <SUBHEADING><NAME>To the reader</NAME></SUBHEADING>

  <TEXT>
    We sincerely hope that if this book is your first
    encounter with programming you will use your newly gained understanding
    of the structure and interpretation of computer programs to learn more
    programming languages, including Scheme and the full JavaScript
    language. If you have learned JavaScript prior to picking up SICP
    JS, you might gain new insights into the fundamental concepts that underlie
    the language and discover how much can be achieved with so little.
    If you come to SICP JS with a knowledge of the original SICP,
    you might enjoy seeing familiar ideas presented in a new
    format<EMDASH/>and might appreciate the online comparison edition,
    available at the book's web page, where SICP JS and SICP can be viewed
    side by side.
  </TEXT>

  <SIGNATURE>
      <ATTRIBUTION>
        <AUTHOR>Martin Henz and Tobias Wrigstad</AUTHOR>
      </ATTRIBUTION>
  </SIGNATURE>
</JAVASCRIPT>
<SCHEME>
  <EPIGRAPH>
    Is it possible that software is not like anything else, that it
    is meant to be discarded: that the whole point is to
    always see it as a soap bubble?
    <ATTRIBUTION>
      <INDEX>Perlis, Alan J.</INDEX>
      <AUTHOR>Alan J. Perlis</AUTHOR>
    </ATTRIBUTION>
  </EPIGRAPH>
<TEXT><PDF_ONLY>\noindent</PDF_ONLY>
The material in this book has been the basis of MIT's entry-level
computer science subject since 1980.  We had been teaching this
material for four years when the first edition was published, and
twelve more years have elapsed until the appearance of this second
edition.  We are pleased that our work has been widely adopted and
incorporated into other texts.  We have seen our students take the
ideas and programs in this book and build them in as the core of new
computer systems and languages.  In literal realization of an ancient
Talmudic pun, our students have become our builders.  We are lucky to
have such capable students and such accomplished builders.
</TEXT>
<TEXT>
In preparing this edition, we have incorporated hundreds of
clarifications suggested by our own teaching experience and the
comments of colleagues at MIT and elsewhere.  We have redesigned
most of the major programming systems in the book, including
the generic-arithmetic system, the interpreters, the register-machine
simulator, and the compiler; and we have rewritten all the program
examples to ensure that any Scheme implementation conforming to
the IEEE Scheme standard (IEEE 1990) will be able to run the code.
</TEXT>
<TEXT>
This edition emphasizes several new themes.  The most important
of these is the central role played by different approaches to
dealing with time in computational models: objects with state,
concurrent programming, functional programming, lazy evaluation,
and nondeterministic programming.  We have included new sections on
concurrency and nondeterminism, and we have tried to integrate this
theme throughout the book.
</TEXT>
<TEXT>
The first edition of the book closely followed the syllabus of our MIT
one-semester subject.  With all the new material in the second
edition, it will not be possible to cover everything in a single
semester, so the instructor will have to pick and choose.  In our own
teaching, we sometimes skip the section on logic programming
(section<SPACE/><REF NAME="sec:logic-programming"/>),
we have students use the
register-machine simulator but we do not cover its implementation
(section<SPACE/><REF NAME="sec:simulator"/>),
and we give only a cursory overview of
the compiler
(section<SPACE/><REF NAME="sec:compilation"/>).
Even so, this is still
an intense course.  Some instructors may wish to cover only the first
three or four chapters, leaving the other material for subsequent
courses.
</TEXT>
<TEXT>
The World Wide Web site <LINK address="https://mitpress.mit.edu/sites/default/files/sicp/index.html">of MIT Press</LINK>
provides support for users of this book.
This includes programs from the book,
sample programming assignments, supplementary materials,
and downloadable implementations of the Scheme dialect of Lisp.
</TEXT>

<SIGNATURE>
  <ATTRIBUTION>
    <AUTHOR>Harold Abelson and Gerald Jay Sussman</AUTHOR>
  </ATTRIBUTION>
</SIGNATURE>

</SCHEME>
</SPLITINLINE>

  </MATTER>
  
