    <SUBSECTION>
      <NAME>
        Hierarchical Structures
      </NAME>

      <LABEL NAME="sec:trees"/>
      <INDEX>data<SUBINDEX>hierarchical|(</SUBINDEX></INDEX>
      <INDEX>hierarchical data structures|(</INDEX>
      <INDEX>tree<SUBINDEX>represented as pairs|(</SUBINDEX></INDEX>
      <INDEX>pair(s)<SUBINDEX>used to represent tree|(</SUBINDEX></INDEX>
      <TEXT>
        The representation of sequences in terms of lists generalizes
        naturally to represent sequences whose elements may
        themselves be sequences.  For example, we can regard the object
        <SPLITINLINE><SCHEME><SCHEMEINLINE>((1 2) 3 4)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>[[1, [2, []]], [3, [4, []]]]</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> constructed by

        <SNIPPET>
          <SCHEME>
(cons (list 1 2) (list 3 4))
          </SCHEME>
          <JAVASCRIPT>
pair(list(1, 2), list(3, 4));
        </JAVASCRIPT>
        </SNIPPET>
        as a list of three items, the first of which is itself a list, <SPLITINLINE><SCHEME><SCHEMEINLINE>(1 2)</SCHEMEINLINE>. Indeed, this is suggested by the form in which the result is printed by the interpreter.</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>[1, [2, []]]</JAVASCRIPTINLINE>.</JAVASCRIPT></SPLITINLINE> Figure<SPACE/><REF NAME="fig:cons-of-2-lists"/> shows
        the representation of this structure in terms of pairs.

              <FIGURE>
                <FIGURE src="img_original/ch2-Z-G-15.gif"></FIGURE>
                <LABEL NAME="fig:cons-of-2-lists"/>
                <CAPTION>Structure formed by <SPLITINLINE><SCHEME><SCHEMEINLINE>(cons (list 1 2) (list 3 4))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair(list(1, 2), list(3, 4))</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
                </CAPTION>
              </FIGURE>
      </TEXT>

      <TEXT>
        Another way to think of sequences whose elements are sequences is as
        <EM>trees</EM>.  The elements of the sequence are the branches of the
        tree, and elements that are themselves sequences are subtrees.
        Figure<SPACE/><SPLITINLINE><SCHEME><REF NAME="fig:list-as-tree"/></SCHEME><JAVASCRIPT><REF NAME="fig:list-as-tree-javascript"/></JAVASCRIPT></SPLITINLINE> shows the structure in
        Figure<SPACE/><REF NAME="fig:cons-of-2-lists"/> viewed as a tree.

        <SPLIT>
          <SCHEME>
              <FIGURE src="img_original/ch2-Z-G-16.gif">
                <LABEL NAME="fig:list-as-tree"/>
                <CAPTION>The list structure in Figure<SPACE/><REF NAME="fig:cons-of-2-lists"/> viewed as a tree.
                </CAPTION>
              </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
              <FIGURE>
                <FIGURE src="img_tex/ch2_2_2-1.png"></FIGURE>
                <LABEL NAME="fig:list-as-tree-javascript"/>
                <CAPTION>The list structure in Figure<SPACE/><REF NAME="fig:cons-of-2-lists"/> viewed as a tree.
                </CAPTION>
                <TREETAB>
                </TREETAB>
              </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <TEXT>
        <INDEX>recursion<SUBINDEX>working@in working with trees</SUBINDEX></INDEX>
        Recursion is a natural tool for dealing with tree structures, since
        we can often reduce operations on trees to operations on their
        branches, which reduce in turn to operations on the branches of the
        branches, and so on, until we reach the leaves of the tree.
        As an example, compare the <SPLITINLINE><SCHEME><SCHEMEINLINE>length</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        of
        Section<SPACE/><REF NAME="sec:sequences"/> with the
        <!-- \indcode{count-leaves} -->
        <INDEX>tree<SUBINDEX>counting leaves of</SUBINDEX></INDEX>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which
        returns the total number of leaves of a tree:

        <SNIPPET>
          <NAME>tree_x</NAME>
          <SCHEME>
(define x (cons (list 1 2) (list 3 4)))
          </SCHEME>
          <JAVASCRIPT>
const x = pair(pair(1, pair(2,[])), pair(3, pair(4,[])));
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>tree_x</REQUIRES>
          <SCHEME>
(length x)
          </SCHEME>
          <SCHEMEOUTPUT>
3
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
length(x);
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>tree_x</REQUIRES>
          <REQUIRES>count_leaves</REQUIRES>
          <SCHEME>
(count-leaves x)
          </SCHEME>
          <SCHEMEOUTPUT>
4
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
count_leaves(x);
        </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>tree_x</REQUIRES>
          <SCHEME>
(list x x)
          </SCHEME>
          <SCHEMEOUTPUT>
(((1 2) 3 4) ((1 2) 3 4))
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
list(x, x);
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>tree_x</REQUIRES>
          <SCHEME>
(length (list x x))
          </SCHEME>
          <SCHEMEOUTPUT>
2
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
length(list(x, x));
        </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>tree_x</REQUIRES>
          <REQUIRES>count_leaves</REQUIRES>
          <SCHEME>
(count-leaves (list x x))
          </SCHEME>
          <SCHEMEOUTPUT>
8
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
count_leaves(list(x, x));
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        To implement <SPLITINLINE><SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, recall the recursive plan for computing
        <SPLITINLINE><SCHEME><SCHEMEINLINE>length</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:

        <UL>
          <LI> <SPLITINLINE><SCHEME><SCHEMEINLINE>Length</SCHEMEINLINE></SCHEME><JAVASCRIPT>The <JAVASCRIPTINLINE>length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of a list <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is 1 plus <SPLITINLINE><SCHEME><SCHEMEINLINE>length</SCHEMEINLINE></SCHEME><JAVASCRIPT>the <JAVASCRIPTINLINE>length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the
            <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
          </LI>
          <LI>
            <SPLITINLINE><SCHEME><SCHEMEINLINE>Length</SCHEMEINLINE></SCHEME><JAVASCRIPT>The <JAVASCRIPTINLINE>length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the empty list is 0.
          </LI>
        </UL>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>Count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT>The function <JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is similar.  The value for the empty list is the same:
        <UL>
          <LI>
            <SPLITINLINE><SCHEME><SCHEMEINLINE>Count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the empty list is 0.
          </LI>
        </UL>
        But in the reduction step, where we strip off the <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the
        list, we must take into account that the <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> may itself be a
        tree whose leaves we need to count.  Thus, the appropriate reduction
        step is
        <UL>
          <LI>
            <SPLITINLINE><SCHEME><SCHEMEINLINE>Count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of a tree <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is <SPLITINLINE><SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> plus <SPLITINLINE><SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the
            <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
          </LI>
        </UL>
        Finally, by taking <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>s we reach
        actual leaves, so we need another base case:
        <UL>
          <LI>
            <SPLITINLINE><SCHEME><SCHEMEINLINE>Count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of a leaf is 1.
          </LI>
        </UL>
        To aid in writing recursive
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        on trees, <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>our JavaScript environment</JAVASCRIPT></SPLITINLINE> provides the primitive
        predicate
        <!--\indprim*{pair?}-->
        <!--\ind*{primitive
            <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
            (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[pair?@<SCHEMEINLINE>pair?</SCHEMEINLINE>]
            -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>pair?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, which tests whether its argument is a pair.
        Here is the complete
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:<FOOTNOTE>The order of the
          first two clauses in the <SCHEMEINLINE>cond</SCHEMEINLINE> matters, since the empty list
          satisfies <SCHEMEINLINE>null?</SCHEMEINLINE> and also is not a pair.</FOOTNOTE>

        <SNIPPET>
          <NAME>count_leaves</NAME>
          <EXAMPLE>count_leaves_example</EXAMPLE>
          <SCHEME>
            <!-- \indcode{count-leaves} -->
(define (count-leaves x)
  (cond ((null? x) 0)
    ((not (pair? x)) 1)
    (else (+ (count-leaves (car x))
             (count-leaves (cdr x))))))
          </SCHEME>
          <JAVASCRIPT>
function count_leaves(x) {
    return is_empty_list(x)
           ? 0
           : !is_pair(x)
             ? 1
             : count_leaves(head(x)) +
               count_leaves(tail(x));
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET HIDE="yes">
          <NAME>count_leaves_example</NAME>
          <SCHEME>
(count-leaves (cons (list 1 2) (list 3 4)))
          </SCHEME>
          <JAVASCRIPT>
count_leaves(pair(list(1, 2), list(3, 4)));
          </JAVASCRIPT>
        </SNIPPET>

      </TEXT>

      <EXERCISE>
        Suppose we evaluate the expression
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(list 1 (list 2 (list 3 4)))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list(1, list(2, list(3, 4)))</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
        Give the result printed by the interpreter, the corresponding
        box-and-pointer structure, and the interpretation of this as a tree
        (as in Figure<SPACE/><REF NAME="fig:list-as-tree-javascript"/>).
        <LABEL NAME="ex:nested-list"/>
   <SOLUTION>
    <TEXT>

<P>a) as box and pointer</P>
<pre>
   +---+---+    +---+---+
   | * | *-|-&gt;| * | / |
   +-+-+---+   +-+-+---+
     |                 |
     v                 v
   +---+          +---+---+    +---+---+
   | 1 |         | * | *-|-&gt;| * | / |
   +---+          +-+-+---+   +---+---+
                        |              |
                        v              v
                     +---+         +---+---+    +---+---+
                     | 2 |        | * | *-|-&gt;| * | / |
                     +---+         +-+-+---+   +-+-+---+
                                        |                |
                                        v                v
                                      +---+          +---+
                                      | 3 |         | 4 |
                                      +---+          +---+
</pre>
<P>b) as a Tree:</P>
<pre>
    (1 (2 (3 4)))
          ^
        /    \
       1    (2 (3 4)) 
                 ^ 
               /    \
              2   (3 4)  
                      ^ 
                    /    \
                   3     4
</pre>
  </TEXT>
</SOLUTION>
      </EXERCISE>

      <EXERCISE>
        Give combinations of <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>s and <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>s that will pick 7 from
        each of the following lists:

        <SNIPPET EVAL="no">
          <SCHEME>
(1 3 (5 7) 9)

((7))

(1 (2 (3 (4 (5 (6 7))))))
          </SCHEME>
          <JAVASCRIPT>
const list1 = [1, [3, [[5, [7, []]], [9, []]]]];

const list2 = [[7, []], []];

const list3 = [1, [[2, [[3, [[4, [[5, [[6, [7, []]], []]], []]], []]], []]], []]];
          </JAVASCRIPT>
        </SNIPPET>
  <SOLUTION>
    <TEXT>

<P>1. head(tail(head(tail(tail(list1)))));</P>

<P>2. head(head(list2));</P>

<P>3. head(tail(head(tail(head(tail(head(tail(head(tail(head(tail(list3))))))))))));</P>

    </TEXT>
  </SOLUTION>
      </EXERCISE>

      <EXERCISE>
        Suppose we define <SPLITINLINE><SCHEME><SCHEMEINLINE>x</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>y</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>y</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> to be two lists:

        <SNIPPET>
          <NAME>xy</NAME>
          <SCHEME>
(define x (list 1 2 3))

(define y (list 4 5 6))
          </SCHEME>
          <JAVASCRIPT>
const x = list(1, 2, 3);

const y = list(1, 2, 3);
        </JAVASCRIPT>
        </SNIPPET>

        What result is printed by the interpreter in response to evaluating
        each of the following expressions:

        <SNIPPET>
          <REQUIRES>xy</REQUIRES>
          <SCHEME>
(append x y)
          </SCHEME>
          <JAVASCRIPT>
append(x, y);
        </JAVASCRIPT>
        </SNIPPET>


        <SNIPPET>
          <REQUIRES>xy</REQUIRES>
          <SCHEME>
(cons x y)
          </SCHEME>
          <JAVASCRIPT>
pair(x, y);
        </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>xy</REQUIRES>
          <SCHEME>
(list x y)
          </SCHEME>
          <JAVASCRIPT>
list(x, y);
        </JAVASCRIPT>
        </SNIPPET>

      </EXERCISE>

      <EXERCISE>
        Modify your <SPLITINLINE><SCHEME><SCHEMEINLINE>reverse</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>reverse</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        of Exercise<SPACE/><REF NAME="ex:reverse"/> to
        produce a
        <!-- \indcode{deep-reverse} -->
        <INDEX>tree<SUBINDEX>reversing at all levels</SUBINDEX></INDEX>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>deep-reverse</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>deep_reverse</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        that takes a list as argument
        and returns as its value the list with its elements reversed and with
        all sublists deep-reversed as well.  For example, <CHANGE>consider</CHANGE>
        <SNIPPET>
          <NAME>x_list_list</NAME>
          <SCHEME>
(define x (list (list 1 2) (list 3 4)))
          </SCHEME>
          <JAVASCRIPT>
const x = list(list(1, 2), list(3, 4));
        </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>Here,</CHANGE>
        <SNIPPET>
          <REQUIRES>x_list_list</REQUIRES>
          <SCHEME>
x
          </SCHEME>
          <JAVASCRIPT>
x;
          </JAVASCRIPT>
        </SNIPPET>

        <CHANGE>should return</CHANGE>

        <SNIPPET EVAL="no">
          <SCHEME>
((1 2) (3 4))
          </SCHEME>
          <JAVASCRIPT>
[[1, [2, []]], [[3, [4, []]], []]]
        </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>x_list_list</REQUIRES>
          <REQUIRES>reverse</REQUIRES>
          <SCHEME>
(reverse x)
          </SCHEME>
          <JAVASCRIPT>
reverse(x);
          </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>should return</CHANGE>
        <SNIPPET EVAL="no">
          <SCHEME>
((3 4) (1 2))
          </SCHEME>
          <JAVASCRIPT>
[[3, [4, []]], [[1, [2, []]], []]]
        </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>whereas</CHANGE>
        <SNIPPET HIDE="yes">
          <NAME>deep_reverse</NAME>
          <SCHEME>
;; deep_reverse to be written by student;
          </SCHEME>
          <JAVASCRIPT>
// deep_reverse to be written by student;
          </JAVASCRIPT>
        </SNIPPET>
        <SNIPPET>
          <REQUIRES>x_list_list</REQUIRES>
          <REQUIRES>deep_reverse</REQUIRES>
          <SCHEME>
(deep-reverse x)
          </SCHEME>
          <JAVASCRIPT>
deep_reverse(x);
        </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>should return</CHANGE>
        <SNIPPET EVAL="no">
          <SCHEME>
((4 3) (2 1))
          </SCHEME>
          <JAVASCRIPT>
[[4, [3, []]], [[2, [1, []]], []]]
        </JAVASCRIPT>
        </SNIPPET>
<SOLUTION>
  <SNIPPET>
<JAVASCRIPT>
function deep_reverse(items){
  if(is_empty_list(items)) {
    return [];
  }
  else if(is_pair(items)) {
    return append(deep_reverse(tail(items)), 
                  pair(deep_reverse(head(items)), []));
  }
  else {
    return items;
  }
}
</JAVASCRIPT>
<SCHEME>
</SCHEME>
</SNIPPET>
</SOLUTION>
      </EXERCISE>

      <EXERCISE>
        <LABEL NAME="ex:fringe"/>
        Write a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

        <!-- \indcode{fringe} -->
        <INDEX>tree<SUBINDEX>fringe of</SUBINDEX></INDEX>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>fringe</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>fringe</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> that takes as argument a tree
        (represented as a list) and returns a list whose elements are all the
        leaves of the tree arranged in left-to-right order.  For example,
        <CHANGE>consider</CHANGE>

        <SNIPPET HIDE="yes">
          <NAME>fringe</NAME>
          <SCHEME>
;; fringe to be written by student;
          </SCHEME>
          <JAVASCRIPT>
// fringe to be written by student;
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <NAME>x_fringe_example</NAME>
          <SCHEME>
(define x (list (list 1 2) (list 3 4)))
          </SCHEME>
          <JAVASCRIPT>
const x = list(list(1, 2), list(3, 4));
          </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>Here,</CHANGE>
        <SNIPPET>
          <REQUIRES>x_fringe_example</REQUIRES>
          <REQUIRES>fringe</REQUIRES>
          <SCHEME>
(fringe x)
          </SCHEME>
          <JAVASCRIPT>
fringe(x);
          </JAVASCRIPT>
        </SNIPPET>
        <CHANGE>should return</CHANGE>
        <SNIPPET EVAL="no">
          <SCHEME>
(1 2 3 4)
          </SCHEME>
          <JAVASCRIPT>
[1, [2, [3, [4, []]]]]
        </JAVASCRIPT>
        </SNIPPET>
        and
        <SNIPPET>
          <REQUIRES>x_fringe_example</REQUIRES>
          <REQUIRES>fringe</REQUIRES>
          <SCHEME>
(fringe (list x x))
          </SCHEME>
          <JAVASCRIPT>
fringe(list(x, x));
        </JAVASCRIPT>
        </SNIPPET>
        should return
        <SNIPPET EVAL="no">
          <SCHEME>
(1 2 3 4 1 2 3 4)
          </SCHEME>
          <JAVASCRIPT>
[1, [2, [3, [4, [1, [2, [3, [4, []]]]]]]]]
        </JAVASCRIPT>
        </SNIPPET>
<SOLUTION>
  <SNIPPET>
<JAVASCRIPT>
function fringe(x) {
  if (is_empty_list(x)) {
    return [];
  }
  else if (is_pair(x)) {
    return append(fringe(head(x)), fringe(tail(x)));
  }
  else {
    return list(x);
  }
}
</JAVASCRIPT>
<SCHEME>
</SCHEME>
</SNIPPET>
</SOLUTION>
      </EXERCISE>

      <EXERCISE>
        <INDEX>mobile</INDEX>
        A binary mobile consists of two branches, a left branch and a right
        branch.  Each branch is a rod of a certain length, from which hangs
        either a weight or another binary mobile.  We can represent a binary
        mobile using compound data by constructing it from two branches (for
        example, using <SCHEMEINLINE>list</SCHEMEINLINE>):

        <SNIPPET>
          <SCHEME>
(define (make-mobile left right)
   (list left right))
          </SCHEME>
          <JAVASCRIPT>
function make_mobile(left, right) {
   return list(left, right);
}
        </JAVASCRIPT>
        </SNIPPET>

        A branch is constructed from a <SCHEMEINLINE>length</SCHEMEINLINE> (which must be a number)
        together with a <SCHEMEINLINE>structure</SCHEMEINLINE>, which may be either a number
        (representing a simple weight) or another mobile:

        <SNIPPET>
          <SCHEME>
(define (make-branch length structure)
   (list length structure))
          </SCHEME>
          <JAVASCRIPT>
function make_branch(length, structure) {
   return list(length, structure);
}
          </JAVASCRIPT>
        </SNIPPET>

        <OL>
          <LI>
            Write the corresponding selectors <SPLITINLINE><SCHEME><SCHEMEINLINE>left-branch</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>left_branch</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and
            <SPLITINLINE><SCHEME><SCHEMEINLINE>right-branch</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>right_branch</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, which return the branches of a mobile, and
                <SPLITINLINE><SCHEME><SCHEMEINLINE>branch-length</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>branch_length</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>branch-structure</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>branch_structure</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, which return
            the components of a branch.
          </LI>

          <LI>
            Using your selectors, define a
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            <SPLITINLINE><SCHEME><SCHEMEINLINE>total-weight</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>total_weight</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
            that returns the total weight of a mobile.
          </LI>

          <LI>
            A mobile is said to be
            <INDEX>balanced mobile</INDEX>
            <EM>balanced</EM> if the torque applied
            by its top-left branch is equal to that applied by its top-right
            branch (that is, if the length of the left rod multiplied by the
            weight hanging from that rod is equal to the corresponding product for
            the right side) and if each of the submobiles hanging off its branches
            is balanced. Design a predicate that tests whether a binary mobile is
            balanced.
          </LI>

          <LI>
            Suppose we change the representation of mobiles so that the
            constructors are

            <SNIPPET>
              <SCHEME>
(define (make-mobile left right)
  (cons left right))

(define (make-branch length structure)
  (cons length structure))
              </SCHEME>
              <JAVASCRIPT>
function make_mobile(left, right) {
   return pair(left, right);
}
function make_branch(length, structure) {
   return pair(length, structure);
}
            </JAVASCRIPT>
            </SNIPPET>

            How much do you need to change your programs to convert to the new
            representation?
          </LI>
        </OL>
        <LABEL NAME="ex:mobile"/>
  <SOLUTION>
    <TEXT>1. </TEXT>
    <SNIPPET>
      <NAME>branch_construction</NAME>
    <JAVASCRIPT>
function make_mobile(left, right) {
   return pair(left, right);
}

function make_branch(length, structure) {
   return pair(length, structure);
}

function left_branch(m){
  return head(m);
}

function right_branch(m){
  return tail(m);
}

function branch_length(b){
  return head(b);
}

function branch_structure(b){
  return tail(b);
}
</JAVASCRIPT>
</SNIPPET>

<TEXT>2. </TEXT>
<SNIPPET>
  <REQUIRES>branch_construction</REQUIRES>
  <EXAMPLE>example_2.30</EXAMPLE>
  <JAVASCRIPT>
function is_mobile(x){
  if (is_pair(head(x))) {
     return 1;
  }
  else {
     return 0;
  }
}

function is_weight(x) {
  if((!(is_mobile(x)))&amp;&amp;(!(is_pair(branch_structure(x))))){
     return 1;
  }
  else {
     return 0;
  }
}

function total_weight(x) {
  if(is_weight(x)) {
    return branch_structure(x);
  }
  else if(is_mobile(x)) {
    return total_weight(left_branch(x))
             +
           total_weight(right_branch(x));
  }
  else {
    return total_weight(branch_structure(x));
  }
}

</JAVASCRIPT>
</SNIPPET>

<TEXT>Another method:</TEXT>
<SNIPPET>
  <REQUIRES>branch_construction</REQUIRES>
  <EXAMPLE>example_2.30</EXAMPLE>
  <JAVASCRIPT>
function branch_weight(branch) {
  if (is_pair(branch_structure(branch))) {
    return total_weight(branch_structure(branch));
  }
  else {
    return branch_structure(branch);
  }
}

function total_weight(mobile) {
  return branch_weight(left_branch(mobile))
          +
         branch_weight(right_branch(mobile));
}
    </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
    <NAME>example_2.30</NAME>
    <JAVASCRIPT>
const v=make_mobile(make_branch(10, make_mobile(make_branch(10, 2), make_branch(4, 5))), make_branch(10, 23));
total_weight(v);
    </JAVASCRIPT>
    </SNIPPET>

<TEXT>3. </TEXT>
<SNIPPET>
  <REQUIRES>branch_construction</REQUIRES>
  <EXAMPLE>example_2.31</EXAMPLE>
  <JAVASCRIPT>
function is_mobile(x){
  if (is_pair(head(x))) {
     return 1;
  }
  else {
     return 0;
  }
}

function branch_weight(branch) {
  if(is_pair(branch_structure(branch))) {
    return branch_length(branch) 
            * 
           total_weight(branch_structure(branch));
  }
  else {
    return branch_length(branch) * branch_structure(branch);
  }
}

function total_weight(mobile) {
  return branch_weight(left_branch(mobile))
          +
         branch_weight(right_branch(mobile));
}

function is_balanced(mobile) {
    if (is_mobile(mobile)) {
        return is_balanced(left_branch(mobile))&amp;&amp;
               is_balanced(right_branch(mobile))&amp;&amp;
               branch_weight(left_branch(mobile)) === branch_weight(right_branch(mobile));
    }
    else {
        return true;
    }
}
  </JAVASCRIPT>
</SNIPPET>
<SNIPPET HIDE="yes">
    <NAME>example_2.31</NAME>
    <JAVASCRIPT>
const v=make_mobile(make_branch(10, make_mobile(make_branch(10, 2), make_branch(4, 5))), make_branch(10, 40));
is_balanced(v);
    </JAVASCRIPT>
    </SNIPPET>
    </SOLUTION>
      </EXERCISE>

      <INDEX>data<SUBINDEX>hierarchical|)</SUBINDEX></INDEX>
      <INDEX>hierarchical data structures|)</INDEX>
      <INDEX>tree<SUBINDEX>represented as pairs|)</SUBINDEX></INDEX>
      <INDEX>pair(s)<SUBINDEX>used to represent tree|)</SUBINDEX></INDEX>

      <SUBHEADING>
        <NAME>Mapping over trees</NAME>
      </SUBHEADING>

      <INDEX>tree<SUBINDEX>mapping over|(</SUBINDEX></INDEX>
      <INDEX>mapping<SUBINDEX>tree@over trees|(</SUBINDEX></INDEX>

      <TEXT>
        Just as <SPLITINLINE><SCHEME><SCHEMEINLINE>map</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>map</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is a powerful abstraction for dealing with sequences,
        <SPLITINLINE><SCHEME><SCHEMEINLINE>map</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>map</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> together with recursion is a powerful abstraction for
        dealing with trees.  For instance, the <SPLITINLINE><SCHEME><SCHEMEINLINE>scale-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>scale_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, analogous to <SPLITINLINE><SCHEME><SCHEMEINLINE>scale-list</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>scale_list</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of
        Section<SPACE/><REF NAME="sec:sequences"/>, takes as arguments a numeric factor and a
        tree whose leaves are numbers.  It returns a tree of the same shape,
        where each number is multiplied by the factor.
        The recursive plan for <SPLITINLINE><SCHEME><SCHEMEINLINE>scale-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>scale_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is similar to the one for
        <SPLITINLINE><SCHEME><SCHEMEINLINE>count-leaves</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>count_leaves</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:

        <SNIPPET>
          <NAME>scale_tree</NAME>
          <EXAMPLE>scale_tree_example</EXAMPLE>
          <SCHEME>
            <!-- \indcode*{scale-tree} -->
(define (scale-tree tree factor)
  (cond ((null? tree) nil)
     ((not (pair? tree)) (* tree factor))
     (else (cons (scale-tree (car tree) factor)
                 (scale-tree (cdr tree) factor)))))
          </SCHEME>
          <SCHEMEOUTPUT>
(10 (20 (30 40) 50) (60 70))
          </SCHEMEOUTPUT>
          <JAVASCRIPT>
function scale_tree(tree, factor) {
    return is_empty_list(tree)
           ? []
           : !is_pair(tree)
             ? tree * factor
             : pair(scale_tree(head(tree), factor), 
                    scale_tree(tail(tree), factor));
}
        </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET HIDE="yes">
          <NAME>scale_tree_example</NAME>
          <SCHEME>
(scale-tree (list 1 (list 2 (list 3 4) 5) (list 6 7))
            10)
          </SCHEME>
          <JAVASCRIPT>
scale_tree(list(1, list(2, list(3, 4), 5), list(6, 7)),
           10);
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        Another way to implement <SPLITINLINE><SCHEME><SCHEMEINLINE>scale-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>scale_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is to regard the
        tree as a sequence of sub-trees and use <SPLITINLINE><SCHEME><SCHEMEINLINE>map</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>map</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  We map
        over the sequence, scaling each sub-tree in turn, and return the list
        of results.  In the base case, where the tree is a leaf, we simply
        multiply by the factor:

        <SNIPPET>
          <EXAMPLE>scale_tree_example</EXAMPLE>
          <SCHEME>
            <!-- \indcode*{scale-tree} -->
(define (scale-tree tree factor)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
           (scale-tree sub-tree factor)
           (* sub-tree factor)))
       tree))
          </SCHEME>
          <JAVASCRIPT>
function scale_tree(tree, factor) {
    return map(sub_tree => is_pair(sub_tree)
                           ? scale_tree(sub_tree, factor)
                           : sub_tree * factor, 
               tree);
}
          </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        Many tree operations can be implemented by similar combinations of
        sequence operations and recursion.
      </TEXT>

      <EXERCISE><LABEL NAME="ex:square-tree"/>
        Define a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME><SCHEMEINLINE>square-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> analogous to the <SPLITINLINE><SCHEME><SCHEMEINLINE>square-list</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square_list</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        of Exercise<SPACE/><REF NAME="ex:square-list"/>.  That is, <SPLITINLINE><SCHEME><SCHEMEINLINE>square-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> should behave as follows:

        <SNIPPET>
          <NAME>square_tree_example</NAME>
          <SCHEME>
(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
          </SCHEME>
          <JAVASCRIPT>
square_tree(list(1,
                 list(2, list(3, 4), 5), 
                 list(6, 7)));
        </JAVASCRIPT>
          <SCHEMEOUTPUT>
(1 (4 (9 16) 25) (36 49))
          </SCHEMEOUTPUT>
        </SNIPPET>
        <CHANGE>
          should return
        <SNIPPET EVAL="no">
          <SCHEME>
(1 (4 (9 16) 25) (36 49))
          </SCHEME>
          <JAVASCRIPT>
[1, [[4, [[9, [16, []]], [25, []]]], [[36, [49, []]], []]]]
        </JAVASCRIPT>
        </SNIPPET>
        </CHANGE>
        Define <SPLITINLINE><SCHEME><SCHEMEINLINE>square-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> both directly (i.e., without using any
        higher-order
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>) and also by using <SPLITINLINE><SCHEME><SCHEMEINLINE>map</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>map</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and recursion.
        
  <SOLUTION>
    <SNIPPET>
    <REQUIRES>square_definition</REQUIRES>
    <EXAMPLE>square_tree_example</EXAMPLE>
    <JAVASCRIPT>
function square_tree(tree) {
    return is_empty_list(tree)
           ? []
           : !is_pair(tree)
             ? square(tree)
             : pair(square_tree(head(tree)),
	            square_tree(tail(tree)));
}
</JAVASCRIPT>
</SNIPPET>
<TEXT>Another method:</TEXT>
<SNIPPET>
  <REQUIRES>square_definition</REQUIRES>
  <EXAMPLE>square_tree_example</EXAMPLE>
  <JAVASCRIPT>
function square_tree(tree) {
    return map(sub_tree => !is_pair(sub_tree)
                           ? square(sub_tree)
                           : square_tree(sub_tree),
               tree);
}
    </JAVASCRIPT>
    </SNIPPET>
  </SOLUTION>
      </EXERCISE>

      <EXERCISE><LABEL NAME="ex:tree-map"/>
        Abstract your answer to Exercise<SPACE/><REF NAME="ex:square-tree"/> to produce a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

        <!-- \indcode{tree-map} -->
        <SPLITINLINE><SCHEME><SCHEMEINLINE>tree-map</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tree_map</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> with the property that <SPLITINLINE><SCHEME><SCHEMEINLINE>square-tree</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square_tree</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        could be defined as

        <SNIPPET HIDE="yes">
          <NAME>tree_map</NAME>
          <SCHEME>
;; tree_map to be written by student; 
          </SCHEME>
          <JAVASCRIPT>
// tree_map to be written by student; 
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>square_tree</REQUIRES>
          <REQUIRES>tree_map</REQUIRES>
          <SCHEME>
(define (square-tree tree) (tree-map square tree))
          </SCHEME>
          <JAVASCRIPT>
function square_tree(tree) {
   return tree_map(square, tree);
}
        </JAVASCRIPT>
        </SNIPPET>
  <SOLUTION>
    <SNIPPET>
    <REQUIRES>square_definition</REQUIRES>
    <EXAMPLE>square_tree_example</EXAMPLE>
    <JAVASCRIPT>
function tree_map(square, tree) {
    return map(sub_tree => is_empty_list(sub_tree)
                           ? []
                           : is_pair(sub_tree)
                             ? tree_map(square, sub_tree)
                             : square(sub_tree),
               tree);
}
function square_tree(tree) {
    return tree_map(square, tree);
}
    </JAVASCRIPT>
    <SCHEME>
    </SCHEME>
    </SNIPPET></SOLUTION>
      </EXERCISE>

      <EXERCISE>
        We can represent a
        <INDEX>set<SUBINDEX>subsets of</SUBINDEX></INDEX>
        set as a list of distinct elements, and we can
        represent the set of all subsets of the set as a list of lists.  For
        example, if the set is <SPLITINLINE><SCHEME><SCHEMEINLINE>(1 2 3)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>[1, [2, [3, []]]]</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, then the set of all subsets is
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>[[], [[3, []], [[2, []], [[2, [3, []]], [[1, []], [[2, [3, []]], [[1, [2, []]], [[1, [2, [3, []]]], []]]]]]]]]</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  Complete the
        following definition of a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        that generates the set of subsets
        of a set and give a clear explanation of why it works:
        <SNIPPET EVAL="no">
          <SCHEME>
            <!--\indcodeplus*{subsets}{of a set}-->
(define (subsets s)
  (if (null? s)
    (list nil)
    (let ((rest (subsets (cdr s))))
      (append rest (map ^??^ rest)))))
          </SCHEME>
          <JAVASCRIPT>
function subsets(s) {
    if (is_empty_list(s)) {
       return list([]);
    } else {
       const rest = subsets(tail(s));
       return append(rest, map(??, rest));
    }
}
        </JAVASCRIPT>
        </SNIPPET>
	<SOLUTION>
    <SNIPPET>
	  <EXAMPLE>example_2.33</EXAMPLE>
    <JAVASCRIPT>
function subsets(s) {
    if (is_empty_list(s)) {
        return list([]);
    } else {
        const rest = subsets(tail(s));
        return append(rest, map(x => pair(head(s), x), rest));
    }
}
    </JAVASCRIPT>
    <SCHEME>
    </SCHEME>
    </SNIPPET>
    <SNIPPET HIDE="yes">
    <NAME>example_2.33</NAME>
    <JAVASCRIPT>
 subsets(list(1, 2, 3));
    </JAVASCRIPT>
    </SNIPPET>
    </SOLUTION>
      </EXERCISE>
      <INDEX>tree<SUBINDEX>mapping over|)</SUBINDEX></INDEX>
      <INDEX>mapping<SUBINDEX>tree@over trees|)</SUBINDEX></INDEX>

    </SUBSECTION>
