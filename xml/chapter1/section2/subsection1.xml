      <SUBSECTION>
        <NAME>Linear Recursion and Iteration</NAME>

        <LABEL NAME="sec:recursion-and-iteration"/>
        <INDEX>iterative process<SUBINDEX>recursive process vs.|(</SUBINDEX></INDEX>
        <INDEX>recursive process<SUBINDEX>iterative process vs.|(</SUBINDEX></INDEX>

            <TEXT>
              <INDEX>factorial</INDEX>
              We begin by considering the factorial function, defined by
              <LATEX>
              \[ n!=n\cdot(n-1)\cdot(n-2)\cdots3\cdot2\cdot1 \]
              </LATEX>
              There are many ways to compute factorials.  One way is to make use of
              the observation that <LATEXINLINE>$n!$</LATEXINLINE> is equal to 
              <LATEXINLINE>$n$</LATEXINLINE> times <LATEXINLINE>$(n-1)!$</LATEXINLINE> for
              any positive integer<SPACE/><LATEXINLINE>$n$</LATEXINLINE>:
              <LATEX>
              \[ n!=n\cdot\left[(n-1)\cdot(n-2)\cdots3\cdot2\cdot1\right]=n\cdot(n-1)! \]
              </LATEX>
              Thus, we can compute <LATEXINLINE>$n!$</LATEXINLINE> by computing 
              <LATEXINLINE>$(n-1)!$</LATEXINLINE> and multiplying the
              result by <LATEXINLINE>$n$</LATEXINLINE>.  If we add the stipulation that 1! 
              is equal to 1,
              this observation translates directly into a 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:
              <!-- \indcode*{factorial}[linear recursive version] -->
              <SNIPPET>
                <NAME>factorial_definition</NAME>
                <EXAMPLE>factorial_example</EXAMPLE>
                <SCHEME>
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
                </SCHEME>
                <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
                </JAVASCRIPT>
              </SNIPPET>

        <SNIPPET PAGE="32" HIDE="yes">
          <NAME>factorial_example</NAME>
          <SCHEME>
(factorial 5)
          </SCHEME>
          <JAVASCRIPT>
factorial(5);
          </JAVASCRIPT>
        </SNIPPET>
            </TEXT>


            <SPLIT>
              <SCHEME>
		<FIGURE src="img_original/ch1-Z-G-7.gif">
		  <LABEL NAME="fig:recursive-factorial"/>
		  <CAPTION>A linear recursive process for computing 6!.
		  </CAPTION>
		</FIGURE>
                <TEXT>
              <INDEX>substitution model of 
                <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
application<SUBINDEX>shape of process|(</SUBINDEX></INDEX>
              We can use the substitution model of
              Section<SPACE/><REF NAME="sec:substitution-model"/> to watch this 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
              in action
              computing 6!, as shown in Figure<SPACE/><REF NAME="fig:recursive-factorial"/>.
                </TEXT>
              </SCHEME>
              <JAVASCRIPT>
		<FIGURE>
      <FIGURE src="img_javascript/ch1-Z-G-7.png"></FIGURE>
		  <LABEL NAME="fig:recursive-factorial"/>
		  <CAPTION>A linear recursive process for computing 6!.
		  </CAPTION>
		</FIGURE>
                <TEXT>
	      We can use the substitution model of
              Section<SPACE/><REF NAME="sec:substitution-model"/> to watch the
              function in action
              computing 6!, as shown in Figure<SPACE/><REF NAME="fig:recursive-factorial"/>.
                </TEXT>
            </JAVASCRIPT>
            </SPLIT>

            <TEXT>
              Now let<APOS/>s take a different perspective on computing factorials.  We
              could describe a rule for computing <LATEXINLINE>$n!$</LATEXINLINE> by 
              specifying that we
              first multiply 1 by 2, then multiply the result by 3, then by 4,
              and so on until we reach <LATEXINLINE>$n$</LATEXINLINE>.
              More formally, we maintain a running product, together with a counter
              that counts from 1 up to <LATEXINLINE>$n$</LATEXINLINE>.  We can describe the computation by
              saying that the counter and the product simultaneously change from one
              step to the next according to the rule

              <P>
              product <LATEXINLINE>$\leftarrow$</LATEXINLINE> counter <LATEXINLINE>$\cdot$</LATEXINLINE> product 
              </P>
              <P>
              counter <LATEXINLINE>$\leftarrow$</LATEXINLINE> counter <LATEXINLINE>$+$</LATEXINLINE> 1
              </P>
              and stipulating that <LATEXINLINE>$n!$</LATEXINLINE> is the value of the product when
              the counter exceeds <LATEXINLINE>$n$</LATEXINLINE>.

            </TEXT>

            <TEXT>
              Once again, we can recast our description as a 
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
              for computing
              factorials:<FOOTNOTE>In a real program we would probably use the
                block structure introduced in the last section to hide the definition
                of
                <SPLITINLINE><SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME>
                  <JAVASCRIPT><JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE></JAVASCRIPT>
                </SPLITINLINE>:

        <SNIPPET PAGE="33">
          <EXAMPLE>factorial_example</EXAMPLE>
          <SCHEME>
(define (factorial n)
  (define (iter product counter)
    (if (&gt; counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))
          </SCHEME>
          <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter) {
        return counter &gt; n 
               ? product
               : iter(counter * product,
                      counter + 1);
   }
   return iter(1, 1);
}
          </JAVASCRIPT>
        </SNIPPET>

                We avoided doing this here so as to minimize the number of things to
                think about at once.<LABEL NAME="foot:block-structured-factorial"/></FOOTNOTE>

              <SNIPPET PAGE="34">
                <NAME>factorial_iterative_definition</NAME>
                <EXAMPLE>factorial_example</EXAMPLE>
                <SCHEME>
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (&gt; counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))
                </SCHEME>
                <JAVASCRIPT>
function factorial(n) {
    return fact_iter(1, 1, n);
}
function fact_iter(product, counter, max_count) {
    return counter &gt; max_count
           ? product
           : fact_iter(counter * product,
                       counter + 1,
                       max_count);
}
                </JAVASCRIPT>
              </SNIPPET>
                  <!-- \indcode*{factorial}[linear iterative version] -->
            </TEXT>

            <SPLIT>
              <SCHEME>
		<FIGURE src="img_original/ch1-Z-G-10.gif">
		  <LABEL NAME="fig:iterative-factorial"/>
		  <CAPTION>A linear iterative process for computing <LATEXINLINE>$6!$</LATEXINLINE>.
		  </CAPTION>
		</FIGURE>
                <TEXT>
              As before, we can use the substitution model to visualize the process
              of computing <LATEXINLINE>$6!$</LATEXINLINE>, as shown in Figure<SPACE/><REF NAME="fig:iterative-factorial"/>.
            </TEXT>
              </SCHEME>
              <JAVASCRIPT>
		<FIGURE >
      <FIGURE src="img_javascript/ch1-Z-G-10.png"></FIGURE>
		  <LABEL NAME="fig:iterative-factorial"/>
		  <CAPTION>A linear iterative process for computing <LATEXINLINE>$6!$</LATEXINLINE>.
		  </CAPTION>
		</FIGURE>
                <TEXT>
              As before, we can use the substitution model to visualize the process
              of computing <LATEXINLINE>$6!$</LATEXINLINE>, as shown in Figure<SPACE/><REF NAME="fig:iterative-factorial"/>.
                </TEXT>
              </JAVASCRIPT>
            </SPLIT>

        <TEXT>
          Compare the two processes.  From one point of view, they seem hardly
          different at all.  Both compute the same mathematical function on the
          same domain, and each requires a number of steps proportional to <LATEXINLINE>$n$</LATEXINLINE>
          to compute <LATEXINLINE>$n!$</LATEXINLINE>.  Indeed, both processes even carry out the same
          sequence of multiplications, obtaining the same sequence of partial
          products.  On the other hand, when we consider the
          <INDEX>shape of a process</INDEX><INDEX>process<SUBINDEX>shape of</SUBINDEX></INDEX>
          <QUOTE>shapes</QUOTE> of the
          two processes, we find that they evolve quite differently.
        </TEXT>

        <TEXT>
          Consider the first process.  The substitution model reveals a shape of
          expansion followed by contraction, indicated by the arrow in
          Figure<SPACE/><REF NAME="fig:recursive-factorial"/>.  The expansion occurs as the
          process builds up a chain of 
          <INDEX>deferred operations</INDEX>
          <EM>deferred operations</EM> (in this case,
          a chain of multiplications).  The contraction occurs as 
          the operations are
          actually performed.  This type of process, characterized by a chain of
          deferred operations, is called a 
          <INDEX>recursive process</INDEX><INDEX>process<SUBINDEX>recursive</SUBINDEX></INDEX>
          <EM>recursive process</EM>.  Carrying
          out this process requires that the interpreter keep track of the
          operations to be performed later on.  In the computation of <LATEXINLINE>$n!$</LATEXINLINE>,
          the length of the chain of deferred multiplications, and hence the amount
          of information needed to keep track of it, 
          <INDEX>linear growth</INDEX>
          grows linearly with <LATEXINLINE>$n$</LATEXINLINE>
          (is proportional to <LATEXINLINE>$n$</LATEXINLINE>), just like the number of steps.
          <INDEX>recursive process<SUBINDEX>linear</SUBINDEX></INDEX>
          <INDEX>linear recursive process</INDEX>
          <INDEX>process<SUBINDEX>linear recursive</SUBINDEX></INDEX>
          Such a process is called a <EM>linear recursive process</EM>.
        </TEXT>

        <TEXT>
          By contrast, the second process does not grow and shrink.  At each
          step, all we need to keep track of, for any <LATEXINLINE>$n$</LATEXINLINE>, are the current
          values of the
	  <SPLITINLINE><SCHEME>variables</SCHEME><JAVASCRIPT>names</JAVASCRIPT></SPLITINLINE>
	  <SCHEMEINLINE>product</SCHEMEINLINE>, <SCHEMEINLINE>counter</SCHEMEINLINE>, and 
          <SPLITINLINE><SCHEME><SCHEMEINLINE>max-count</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>max_count</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  We call this an 
          <INDEX>iterative process</INDEX><INDEX>process<SUBINDEX>iterative</SUBINDEX></INDEX>
          <EM>iterative process</EM>.  In general, an
          iterative process is one whose state can be summarized by
	  <SPLITINLINE>
	    <SCHEME>
	      a fixed
              number of
              <INDEX>state variable</INDEX>
            <EM>state variables</EM>,
	    </SCHEME>
	    <JAVASCRIPT>
	      the values of a fixed
              number of
              <INDEX>state names</INDEX>
            <EM>state names</EM>,
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  together with a fixed rule that
          describes how
	  <SPLITINLINE>
	    <SCHEME>
	      the state variables
	    </SCHEME>
	    <JAVASCRIPT>
	      the values of the state names
	    </JAVASCRIPT>
	  </SPLITINLINE>
	  should be updated as the process
          moves from state to state and an (optional) end test that specifies
          conditions under which the process should terminate.  In computing
          <LATEXINLINE>$n!$</LATEXINLINE>, the number of steps required grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.  Such a process is
          called a 
          <INDEX>iterative process<SUBINDEX>linear</SUBINDEX></INDEX>
          <INDEX>linear iterative process</INDEX>
          <INDEX>process<SUBINDEX>linear iterative</SUBINDEX></INDEX>
          <EM>linear iterative process</EM>.
        </TEXT>

        <TEXT>
              The contrast between the two processes can be seen in another way.  In
              the iterative case, the
	      <SPLITINLINE>
		<SCHEME>
		  state variables
		</SCHEME>
		<JAVASCRIPT>
		  values of the state names
		</JAVASCRIPT>
	      </SPLITINLINE>
	      provide a complete
              description of the state of the process at any point.  If we stopped
              the computation between steps, all we would need to do to resume the
              computation is to supply the interpreter with the values of the three
	      <SPLITINLINE>
		<SCHEME>
		  state variables.
		</SCHEME>
		<JAVASCRIPT>
		  state names.
		</JAVASCRIPT>
	      </SPLITINLINE>
		  Not so with the recursive process.  In this case
              there is some additional <QUOTE>hidden</QUOTE> information, maintained by the
              interpreter and not contained in the
	      <SPLITINLINE>
		<SCHEME>
		  state variables,
		</SCHEME>
		<JAVASCRIPT>
		  state names,
		</JAVASCRIPT>
	      </SPLITINLINE>
		  which
              indicates <QUOTE>where the process is</QUOTE> in negotiating the chain of
              deferred operations.  The longer the chain, the more information must
              be maintained.<FOOTNOTE>When we discuss the implementation of
                <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> 
                on register machines in Chapter<SPACE/>5, we will see that any
                iterative process can be realized <QUOTE>in hardware</QUOTE> as a machine that
                has a fixed set of registers and no auxiliary memory.  In contrast,
                realizing a recursive process requires a machine that uses an
                <INDEX>stack</INDEX>
                auxiliary data structure known as a <EM>stack</EM>.</FOOTNOTE>
              <INDEX>substitution model of <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> application<SUBINDEX>shape of process|)</SUBINDEX></INDEX>
        </TEXT>

        <TEXT>
              In contrasting iteration and recursion, we must be careful not to
              confuse the notion of a 
              <INDEX>recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>recursive process vs.</SUBINDEX></INDEX>
              <INDEX>recursive process<SUBINDEX>recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> vs.</SUBINDEX></INDEX>
              recursive <EM>process</EM> with the notion of a
              recursive 
              <EM><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></EM>.  
              When we describe a <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> as recursive,
              we are referring to the syntactic fact that the <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> definition
              refers (either directly or indirectly) to the <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> itself.  But
              when we describe a process as following a pattern that is, say,
              linearly recursive, we are speaking about how the process evolves, not
              about the syntax of how a <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> is written.  It may seem
              disturbing that we refer to a recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> such as 
              <SPLITINLINE><SCHEME><SCHEMEINLINE>fact-iter</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>fact_iter</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              as generating an iterative process.  However, the process
              really is iterative: Its state is captured completely by its three
              <SPLITINLINE><SCHEME>state variables</SCHEME><JAVASCRIPT>state names</JAVASCRIPT></SPLITINLINE>,
	      and an interpreter need keep track of only three
	      <SPLITINLINE><SCHEME>variables</SCHEME><JAVASCRIPT>names</JAVASCRIPT></SPLITINLINE>
	      in order to execute the process.
        </TEXT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              One reason that the distinction between process and procedure may be
              confusing is that most implementations of common languages (including
              <INDEX>Ada<SUBINDEX>recursive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
              <INDEX>Pascal<SUBINDEX>recursive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
              <INDEX>C<SUBINDEX>recursive <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
              Ada, Pascal, and C) are designed in such a way that the
              interpretation of any recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> consumes an amount of memory
              that grows with the number of <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> calls, even when the process
              described is, in principle, iterative.  As a consequence, these
              languages can describe iterative processes only by resorting to
              special-purpose 
              <INDEX>looping constructs</INDEX>
              <QUOTE>looping constructs</QUOTE> such as <SCHEMEINLINE>do</SCHEMEINLINE>, <JAVASCRIPTINLINE>repeat</JAVASCRIPTINLINE>,
              <JAVASCRIPTINLINE>until</JAVASCRIPTINLINE>, <JAVASCRIPTINLINE>for</JAVASCRIPTINLINE>, and <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE>.  The implementation of Scheme
              we shall consider in Chapter<SPACE/>5 does not share this defect.  It will
              execute an iterative process in constant space, even if the iterative
              process is described by a recursive <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  An implementation with
              this property is called 
              <INDEX>tail recursion</INDEX>
              <EM>tail-recursive</EM>.  With a tail-recursive
              implementation, 
              <INDEX>iterative process<SUBINDEX>implemented by <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> call</SUBINDEX></INDEX>
              iteration can be expressed using the ordinary
              <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> call mechanism, so that special iteration constructs are
              useful only as 
              <INDEX>syntactic sugar<SUBINDEX>looping constructs as</SUBINDEX></INDEX>
              syntactic sugar.<FOOTNOTE>Tail recursion has long been
                <INDEX>Hewitt, Carl Eddie</INDEX><INDEX>Steele, Guy Lewis Jr.</INDEX><INDEX>Sussman, Gerald Jay</INDEX>
                known as a compiler optimization trick.  A coherent semantic basis for
                tail recursion was provided by Carl Hewitt (1977), who explained it in
                <INDEX>message passing<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
                terms of the <QUOTE>message-passing</QUOTE> model of computation that we shall
                discuss in Chapter<SPACE/>3. Inspired by this, Gerald Jay Sussman and Guy
                Lewis Steele Jr.<SPACE/>(see <CITATION>Steele 1975</CITATION>) 
                constructed a tail-recursive
                interpreter for Scheme.  Steele later showed how tail recursion is a
                consequence of the natural way to compile 
                <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
                calls (Steele
                1977).  The IEEE standard for Scheme requires that Scheme implementations
                <INDEX>tail recursion<SUBINDEX>Scheme@in Scheme</SUBINDEX></INDEX>
                be tail-recursive.</FOOTNOTE>
              <INDEX>iterative process<SUBINDEX>recursive process vs.|)</SUBINDEX></INDEX>
              <INDEX>recursive process<SUBINDEX>iterative process vs.|)</SUBINDEX></INDEX>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              One reason that the distinction between process and function
              may be
              confusing is that most programming languages<EMDASH/>including
              JavaScript<EMDASH/>are designed in such a way that the
              interpretation of any recursive function consumes an amount of memory
              that grows with the number of function calls, even when the process
              described is, in principle, iterative.  As a consequence, they
              can describe iterative processes only by resorting to
              special-purpose 
              <INDEX>looping constructs</INDEX>
              <QUOTE>looping constructs</QUOTE> such as 
              <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE> and
              <JAVASCRIPTINLINE>for</JAVASCRIPTINLINE>, which we will encounter
              in Chapter 3. The language Scheme
              does not share this defect.  It will
              execute an iterative process in constant space, even if the iterative
              process is described by a recursive function.  An implementation with
              this property is called 
              <INDEX>tail recursion</INDEX>
              <EM>tail-recursive</EM>.  With a tail-recursive
              implementation, 
              <INDEX>iterative process<SUBINDEX>implemented by <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> call</SUBINDEX></INDEX>
              iteration can be expressed using the ordinary
              function call mechanism, so that special iteration constructs are
              useful only as 
              <INDEX>syntactic sugar<SUBINDEX>looping constructs as</SUBINDEX></INDEX>
              syntactic sugar.<FOOTNOTE>Tail recursion has long been
                <INDEX>Hewitt, Carl Eddie</INDEX><INDEX>Steele, Guy Lewis Jr.</INDEX><INDEX>Sussman, Gerald Jay</INDEX>
                known as a compiler optimization trick.  A coherent semantic basis for
                tail recursion was provided by Carl Hewitt (1977), who explained it in
                <INDEX>message passing<SUBINDEX>tail recursion and</SUBINDEX></INDEX>
                terms of the <QUOTE>message-passing</QUOTE> model of computation that we shall
                discuss in Chapter<SPACE/>3. Inspired by this, Gerald Jay Sussman and Guy
                Lewis Steele Jr.<SPACE/>(see <CITATION>Steele 1975</CITATION>) 
                constructed a tail-recursive
                interpreter for Scheme.  Steele later showed how tail recursion is a
                consequence of the natural way to compile 
                <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> 
                calls (Steele
                1977).  The IEEE standard for Scheme requires that Scheme implementations
                <INDEX>tail recursion<SUBINDEX>Scheme@in Scheme</SUBINDEX></INDEX>
                be tail-recursive.</FOOTNOTE>
              <INDEX>iterative process<SUBINDEX>recursive process vs.|)</SUBINDEX></INDEX>
              <INDEX>recursive process<SUBINDEX>iterative process vs.|)</SUBINDEX></INDEX>
              Chapter<SPACE/>5 describes a tail-recursive implementation of a subset of JavaScript.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <EXERCISE><LABEL NAME="ex:addition-procedures"/>
                Each of the following two <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> defines a method for adding two
                positive integers in terms of the <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> <SCHEMEINLINE>inc</SCHEMEINLINE>,
                which increments its argument by 1, and <SCHEMEINLINE>dec</SCHEMEINLINE>, which decrements
                its argument by 1.

        <SNIPPET PAGE="36" HIDE="yes">
          <NAME>inc_dec_definition</NAME>
          <SCHEME>
(define (inc x)
  (- x -1))
(define (dec x)
  (- x 1))
          </SCHEME>
          <JAVASCRIPT>
function inc(x) {
    return x + 1;
}
function dec(x) {
    return x - 1;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="36" HIDE="yes">
          <NAME>plus_example</NAME>
          <SCHEME>
(+ 4 5)
          </SCHEME>
          <JAVASCRIPT>
plus(4, 5);
          </JAVASCRIPT>
        </SNIPPET>


        <SNIPPET>
          <REQUIRES>inc_dec_definition</REQUIRES>
          <EXAMPLE>plus_example</EXAMPLE>
          <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))
          </SCHEME>
          <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : inc(plus(dec(a), b)); 
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET>
          <REQUIRES>inc_dec_definition</REQUIRES>
          <EXAMPLE>plus_example</EXAMPLE>
          <SCHEME>
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
          </SCHEME>
          <JAVASCRIPT>
function plus(a, b) {
    return a === 0 ? b : plus(dec(a), inc(b));
}
          </JAVASCRIPT>
        </SNIPPET>

                Using the substitution model, illustrate the process generated by each
                <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> in evaluating
                <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ 4 5)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>plus(4,5);</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  Are these processes iterative or recursive?

 <SOLUTION>
    <TEXT>
    <P>The process generated by the first procedure is recursive.</P>

    <P>plus(4, 5) </P>
      
    <P>4 === 0 ? 5 : inc(plus(dec(4), 5))</P>
         
    <P>inc(plus(dec(4), 5))</P>
    <P>... </P>
    <P>inc(plus(3, 5))</P>
    <P>... </P>
    <P>inc(inc(plus(2, 5)))</P>
    <P>... </P>
    <P>inc(inc(inc(plus(1, 5))))</P>
    <P>... </P>
    <P>inc(inc(inc(inc(plus(0, 5)))))</P>
    
    <P>inc(inc(inc(inc( 0 === 0 ? 5 : inc(plus(dec(0), 5))))))</P>
    
    <P>inc(inc(inc(inc( 5 ))))</P>
    
    <P>inc(inc(inc( 6 )))</P>
    
    <P>inc(inc( 7 ))</P>
    
    <P>inc( 8 )</P>
    
    <P>9 </P>
    
    <P>The process generated by the second procedure is iterative.</P>

    <P>plus(4, 5)</P>
                                      
    <P>4 === 0 ? 5 : plus(dec(4), inc(5))</P>
    
    <P>plus(dec(4), inc(5))</P>
    <P>...</P>                
    <P>plus(3, 6)</P>
    <P>... </P>
    <P>plus(2, 7)</P>
    <P>... </P>
    <P>plus(1, 8)</P>
    <P>... </P>
    <P>plus(0, 9)</P>
    
    <P>0 === 0 ? 9 : plus(dec(0), inc(9))</P>

    <P>9 </P>
    </TEXT>
</SOLUTION>
        </EXERCISE>

        <EXERCISE>
            <INDEX>Ackermann<APOS/>s function</INDEX><INDEX>function (mathematical)<SUBINDEX>Ackermann<APOS/>s</SUBINDEX></INDEX>
                The following <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE> computes a mathematical function called
                Ackermann<APOS/>s function.

        <SNIPPET PAGE="36">
          <NAME>ackermann_definition</NAME>
          <EXAMPLE>ackermann_example</EXAMPLE>
          <SCHEME>
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
          </SCHEME>
          <JAVASCRIPT>
function A(x,y) {
    return y === 0
           ? 0
           : x === 0
             ? 2 * y
             : y === 1
               ? 2
               : A(x - 1, A(x, y - 1));
}
          </JAVASCRIPT>
        </SNIPPET>

        What are the values of the following expressions?

        <SNIPPET PAGE="36">
          <NAME>ackermann_example</NAME>
          <REQUIRES>ackermann_definition</REQUIRES>
          <SCHEME>
(A 1 10)
          </SCHEME>
          <JAVASCRIPT>
A(1, 10);
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="36">
          <REQUIRES>ackermann_definition</REQUIRES>
          <SCHEME>
(A 2 4)
          </SCHEME>
          <JAVASCRIPT>
A(2, 4);
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="36">
          <REQUIRES>ackermann_definition</REQUIRES>
          <SCHEME>
(A 3 3)
          </SCHEME>
          <JAVASCRIPT>
A(3, 3);
          </JAVASCRIPT>
        </SNIPPET>

        Consider the following <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, where <SCHEMEINLINE>A</SCHEMEINLINE> is the <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>  
                defined above:

        <SNIPPET PAGE="36">
          <NAME>fghk_definition</NAME>
          <EXAMPLE>fghk_example</EXAMPLE>
          <REQUIRES>ackermann_definition</REQUIRES>
          <SCHEME>
(define (f n) (A 0 n))

(define (g n) (A 1 n))

(define (h n) (A 2 n))

(define (k n) (* 5 n n))
          </SCHEME>
          <JAVASCRIPT>
function f(n) {
    return A(0, n);
}
function g(n) {
    return A(1, n);
}
function h(n) {
    return A(2, n);
}
function k(n) {
   return 5 * n * n;
}
          </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET PAGE="36" HIDE="yes">
          <NAME>fghk_example</NAME>
          <REQUIRES>fghk_definition</REQUIRES>
          <SCHEME>
(k 4)
          </SCHEME>
          <JAVASCRIPT>
k(4);
          </JAVASCRIPT>
        </SNIPPET>

        Give concise mathematical definitions for the functions computed by
        the <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE> <SCHEMEINLINE>f</SCHEMEINLINE>, <SCHEMEINLINE>g</SCHEMEINLINE>, and <SCHEMEINLINE>h</SCHEMEINLINE> for positive integer
        values of <LATEXINLINE>$n$</LATEXINLINE>.  For example, k(n) computes <LATEXINLINE>$5n^2$</LATEXINLINE>.
    <SOLUTION>
    <TEXT>
    <P>The value of A(1, 10) expression is 1024.</P>

    <P>The value of A(2, 4) expression is 65536.</P>

    <P>The value of A(3, 3) expression is 65536.</P>

    <P>Mathematical definition for function f(n) is 2*n,
                                         g(n) is <LATEXINLINE>$2^n$</LATEXINLINE>, and 
                                         h(n) is <LATEXINLINE>$2^{h(n-1)}$</LATEXINLINE> with h(0)=0, h(1)=2 respectively.</P>
    </TEXT>
  </SOLUTION>
        </EXERCISE>

      </SUBSECTION>
