    <SUBSECTION>
      <NAME>
  Separating Syntactic Analysis from Execution
      </NAME>

      <LABEL NAME="sec:separating-analysis"/>
      <INDEX>syntactic analysis, separated from execution<SUBINDEX>in metacircular evaluator|(</SUBINDEX></INDEX>
      <INDEX>analyzing evaluator|(</INDEX>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>analyzing version|(</SUBINDEX></INDEX>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>efficiency of</SUBINDEX></INDEX>
      <INDEX>efficiency<SUBINDEX>evaluation@of evaluation</SUBINDEX></INDEX>

      <TEXT>
  The evaluator implemented above is simple, but it is very
  inefficient, because the syntactic analysis of expressions is interleaved
  with their execution.  Thus if a program is executed many times, its
  syntax is analyzed many times.  Consider, for example, evaluating <SPLITINLINE><SCHEME><SCHEMEINLINE>(factorial 4)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> using the following definition of <SCHEMEINLINE>factorial</SCHEMEINLINE>:

  <SNIPPET>
    <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Each time <SCHEMEINLINE>factorial</SCHEMEINLINE> is called, the evaluator must determine that
  the body is an <SCHEMEINLINE>if</SCHEMEINLINE> expression and extract the predicate.
  Only then can it evaluate the
  predicate and dispatch on its value.  Each time it evaluates the
  expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(* (factorial (- n 1)) n)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
  or the subexpressions <SPLITINLINE><SCHEME><SCHEMEINLINE>(factorial (- n 1))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>(- n 1)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
  the evaluator must perform
  the case analysis in <SCHEMEINLINE>eval</SCHEMEINLINE> to determine that the expression is an
  application, and must extract its operator and operands.  This
  analysis is expensive.  Performing it repeatedly is wasteful.
      </TEXT>

      <TEXT>
  We can transform the evaluator to be significantly more efficient by
  arranging things so that syntactic analysis is performed only
  once.<FOOTNOTE>This technique is an integral part of the compilation
    process, which we shall discuss in Chapter<SPACE/>5.  Jonathan Rees wrote a Scheme
    <INDEX>Rees, Jonathan A.</INDEX><INDEX>Adams, Norman I., IV</INDEX>
    <INDEX>Feeley, Marc</INDEX><INDEX>Lapalme, Guy</INDEX>
    interpreter like this in about 1982 for the T project 
    (<CITATION>Rees and Adams 1982</CITATION>).  
    <CITATION><TEXT>Marc Feeley (1986)</TEXT>Marc Feeley 1986</CITATION> 
    (see also <CITATION>Feeley and Lapalme 1987</CITATION>)
    independently invented this technique
    in his master<APOS/>s thesis.</FOOTNOTE> We split <SCHEMEINLINE>eval</SCHEMEINLINE>, which takes an
  expression and an environment, into two parts.  The
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>analyze</SCHEMEINLINE> takes only the expression.  It performs the syntactic
  analysis and returns a new
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, the 
  <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in analyzing evaluator</SUBINDEX></INDEX>
  <EM>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></EM>, that
  encapsulates the work to be done in executing the analyzed
  expression.  The execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  takes an environment as its
  argument and completes the evaluation.  This saves work because <SCHEMEINLINE>analyze</SCHEMEINLINE> will be called only once on an expression, while the
  execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  may be called many times.
      </TEXT>

      <TEXT>
  With the separation into analysis and execution, <SCHEMEINLINE>eval</SCHEMEINLINE> now becomes

  <SNIPPET>
    <SCHEME>
      <!-- \indcodeplus*{eval}{(metacircular)}[analyzing version]-->
      (define (eval exp env)
      ((analyze exp) env))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The result of calling <SCHEMEINLINE>analyze</SCHEMEINLINE> is the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to
  be applied to the environment.  The <SCHEMEINLINE>analyze</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is
  the same case analysis as performed by the original <SCHEMEINLINE>eval</SCHEMEINLINE> of
  Section<SPACE/><REF NAME="sec:core-of-evaluator"/>, except that the
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to
  which we dispatch perform only analysis, not full evaluation:

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{analyze}[metacircular] -->
      (define (analyze exp)
      (cond ((self-evaluating? exp) 
            (analyze-self-evaluating exp))
            ((quoted? exp) (analyze-quoted exp))
            ((variable? exp) (analyze-variable exp))
            ((assignment? exp) (analyze-assignment exp))
            ((definition? exp) (analyze-definition exp))
            ((if? exp) (analyze-if exp))
            ((lambda? exp) (analyze-lambda exp))
            ((begin? exp) (analyze-sequence (begin-actions exp)))
            ((cond? exp) (analyze (cond-&gt;if exp)))
            ((application? exp) (analyze-application exp))
            (else
            (error "Unknown expression type - - ANALYZE" exp))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Here is the simplest syntactic analysis
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which handles
  self-evaluating expressions.  It returns an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that
  ignores its environment argument and just returns the expression:

  <!--  \indcode{analyze-...}[metacircular|(] -->
  <SNIPPET>
    <SCHEME>
      (define (analyze-self-evaluating exp)
      (lambda (env) exp))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  For a quoted expression, we can gain a little efficiency by
  extracting the text of the quotation only once, in the analysis phase,
  rather than in the execution phase.

  <SNIPPET>
    <SCHEME>
      (define (analyze-quoted exp)
      (let ((qval (text-of-quotation exp)))
      (lambda (env) qval)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Looking up a variable value must still be done in the execution phase,
  since this depends upon knowing the environment.<FOOTNOTE>There is,
    however, an important part of the variable search that <EM>can</EM> be
    done as part of the syntactic analysis.  As we will show in
    Section<SPACE/><REF NAME="sec:lexical-addressing"/>, one can determine the position
    in the environment structure where the value of the variable will be
    found, thus obviating the need to scan the environment for the entry
    that matches the variable.</FOOTNOTE>

  <SNIPPET>
    <SCHEME>
      (define (analyze-variable exp)
      (lambda (env) (lookup-variable-value exp env)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <SCHEMEINLINE>Analyze-assignment</SCHEMEINLINE> also must defer actually setting the variable
  until the execution, when the environment has been supplied.  However,
  the fact that the <SCHEMEINLINE>assignment-value</SCHEMEINLINE> expression can be
  analyzed (recursively) during analysis is a major gain in efficiency,
  because the <SCHEMEINLINE>assignment-value</SCHEMEINLINE> expression will now be analyzed
  only once.  The same holds true for definitions.

  <SNIPPET>
    <SCHEME>
      (define (analyze-assignment exp)
      (let ((var (assignment-variable exp))
            (vproc (analyze (assignment-value exp))))
      (lambda (env)
      (set-variable-value! var (vproc env) env)
      'ok)))

      (define (analyze-definition exp)
      (let ((var (definition-variable exp))
            (vproc (analyze (definition-value exp))))
      (lambda (env)
      (define-variable! var (vproc env) env)
      'ok)))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  For <SCHEMEINLINE>if</SCHEMEINLINE> expressions, we extract and analyze the predicate,
  consequent, and alternative at analysis time.

  <SNIPPET>
    <SCHEME>
      (define (analyze-if exp)
      (let ((pproc (analyze (if-predicate exp)))
            (cproc (analyze (if-consequent exp)))
            (aproc (analyze (if-alternative exp))))
      (lambda (env)
      (if (true? (pproc env))
            (cproc env)
            (aproc env)))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Analyzing a <SCHEMEINLINE>lambda</SCHEMEINLINE> expression also achieves a major
  gain in efficiency: We analyze the <SCHEMEINLINE>lambda</SCHEMEINLINE> body only once, even though
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  resulting from evaluation of the <SCHEMEINLINE>lambda</SCHEMEINLINE>
  may be applied many times.

  <SNIPPET>
    <SCHEME>
      (define (analyze-lambda exp)
      (let ((vars (lambda-parameters exp))
            (bproc (analyze-sequence (lambda-body exp))))
      (lambda (env) (make-procedure vars bproc env))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Analysis of a sequence of expressions (as in a <SCHEMEINLINE>begin</SCHEMEINLINE> or the body
  of a <SCHEMEINLINE>lambda</SCHEMEINLINE> expression) is more 
  involved.<FOOTNOTE>See Exercise<SPACE/><REF NAME="ex:analyze-sequence"/> for some insight
    into the processing of sequences.</FOOTNOTE>
  Each expression
  in the sequence is analyzed, yielding an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  These execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  are combined to produce an
  execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that takes an environment as argument and sequentially calls
  each individual execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  with the environment as argument.

  <SNIPPET>
    <SCHEME>
      (define (analyze-sequence exps)
      (define (sequentially proc1 proc2)
      (lambda (env) (proc1 env) (proc2 env)))
      (define (loop first-proc rest-procs)
      (if (null? rest-procs)
            first-proc
            (loop (sequentially first-proc (car rest-procs))
            (cdr rest-procs))))
      (let ((procs (map analyze exps)))
      (if (null? procs)
            (error "Empty sequence - - ANALYZE"))
      (loop (car procs) (cdr procs))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  To analyze an application, we analyze the operator and operands and
  construct an execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that
  calls the operator execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  (to obtain the
  actual
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to be applied) and the operand execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  (to obtain the actual arguments).  We then pass these to <SCHEMEINLINE>execute-application</SCHEMEINLINE>, which is the analog of <SCHEMEINLINE>apply</SCHEMEINLINE> in
  Section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
  <SCHEMEINLINE>Execute-application</SCHEMEINLINE> differs from <SCHEMEINLINE>apply</SCHEMEINLINE> in that the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  body for a compound
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  has already
  been analyzed, so there is no need to do further analysis.  Instead,
  we just call the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  for the body on the extended
  environment.
  <SNIPPET>
    <SCHEME>
      (define (analyze-application exp)
      (let ((fproc (analyze (operator exp)))
            (aprocs (map analyze (operands exp))))
      (lambda (env)
      (execute-application (fproc env)
            (map (lambda (aproc) (aproc env))
            aprocs)))))
      <!--  \indcode{analyze-...}[metacircular|)] -->


      <!--  \indcode*{execute-application}[metacircular] -->
      (define (execute-application proc args)
      (cond ((primitive-procedure? proc)
            (apply-primitive-procedure proc args))
            ((compound-procedure? proc)
            ((procedure-body proc)
            (extend-environment (procedure-parameters proc)
            args
            (procedure-environment proc))))
            (else
            (error
            "Unknown procedure type - - EXECUTE-APPLICATION"
            proc))))
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Our new evaluator uses the same data structures, syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, and run-time support
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  as in
  sections<SPACE/><REF NAME="sec:representing-expressions"/>,
  <SPACE/><REF NAME="sec:eval-data-structures"/>, and<SPACE/><REF NAME="sec:running-eval"/>.
      </TEXT>

      <EXERCISE>
  <INDEX>analyzing evaluator<SUBINDEX>let@<SCHEMEINLINE>let</SCHEMEINLINE></SUBINDEX></INDEX>
  Extend the evaluator in this section to support the special form <SCHEMEINLINE>let</SCHEMEINLINE>.
  (See Exercise<SPACE/><REF NAME="ex:implement-let"/>.)
  <LABEL NAME="ex:implement-analyze-let"/>
      </EXERCISE>

      <EXERCISE>
  <!--  \indcode{analyze-...}[metacircular] -->
  Alyssa P. Hacker doesn<APOS/>t understand why <SCHEMEINLINE>analyze-sequence</SCHEMEINLINE> needs to be
  so complicated.  All the other analysis
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  are straightforward transformations of the corresponding evaluation
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  (or <SCHEMEINLINE>eval</SCHEMEINLINE> clauses) in Section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
  She expected <SCHEMEINLINE>analyze-sequence</SCHEMEINLINE> to look like this:

  <!-- 
      %***But note one drawback - - eval-sequence used first-exp/etc.
      %(the not-really-a-data-abstraction selectors), whereas this
      %has to use car/etc., so the match isn't perfectly clear.
    -->

  <SNIPPET>
    <SCHEME>
      (define (analyze-sequence exps)
      (define (execute-sequence procs env)
      (cond ((null? (cdr procs)) ((car procs) env))
            (else ((car procs) env)
            (execute-sequence (cdr procs) env))))
      (let ((procs (map analyze exps)))
      (if (null? procs)
            (error "Empty sequence - - ANALYZE"))
      (lambda (env) (execute-sequence procs env))))
    </SCHEME>
  </SNIPPET>

  Eva Lu Ator explains to Alyssa that the version in the text does more
  of the work of evaluating a sequence at analysis time.  Alyssa<APOS/>s
  sequence-execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, rather than having the calls to the
  individual execution
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  built in, loops through the
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  in order to call them: In effect, although the individual expressions
  in the sequence have been analyzed, the sequence itself has not been.

  Compare the two versions of <SCHEMEINLINE>analyze-sequence</SCHEMEINLINE>.  For example,
  consider the common case (typical of
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  bodies) where the
  sequence has just one expression.  What work will the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  produced by Alyssa<APOS/>s program do?  What about the execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  produced by the program in the text above?  How do the two
  versions compare for a sequence with two expressions?
  <LABEL NAME="ex:analyze-sequence"/>
      </EXERCISE>

      <EXERCISE>
  Design and carry out some experiments to 
  compare the speed of the original metacircular evaluator
  with the version in this section.  Use your results to estimate the fraction
  of time that is spent in analysis versus execution for various
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
      </EXERCISE>
      <INDEX>syntactic analysis, separated from execution<SUBINDEX>in metacircular evaluator|)</SUBINDEX></INDEX>
      <INDEX>analyzing evaluator|)</INDEX>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>analyzing version|)</SUBINDEX></INDEX>

    </SUBSECTION>