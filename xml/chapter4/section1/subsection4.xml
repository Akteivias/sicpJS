    <SUBSECTION>
      <NAME>
  Running the Evaluator as a Program
      </NAME>

      <LABEL NAME="sec:running-eval"/>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>running|(</SUBINDEX></INDEX>
      <TEXT>
  Given the evaluator, we have in our hands a description
  (expressed in <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>) of the process
  by which <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> expressions are evaluated.  One advantage of expressing the
  evaluator as a program is that we can run the program.  This gives us,
  running within <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>, a working model of how <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> itself evaluates
  expressions.  This can serve as a framework for experimenting with
  evaluation rules, as we shall do later in this chapter.
      </TEXT>

      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>primitive
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>|(</SUBINDEX></INDEX>
  Our evaluator program reduces expressions ultimately to the
  application of primitive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.  Therefore, all that we need to
  run the evaluator is to create a mechanism that calls on the underlying
  <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system to model the application of primitive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <TEXT>
  There must be a binding for each primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  name, so that when
<SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
evaluates the operator of an application of a primitive, it
  will find an object to pass to <SCHEMEINLINE>apply</SCHEMEINLINE>.  We thus set up a 
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>global environment</SUBINDEX></INDEX>
  <INDEX>global environment<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
  global
  environment that associates unique objects with the names of the
  primitive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  that can appear
  in the expressions we will be evaluating.  
  <SPLIT>
    <SCHEME>
      The global environment also includes bindings for the symbols 
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>true and false@<SCHEMEINLINE>true</SCHEMEINLINE> and <SCHEMEINLINE>false</SCHEMEINLINE></SUBINDEX></INDEX>
  <SCHEMEINLINE>true</SCHEMEINLINE> and
  <SCHEMEINLINE>false</SCHEMEINLINE>, so that they can be used as variables in expressions
  to be evaluated.
    </SCHEME>
    <JAVASCRIPT>
      The global environment also includes bindings for the symbol
  <INDEX>metacircular evaluator for JavaScript<SUBINDEX>undefined@<SCHEMEINLINE>undefined</SCHEMEINLINE></SUBINDEX></INDEX>
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>, so that this value can be used as a variable 
  in expressions to be evaluated.
    </JAVASCRIPT>
  </SPLIT>
  <SNIPPET PAGE="381">
    <NAME>setup_environment</NAME>
    <REQUIRES>primitive_procedures</REQUIRES>
    <REQUIRES>define_variable</REQUIRES>
    <REQUIRES>enclosing_environment</REQUIRES>
    <SCHEME>
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! \&apos;true true initial-env)
    (define-variable! \&apos;false false initial-env)
    initial-env))
    </SCHEME>
    <JAVASCRIPT>
function setup_environment() {
   var initial_env = enclose_by(an_empty_frame,the_empty_environment);
   for (var prop in primitive_functions) {
      define_variable(prop,
                      { tag: "primitive",
                        implementation: primitive_functions[prop] },
                      initial_env);
   }
   define_variable("undefined",undefined,initial_env);
   return initial_env;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
  It does not matter how we represent the primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  objects,
  so long as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and apply them by using the
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>primitive-procedure?</SCHEMEINLINE> and <SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>.  We have chosen to represent a primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  as a list beginning with the symbol <SCHEMEINLINE>primitive</SCHEMEINLINE> and
  containing a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> that implements that primitive.
  <SNIPPET PAGE="382">
    <NAME>primitive_procedure</NAME>
    <SCHEME>
(define (primitive-procedure? proc)
  (tagged-list? proc \&apos;primitive))

(define (primitive-implementation proc) (cadr proc))
    </SCHEME>
  </SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
  It does not matter how we represent the primitive function
  objects,
  so long as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and apply them by using the
  functions
  <JAVASCRIPTINLINE>is_primitive-function</JAVASCRIPTINLINE> and 
  <JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE>.  We have chosen to represent a primitive
  function
  as an object tagged with <JAVASCRIPTINLINE>"primitive"</JAVASCRIPTINLINE>
  containing a
  function
  in the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> that 
  implements that primitive.
    <SNIPPET PAGE="382">
    <NAME>primitive_procedure</NAME>
    <REQUIRES>tagged_list</REQUIRES>
    <JAVASCRIPT>
function is_primitive_function(fun) {
   return is_tagged_object(fun,"primitive");
}
function primitive_implementation(fun) {
   return fun.implementation;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

      <TEXT>
  <SPLITINLINE><SCHEME><SCHEMEINLINE>Setup-environment</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>setup_environment</JAVASCRIPTINLINE>
    </JAVASCRIPT>
  </SPLITINLINE>
  will get the primitive names and implementation
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  from a list:<FOOTNOTE>Any
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    defined in the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> can be used as
    a primitive for the metacircular evaluator.  The name of a
    primitive installed in the evaluator need not be the same as the name
    of its implementation in the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>; the names are the same
    here because the metacircular evaluator implements Scheme itself.
    Thus, for example, we could put 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(list 'first car)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>first: head,</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
    or 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(list 'square (lambda (x) (* x x)))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square: function(x) { return x * x; },</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    in the list of 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>primitive-procedures</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>primitive_functions</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.</FOOTNOTE>

  <SNIPPET PAGE="382">
    <NAME>primitive_procedures</NAME>
    <SCHEME>
(define primitive-procedures
  (list (list \&apos;car car)
        (list \&apos;cdr cdr)
        (list \&apos;cons cons)
        (list \&apos;null? null?)
        (list \&apos;display display)
        (list \&apos;read read)
        (list \&apos;+ +)
        (list \&apos;- -)
        (list \&apos;* *)
;;      more primitives
        ))

(define (primitive-procedure-names)
  (map car
       primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) (list \&apos;primitive (cadr proc)))
       primitive-procedures))
    </SCHEME>
    <JAVASCRIPT>
var primitive_functions = {
       pair: pair,
       head: head,
       tail: tail,
       list: list,
       is_empty_list: is_empty_list,
       length: length,
       display: display,
       print: print,
       newline: newline,
       runtime: runtime,
       error: error,
       "+": function(x,y) { return x + y; },
       "-": function(x,y) { return x - y; },
       "*": function(x,y) { return x * y; },
       "/": function(x,y) { return x / y; },
       "%": function(x,y) { return x % y; },
       "===": function(x,y) { return x === y; },
       "!==": function(x,y) { return x !== y; },
       "&lt;": function(x,y) { return x &lt; y; },
       "&lt;=": function(x,y) { return x &lt;= y; },
       "!": function(x) { return ! x; },
       "&amp;&amp;": function(x,y) { return x &amp;&amp; y; },
       "||": function(x,y) { return x || y; }
    };
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  To apply a primitive
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, we simply apply the implementation
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to the arguments, using the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system:<SPLIT>
  <SCHEME>
   <FOOTNOTE><SCHEMEINLINE>Apply-in-underlying-scheme</SCHEMEINLINE> is the <SCHEMEINLINE>apply</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    we have used in earlier chapters.  The metacircular evaluator<APOS/>s <SCHEMEINLINE>apply</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    (Section<SPACE/><REF NAME="sec:core-of-evaluator"/>) models the
    working of this primitive.  Having two different things called <SCHEMEINLINE>apply</SCHEMEINLINE> leads to a technical problem in running the metacircular
    evaluator, because defining the metacircular evaluator<APOS/>s <SCHEMEINLINE>apply</SCHEMEINLINE>
    will mask the definition of the primitive.  One way around this is to
    rename the metacircular <SCHEMEINLINE>apply</SCHEMEINLINE> to avoid conflict with the name of
    the primitive
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  We have assumed instead that we have saved a
    reference to the underlying <SCHEMEINLINE>apply</SCHEMEINLINE> by doing
    <SNIPPET>
    <NAME>apply_in_underlying</NAME>
      <SCHEME>
(define apply-in-underlying-scheme apply)
      </SCHEME>
    </SNIPPET>
    before defining the metacircular <SCHEMEINLINE>apply</SCHEMEINLINE>.  This allows us to
    access the original version of <SCHEMEINLINE>apply</SCHEMEINLINE> under a different name.
      </FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
        <FOOTNOTE>
        JavaScript<APOS/>s <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE> 
        method expects arguments in an array. Thus, the 
        <JAVASCRIPTINLINE>argument_list</JAVASCRIPTINLINE> is transformed into 
        an array using a <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE> loop:
  <SNIPPET PAGE="382">
    <NAME>apply_in_underlying</NAME>
    <JAVASCRIPT>
function apply_in_underlying_javascript(prim,argument_list) {
   var argument_array = new Array();
   var i = 0;
   while (!is_empty_list(argument_list)) {
      argument_array[i++] = head(argument_list);
      argument_list = tail(argument_list);
   }
   return prim.apply(prim,argument_array);
}
    </JAVASCRIPT>
  </SNIPPET>

      </FOOTNOTE>
      </JAVASCRIPT>
    </SPLIT>

  <SNIPPET PAGE="382">
    <NAME>apply_primitive_procedure</NAME>
    <REQUIRES>apply_in_underlying</REQUIRES>
    <REQUIRES>primitive_procedure</REQUIRES>
    <EXAMPLE>apply_primitive_procedure_example</EXAMPLE>
    <SCHEME>
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))
    </SCHEME>
    <JAVASCRIPT>
function apply_primitive_function(fun,argument_list) {
    return apply_in_underlying_javascript(primitive_implementation(fun),
                                          argument_list);     
}
    </JAVASCRIPT>
  </SNIPPET>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>primitive
      <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>|)</SUBINDEX></INDEX>
      </TEXT>

      <SPLIT>
  <SCHEME>
      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>driver loop</SUBINDEX></INDEX>
  <INDEX>driver loop<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
  For convenience in running the metacircular evaluator, we provide a <EM>
    driver loop</EM> that models the read-eval-print loop of the underlying
  <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system.  It prints a 
  <INDEX>prompts</INDEX>
  <EM>prompt</EM>, reads an input expression,
  evaluates this expression in the global environment, and prints the
  result.  We precede each printed result by an <EM>output prompt</EM> so
  as to distinguish the value of the expression from other
  output that may be printed.<FOOTNOTE>The primitive
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

    <!-- \indprim*{read}-->
    <!-- \ind*{primitive
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[read@<SCHEMEINLINE>read</SCHEMEINLINE>]
        -->
    <SCHEMEINLINE>read</SCHEMEINLINE> waits for input from the user,
    and returns the next complete expression that is typed.
    For example, if the user types <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ 23 x)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SCHEMEINLINE>read</SCHEMEINLINE> returns
    a three-element list containing the symbol <SCHEMEINLINE>+</SCHEMEINLINE>, the number 23,
    and the symbol <SCHEMEINLINE>x</SCHEMEINLINE>.
    <!-- \indcodeplus{'}{(single quote)}[read@<SCHEMEINLINE>read</SCHEMEINLINE> and]-->
    <!-- \indsf{quote}[read@<SCHEMEINLINE>read</SCHEMEINLINE> and]-->
    If the user types <SCHEMEINLINE>'x</SCHEMEINLINE>, <SCHEMEINLINE>read</SCHEMEINLINE> returns a two-element list
    containing the symbol <SCHEMEINLINE>quote</SCHEMEINLINE> and the symbol <SCHEMEINLINE>x</SCHEMEINLINE>.</FOOTNOTE>

  <SNIPPET PAGE="383">
    <NAME>driver_loop</NAME>
    <REQUIRES>eval</REQUIRES>
    <REQUIRES>user_print</REQUIRES>
    <EXAMPLE>driver_loop_example</EXAMPLE>
    <SCHEME>
(define input-prompt ";;; M-Eval input:\n")
(define output-prompt ";;; M-Eval value:\n")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (if (null? input)
      \&apos;EVALUATOR-TERMINATED
      (let ((output (eval input the-global-environment)))
        (announce-output output-prompt)
        (user-print output)
        (driver-loop)))))

(define (prompt-for-input string)
  (newline) (display string))

(define (announce-output string)
  (newline) (display string))

\&apos;METACIRCULAR-EVALUATOR-LOADED
    </SCHEME>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
    <JAVASCRIPT_STATEMENT>true; 1;</JAVASCRIPT_STATEMENT>
  </SNIPPET>
      </TEXT>
  </SCHEME>
  <JAVASCRIPT>
      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>driver loop</SUBINDEX></INDEX>
  <INDEX>driver loop<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
  For convenience in running the metacircular evaluator, we provide a <EM>
    driver loop</EM>. It prints a 
  <INDEX>prompts</INDEX>
  <EM>prompt</EM>, reads an input expression,
  evaluates this expression in the global environment, and prints the
  result.  We precede each printed result by an <EM>output prompt</EM> so
  as to distinguish the value of the expression from other
  output that may be printed.

  <SNIPPET PAGE="383">
    <NAME>evaluate_toplevel</NAME>
    <REQUIRES>return_value</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <JAVASCRIPT>
function evaluate_toplevel(stmt,env) {
   var value = evaluate(stmt,env);
   if (is_return_value(value)) {
      error("return not allowed outside of function definition");
   }
   else {
      return value;
   }
}
var input_prompt = "/// M-Eval input:";
function prompt_and_parse() {
   var program_string = prompt(input_prompt);
   if (program_string === null) {
       return {tag: "exit"};
   } else {
       return parser.parse(program_string);
   }
}
    </JAVASCRIPT>
  </SNIPPET>

  <SNIPPET PAGE="383">
    <NAME>driver_loop</NAME>
    <REQUIRES>tagged_list</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <REQUIRES>user_print</REQUIRES>
    <REQUIRES>evaluate_toplevel</REQUIRES>
    <EXAMPLE>driver_loop_example</EXAMPLE>
    <JAVASCRIPT>
function driver_loop() {
   var input_program = prompt_and_parse();
   if (is_tagged_object(input_program, "exit")) {
      return "interpreter completed";
   }
   var output = evaluate_toplevel(input_program, the_global_environment);
   user_print(output);
   return driver_loop();
}
"METACIRCULAR EVALUATOR LOADED";
    </JAVASCRIPT>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
  </SNIPPET>
  The function <JAVASCRIPTINLINE>prompt_and_parse</JAVASCRIPTINLINE> reads a statement as
  a string
  from a popup window and transforms it into a tagged-object representation
  of the statement, according to the description in section
  <REF NAME="sec:representing-expressions"/>. This process is called 
  <EM>parsing</EM>.
      </TEXT>
  </JAVASCRIPT>
      </SPLIT>

      <TEXT>
  We use a special printing
  <SPLITINLINE><SCHEME>procedure <SCHEMEINLINE>user-print</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT>function <JAVASCRIPTINLINE>user_print</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, 
  to avoid printing the environment part of a compound
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which may be a very long list
  (or may even contain cycles).

  <SNIPPET PAGE="383">
    <NAME>user_print</NAME>
    <REQUIRES>make_procedure</REQUIRES>
    <SCHEME>
(define (user-print object)
  (if (compound-procedure? object)
      (display (list \&apos;compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     \&apos;&lt;procedure-env&gt;))
      (display object)))
    </SCHEME>
          <TEXT>Both driver loops provide for proper exit. In JavaScript, return statements outside of function bodies are captured by the evaluate_toplevel variant.</TEXT>
    <JAVASCRIPT>
function user_print(object) {
   if (is_compound_function_value(object)){
      alert("Result: function with "+
            "parameters: " + format(object.parameters) +
            " body: " + format(object.body));
   }
   else {
      alert("Result: "+object);
   }
}
    </JAVASCRIPT>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Now all we need to do to run the evaluator is to initialize the
  global environment and start the driver loop.  Here is a sample
  interaction:

  <SNIPPET PAGE="383-384">
    <NAME>driver_loop_example</NAME>
    <REQUIRES>driver_loop</REQUIRES>
    <REQUIRES>setup_environment</REQUIRES>
    <SCHEME>
(define the-global-environment (setup-environment))
(driver-loop)
    </SCHEME>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
    <JAVASCRIPT>
var the_global_environment = setup_environment();
driver_loop();
    </JAVASCRIPT>
  </SNIPPET>

  <SNIPPET EVAL="yes" HIDE="yes">
    <SCHEME>
;;; M-Eval input:
(define (append x y)
   (if (null? x)
       y
       (cons (car x)
         (append (cdr x) y))))
;;; M-Eval value:
ok

;;; M-Eval input:
(append '(a b c) '(d e f))
;;; M-Eval value:
(a b c d e f)
    </SCHEME>
    <JAVASCRIPT>
// M-Eval input:
function append(xs,y) { 
   if (is_empty_list(xs)) {
      return y; 
   }
   else {
      return pair(head(xs),append(tail(xs),y)); 
   }
} 
// M-Eval value: ok

// M-Eval input:
append(pair(1,[]),pair(2,[]));
         (append (cdr x) y))));
// M-Eval value:
// [1,[2,[]]]
    </JAVASCRIPT>
  </SNIPPET>

  Play with the following examples:

  <SNIPPET PAGE="384" HIDE="yes">
    <NAME>driver_loop_example_1</NAME>
    <REQUIRES>driver_loop</REQUIRES>
    <EXAMPLE>driver_loop_example</EXAMPLE>
    <SCHEME>
;; true preloaded
    </SCHEME>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
    <JAVASCRIPT>
true; 1; 
    </JAVASCRIPT>
  </SNIPPET>

  <SNIPPET PAGE="384" HIDE="yes">
    <NAME>driver_loop_example_2</NAME>
    <REQUIRES>driver_loop</REQUIRES>
    <EXAMPLE>driver_loop_example</EXAMPLE>
    <SCHEME>
;; (+ 1 2) preloaded
    </SCHEME>
    <SCHEME_STATEMENT>(+ 1 2)</SCHEME_STATEMENT>
    <JAVASCRIPT>
1 + 2; 
    </JAVASCRIPT>
  </SNIPPET>

  <SNIPPET PAGE="384">
    <NAME>driver_loop_example4</NAME>
    <EXAMPLE>driver_loop_example</EXAMPLE>
    <SCHEME>
;; preloaded:
;; (begin 
;;   (define (append xs y) 
;;       (if (null? xs) 
;;           y 
;;           (cons (car xs) (append (cdr xs) y)))) 
;;   (append (cons 1 \&apos;()) (cons 2 \&apos;())))
    </SCHEME>
    <SCHEME_STATEMENT>(begin (define (append xs y) (if (null? xs) y (cons (car xs) (append (cdr xs) y)))) (append (cons 1 \&apos;()) (cons 2 \&apos;())))</SCHEME_STATEMENT>
    <JAVASCRIPT>

function append(xs,ys) { 
    if (is_empty_list(xs)) {
       return ys; 
    } else {
       return pair(head(xs),append(tail(xs),ys)); 
    }
} 
append(pair(1,[]),pair(2,[]));

    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SPLIT>
  <JAVASCRIPT>
      <EXERCISE>
  The global environment includes a binding for the symbol <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>.
  This way of threating <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> is consistent with JavaScript's
  definition; it is a variable and not a keyword in the language as are <JAVASCRIPTINLINE>true</JAVASCRIPTINLINE>
  and <JAVASCRIPTINLINE>false</JAVASCRIPTINLINE>. A disadvantage of this treatment of 
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> is that it can be redefined as in
  <SNIPPET PAGE="381">
    <NAME>var_undefined</NAME>
    <JAVASCRIPT>
undefined = "defined";
    </JAVASCRIPT>
  </SNIPPET>
  Some internet browsers such as Firefox silently prevent the redefinition of 
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> such that the line above has no
  effect. Modify the interpreter such that 
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> can be neither assigned nor
  re-defined using variable statements. In this implementation, the variable
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> must always refer to JavaScript's
  value <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>.
  <P/>
  The Firefox browser (Version 14) allows the re-definition of the variable
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> in function definitions, such that
  <SNIPPET PAGE="381">
    <NAME>var_undefined</NAME>
    <JAVASCRIPT>
function f(undefined) {
    return undefined + 1;
}
f(2);
    </JAVASCRIPT>
  </SNIPPET>
  produces the result 3. Modify your interpreter such that variable statements
  and assignments cannot change 
  <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>, but function definitions can.
      </EXERCISE>
  </JAVASCRIPT>
      </SPLIT>


      <EXERCISE>
  Eva Lu Ator and Louis Reasoner are each experimenting with the
  metacircular evaluator.  Eva types in the definition of <SCHEMEINLINE>map</SCHEMEINLINE>, and
  runs some test programs that use it.  They work fine.  Louis, in contrast,
  has installed the system version of <SCHEMEINLINE>map</SCHEMEINLINE> as a primitive for the
  metacircular evaluator.  When he tries it, things go terribly
  wrong.  Explain why Louis<APOS/>s <SCHEMEINLINE>map</SCHEMEINLINE> fails even though Eva<APOS/>s works.
  <LABEL NAME="ex:mceval-map"/>
      </EXERCISE>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>running|)</SUBINDEX></INDEX>

    </SUBSECTION>