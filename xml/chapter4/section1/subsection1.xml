    <SUBSECTION>
      <NAME>
  The Core of the Evaluator
      </NAME>

      <TEXT>
  <LABEL NAME="sec:core-of-evaluator"/>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and 
      <SCHEMEINLINE>apply</SCHEMEINLINE>|(</SUBINDEX></INDEX>

  <FIGURE>
    <FIGURE src="img_original/ch4-Z-G-1.gif"></FIGURE>
    <LABEL NAME="fig:eval-apply"/>
    <CAPTION>The <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE><ENDASH/><SCHEMEINLINE>apply</SCHEMEINLINE> 
      cycle exposes the essence of a computer language.
    </CAPTION>
  </FIGURE>

  The evaluation process can be described as the interplay between two
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>: 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SCHEMEINLINE>apply</SCHEMEINLINE>.
      </TEXT>

      <SUBHEADING>
  <NAME><SPLITINLINE>
      <SCHEME>Eval</SCHEME>
      <JAVASCRIPT>The function 
        <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  </NAME>
      </SUBHEADING>

      <TEXT>
  <!-- \indcodeplus{eval}{(metacircular)}-->
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  takes as arguments 
  <SPLITINLINE><SCHEME>an expression</SCHEME><JAVASCRIPT>a statement</JAVASCRIPT></SPLITINLINE> 
  and an environment.  It  classifies the 
  <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>statement</JAVASCRIPT></SPLITINLINE> 
  and directs its evaluation.  
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  is structured as a case analysis of the syntactic type of the expression
  to be evaluated.  In order to keep the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  general, we express
  the determination of the type of 
  <SPLITINLINE><SCHEME>an expression</SCHEME><JAVASCRIPT>a statement</JAVASCRIPT></SPLITINLINE>
  abstractly, making no
  commitment to any particular 
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>expression representation</SUBINDEX></INDEX>
  representation for the various types of
  <SPLITINLINE><SCHEME>expressions</SCHEME><JAVASCRIPT>statements</JAVASCRIPT></SPLITINLINE>.  
  Each type of 
  <SPLITINLINE><SCHEME>expression</SCHEME><JAVASCRIPT>statement</JAVASCRIPT></SPLITINLINE>
  has a predicate that tests for
  it and an abstract means for selecting its parts.  This 
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>data abstraction in</SUBINDEX></INDEX>
  <INDEX>abstract syntax<SUBINDEX>in metacircular evaluator</SUBINDEX></INDEX>
  <EM>abstract
    syntax</EM> makes it easy to see how we can change the syntax of the
  language by using the same evaluator, but with a different collection of
  syntax
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <SUBSUBSUBSECTION>
  <NAME>Primitive expressions</NAME>

  <SPLIT>
    <SCHEME>
      <TEXT>
        <UL>
    <LI>
      <INDEX>expression<SUBINDEX>self-evaluating</SUBINDEX></INDEX>
      <INDEX>self-evaluating expression</INDEX>
      For self-evaluating expressions, such as numbers, 
      <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
      returns the expression itself.
    </LI>
    <LI>
      <SPLITINLINE><SCHEME><SCHEMEINLINE>Eval</SCHEMEINLINE></SCHEME><JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> must look up variables in the environment to find their values.
    </LI>
        </UL>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        <UL>
    <LI>
      <INDEX>expression<SUBINDEX>self-evaluating</SUBINDEX></INDEX>
      <INDEX>self-evaluating expression</INDEX>
      If the given statement is a self-evaluating expression,
      such as a number, 
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      returns the expression itself.
    </LI>
    <LI>
      The function <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      must look up variables in the environment to find their values.
    </LI>
        </UL>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
      </SUBSUBSUBSECTION>

      <SUBSUBSUBSECTION>
  <NAME>Special forms</NAME>

  <SPLIT>
    <SCHEME>
      <TEXT>
        <UL>
    <LI>
      For quoted expressions, 
      <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      returns the expression that was
      quoted.
    </LI>
    <LI>
      An assignment to (or a definition of) a variable must recursively call
      <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      to compute the new value to be associated with the
      variable.  The environment must be modified to change (or create) the
      binding of the variable.
    </LI>
    <LI>
      An <SCHEMEINLINE>if</SCHEMEINLINE> expression requires special processing of its parts, so as to
      evaluate the consequent if the predicate is true, and otherwise to
      evaluate the alternative.
    </LI>
    <LI>
      A <SCHEMEINLINE>lambda</SCHEMEINLINE> expression must be transformed into an
      applicable
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      by packaging together the parameters and body
      specified by the <SCHEMEINLINE>lambda</SCHEMEINLINE> expression with the environment of the
      evaluation.
    </LI>
    <LI>
      A <SCHEMEINLINE>begin</SCHEMEINLINE> expression requires evaluating its sequence of
      expressions in the order in which they appear.
    </LI>
    <LI>
      A case analysis (<SCHEMEINLINE>cond</SCHEMEINLINE>) is transformed into a nest of <SCHEMEINLINE>if</SCHEMEINLINE>
      expressions and then evaluated.
    </LI>
        </UL>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        <UL>
    <LI>
      An assignment to (or a definition of) a variable must recursively call
      <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
      to compute the new value to be associated with the
      variable.  The environment must be modified to change (or create) the
      binding of the variable.
    </LI>
    <LI>
      An <JAVASCRIPTINLINE>if</JAVASCRIPTINLINE> statement 
      requires special processing of its parts, so as to
      evaluate the consequent if the predicate is true, and otherwise to
      evaluate the alternative.
    </LI>
    <LI>
      A function definition must be transformed into an applicable
      function by packaging together the parameters and body
      specified by the <SCHEMEINLINE>lambda</SCHEMEINLINE> expression with 
      the environment of the evaluation.
    </LI>
    <LI>
      A sequence of statements requires evaluating its 
      component statements in the order in which they appear.
    </LI>
        </UL>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

      </SUBSUBSUBSECTION>

      <SUBSUBSUBSECTION>
  <NAME>Combinations</NAME>

  <SPLIT>
    <SCHEME>
      <TEXT>
        <UL>
    <LI>
      For a
      procedure application, 
      <SCHEMEINLINE>eval</SCHEMEINLINE>
      must recursively
      evaluate the operator part and the operands of the combination.  The
      resulting
      procedure
      and arguments are passed to <SCHEMEINLINE>apply</SCHEMEINLINE>, which
      handles the actual
      procedure
      application.
    </LI>
        </UL>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
        <UL>
    <LI>
      For a
      function
      application, 
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      must recursively
      evaluate the operator part and the operands of the combination.  The
      resulting
      <JAVASCRIPT>function</JAVASCRIPT>
      and arguments are passed to <SCHEMEINLINE>apply</SCHEMEINLINE>, which
      handles the actual function application.
    </LI>
    <LI>
      When <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      encounters a <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>
      statement, the <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE>
      expression is evaluated and marked as a return value.
    </LI>
        </UL>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
      </SUBSUBSUBSECTION>

      <TEXT>
  <!-- \indcodeplus*{eval}{(metacircular)}-->
  Here is the definition of
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>:

  <SNIPPET PAGE="365">
    <NAME>eval</NAME>
    <REQUIRES>is_self_evaluating</REQUIRES>
    <REQUIRES>variable</REQUIRES>
    <REQUIRES>lookup_variable_value</REQUIRES>
    <REQUIRES>assignment</REQUIRES>
    <REQUIRES>eval_assignment</REQUIRES>
    <REQUIRES>definition</REQUIRES>
    <REQUIRES>eval_definition</REQUIRES>
    <REQUIRES>if</REQUIRES>
    <REQUIRES>eval_if</REQUIRES>
    <REQUIRES>lambda</REQUIRES>
    <REQUIRES>make_procedure</REQUIRES>
    <REQUIRES>begin</REQUIRES>
    <REQUIRES>eval_sequence</REQUIRES>
    <REQUIRES>application</REQUIRES>
    <REQUIRES>apply</REQUIRES>
    <REQUIRES>return_statement</REQUIRES>
    <REQUIRES>return_value</REQUIRES>
    <SCHEME>
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp) 
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unknown expression type - - EVAL" exp))))
  </SCHEME>
        <TEXT>Very similar structure; eval renamed to evaluate, because eval should never be re-defined in JavaScript.</TEXT>
  <JAVASCRIPT>
function evaluate(stmt,env) {
   if (is_self_evaluating(stmt)) {
      return stmt;
   }
   else if (is_variable(stmt)) {
      return lookup_variable_value(variable_name(stmt),env);
   }
   else if (is_assignment(stmt)) { 
      return evaluate_assignment(stmt,env);
   }
   else if (is_var_definition(stmt)) {
      return evaluate_var_definition(stmt,env);
   }
   else if (is_if_statement(stmt)) {
      return evaluate_if_statement(stmt,env);
   }
   else if (is_function_definition(stmt)) {
      return evaluate_function_definition(stmt,env);
   }
   else if (is_sequence(stmt)) {
      return evaluate_sequence(stmt,env);
   }
   else if (is_application(stmt)) {
      return apply(evaluate(operator(stmt),env),
                   list_of_values(operands(stmt),env));
   }
   else if (is_return_statement(stmt)) {
      return make_return_value(
                evaluate(return_statement_expression(stmt),
                         env));
   }
   else {
     error("Unknown expression type - - evaluate: ",stmt);
   }
}
  </JAVASCRIPT>
  <SCHEME_STATEMENT>(begin (define x 1) (set! x 2) x)</SCHEME_STATEMENT>
  </SNIPPET>

  <SNIPPET PAGE="365" HIDE="yes">
          <NAME>eval_example</NAME>
          <REQUIRES>setup_environment</REQUIRES>
          <REQUIRES>evaluate_toplevel</REQUIRES>
    <SCHEME>
(define the-global-environment (setup-environment))
(eval (read) the-global-environment)
    </SCHEME>
          <JAVASCRIPT>
var the_global_environment = setup_environment();
var input_program = prompt_and_parse();
evaluate_toplevel(input_program, the_global_environment);
    </JAVASCRIPT>
  </SNIPPET>

      </TEXT>

      <TEXT>
  <INDEX>data-directed programming<SUBINDEX>case analysis vs.</SUBINDEX></INDEX>
  <INDEX>case analysis<SUBINDEX>data-directed programming vs.</SUBINDEX></INDEX>
  For clarity, 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> has been implemented as a case analysis using
  <SPLITINLINE><SCHEME><SCHEMEINLINE>cond</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>if</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  The disadvantage of this is that our
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  handles
  only a few distinguishable types of 
  <SPLITINLINE><SCHEME>expressions</SCHEME><JAVASCRIPT>statements</JAVASCRIPT></SPLITINLINE>,
  and no new ones can be defined without editing the definition of 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  
  In most <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>interpreter</JAVASCRIPT></SPLITINLINE>
  implementations, dispatching on the type of an expression is done in a
  data-directed style.  This allows a user to add new types of
  expressions that 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  can distinguish, without modifying the definition of 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> itself.
  (See Exercise<SPACE/><REF NAME="ex:data-directed-eval"/>.)
      </TEXT>

      <SUBHEADING>
  <NAME>Apply</NAME>
      </SUBHEADING>

      <TEXT>
  <SPLITINLINE><SCHEME><SCHEMEINLINE>Apply</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>The function <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  takes two arguments, a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  and a list of arguments  to which the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  should be applied.  
  <SPLITINLINE><SCHEME><SCHEMEINLINE>Apply</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT>The function <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  classifies
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  into two kinds: It calls 
  <!--  \indcode{apply-primitive-procedure} -->
  <SPLITINLINE><SCHEME><SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  to apply primitives; it applies compound
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  by sequentially evaluating the expressions that
  make up the body of the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  
  The environment for the
  evaluation of the body of a compound
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is constructed by extending the base environment carried by
  the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to include a frame that binds the parameters of the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  to the arguments to which the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is to be applied.
  Here is the definition of <SCHEMEINLINE>apply</SCHEMEINLINE>:

  <SNIPPET PAGE="366">
    <NAME>apply</NAME>
    <REQUIRES>primitive_procedure</REQUIRES>
    <REQUIRES>apply_primitive_procedure</REQUIRES>
    <REQUIRES>extend_environment</REQUIRES>
    <REQUIRES>make_procedure</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <REQUIRES>return_value</REQUIRES>
    <SCHEME>
(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             arguments
             (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type - - APPLY" procedure))))
    </SCHEME>
    <JAVASCRIPT>
function apply(fun,arguments) {
   if (is_primitive_function(fun)) {
      return apply_primitive_function(fun,arguments);
   }
   else if (is_compound_function_value(fun)) {
      var result =
         evaluate(function_value_body(fun),
                  extend_environment(function_value_parameters(fun),
                                     arguments,
                                     function_value_environment(fun)));
      if (is_return_value(result)) {
         return return_value_content(result);
      }
      else {  
        return undefined;
      }
   } 
   else {
      error("Unknown function type - - APPLY: ",fun);
   }
}
    </JAVASCRIPT>
  </SNIPPET>
  <SPLITINLINE>
    <SCHEME></SCHEME>
    <JAVASCRIPT>
    In order to return a value, JavaScript functions need to evaluate a return 
    statement. If a function terminates without return, the value 
    <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>
    is returned. Thus, if the evaluation of the function body yields a return
    value, the corresponding return expression is returned, and otherwise the
    value <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> is returned.
    </JAVASCRIPT>
  </SPLITINLINE>
      </TEXT>

      <SUBHEADING>
  <NAME><SPLITINLINE><SCHEME>Procedure</SCHEME><JAVASCRIPT>Function</JAVASCRIPT></SPLITINLINE>
    arguments</NAME>
      </SUBHEADING>

      <TEXT>
  When 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  processes a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  application, it uses 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>list-of-values</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  to produce the
  list of arguments to which the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  is to be applied. <SPLITINLINE><SCHEME><SCHEMEINLINE>List-of-values</SCHEMEINLINE></SCHEME><JAVASCRIPT>The function <JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> takes as an argument 
  the operands of the combination.
  It evaluates each operand and returns a list of the corresponding
  values:<FOOTNOTE>We could have simplified the 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>application?</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT><JAVASCRIPTINLINE>is_application</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    clause in 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    by using <SCHEMEINLINE>map</SCHEMEINLINE>
    (and stipulating that <SCHEMEINLINE>operands</SCHEMEINLINE> returns a list) rather than
    writing an explicit 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>list-of-values</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>list_of_values</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  We chose not to
    use <SCHEMEINLINE>map</SCHEMEINLINE> here to emphasize the fact that the 
    <INDEX>metacircular evaluator for Scheme<SUBINDEX>higher-order
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        in</SUBINDEX></INDEX>
    <INDEX>higher-order <SPLITINLINE><SCHEME>procedures</SCHEME>
        <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
      <SUBINDEX>in metacircular evaluator</SUBINDEX></INDEX>
    evaluator can be implemented without any use of higher-order
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    (and thus could be written in a language that doesn<APOS/>t have
    higher-order
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>), 
    even though the language that it supports will include higher-order
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
    <LABEL NAME="foot:mceval-higher-order"/></FOOTNOTE>

  <SNIPPET PAGE="367">
    <NAME>list_of_values</NAME>
    <REQUIRES>application</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <SCHEME>
(define (list-of-values exps env)
  (if (no-operands? exps)
      \&apos;()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
    </SCHEME>
    <JAVASCRIPT>
function list_of_values(exps,env) {
   if (no_operands(exps)) {
      return [];
   }
   else {
      return pair(evaluate(first_operand(exps),env),
                    list_of_values(rest_operands(exps),env));
   }
}
    </JAVASCRIPT>   
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Conditionals</NAME>
      </SUBHEADING>

      <TEXT>
  <SPLITINLINE><SCHEME><SCHEMEINLINE>Eval-if</SCHEMEINLINE></SCHEME><JAVASCRIPT>The function <JAVASCRIPTINLINE>evaluate_if_statement</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  evaluates the predicate part of an <SPLITINLINE><SCHEME><SCHEMEINLINE>if</SCHEMEINLINE> expression</SCHEME><JAVASCRIPT>conditional statement</JAVASCRIPT></SPLITINLINE> in the given environment.  If
  the result is true, 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval-if</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate_if_statement</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
  evaluates the consequent, otherwise it evaluates the alternative:

  <SNIPPET PAGE="367">
    <NAME>eval_if</NAME>
    <REQUIRES>true</REQUIRES>
    <REQUIRES>if</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <SCHEME>
(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
    </SCHEME>
    <JAVASCRIPT>
function evaluate_if_statement(stmt,env) {
   if (is_true(evaluate(if_predicate(stmt),env))){
      return evaluate(if_consequent(stmt),env);
   }
   else {
      return evaluate(if_alternative(stmt),env);
   }
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>implemented language vs.<SPACE/>implementation language</SUBINDEX></INDEX>
  The use of 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  in 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval-if</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate_if_statement</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  highlights the issue of the
  connection between an implemented language and an implementation
  language.  The 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>if-predicate</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>if_predicate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  is evaluated in the language being
  implemented and thus yields a value in that language.  The interpreter
  predicate 
  <SPLITINLINE><SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
  translates that value into a value that can be
  tested by the <SCHEMEINLINE>if</SCHEMEINLINE> in the implementation language: The
  metacircular representation of truth might not be the same as that of
  the underlying 
  <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>.<FOOTNOTE>In this case, the language being implemented and the
    implementation language are the same.  Contemplation of the meaning of
    <INDEX>consciousness, expansion of</INDEX>
    <SPLITINLINE><SCHEME><SCHEMEINLINE>true?</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>is_true</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    here yields expansion of consciousness without the abuse
    of substance.</FOOTNOTE>
      </TEXT>

      <SUBHEADING>
  <NAME>Sequences</NAME>
      </SUBHEADING>

      <SPLIT>
  <SCHEME>
    <TEXT>
      <SCHEMEINLINE>Eval-sequence</SCHEMEINLINE>
      is used by <SCHEMEINLINE>apply</SCHEMEINLINE> to evaluate 
      the sequence of
      expressions in a
      procedure body and by 
      <SCHEMEINLINE>eval</SCHEMEINLINE>
      to evaluate the sequence of expressions in a <SCHEMEINLINE>begin</SCHEMEINLINE>
      expression.  It takes as arguments a sequence of expressions and an
      environment, and evaluates the expressions in the order in which they
      occur.  The value returned is the value of the final expression.

      <SNIPPET PAGE="367">
        <NAME>eval_sequence</NAME>
        <SCHEME>
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
        </SCHEME>
      </SNIPPET>
    </TEXT>
  </SCHEME>
  <JAVASCRIPT>
    <TEXT>
      The function <JAVASCRIPTINLINE>evaluate_sequence</JAVASCRIPTINLINE>
      is used by  
      <JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>
      to evaluate a sequence of statements.
      Note that the evaluation of the first component
      of a sequence may yield a return value, in which
      case the rest of the statement is not evaluated.

      <SNIPPET PAGE="367">
        <NAME>eval_sequence</NAME>
        <REQUIRES>begin</REQUIRES>
        <REQUIRES>eval</REQUIRES>
        <REQUIRES>return_value</REQUIRES>
        <JAVASCRIPT>
function evaluate_sequence(stmts,env) {
   if (is_last_statement(stmts)) {
      return evaluate(first_statement(stmts),env);
   }
   else {
      var first_stmt_value = 
          evaluate(first_statement(stmts),env);
      if (is_return_value(first_stmt_value)) {
          return first_stmt_value;
      }
      else {
        resteturn evaluate_sequence(
                     rest_statements(stmts),env);
      }
   }
}
        </JAVASCRIPT>
      </SNIPPET>
    </TEXT>
  </JAVASCRIPT>
      </SPLIT>

      <SUBHEADING>
  <NAME>Assignments and definitions</NAME>
      </SUBHEADING>

      <TEXT>
  The following
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  handles assignments to variables.  It calls
  <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  to find the value to be assigned and transmits the variable
  and the resulting value to 
<SPLITINLINE><SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_variable_value</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  to be installed  in the designated environment.

  <SNIPPET PAGE="368">
    <NAME>eval_assignment</NAME>
    <REQUIRES>set_variable_value</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <REQUIRES>assignment</REQUIRES>
    <SCHEME>
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  \&apos;ok)
    </SCHEME>
    <JAVASCRIPT>
function evaluate_assignment(stmt,env) {
   var value = evaluate(assignment_value(stmt),env);
   set_variable_value(assignment_variable(stmt),
                      value,
                      env);
   return value;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Definitions of variables are handled in a similar
  manner.<FOOTNOTE>This implementation of <SCHEMEINLINE>define</SCHEMEINLINE> ignores a subtle
    issue in the handling of internal definitions, although it works
    correctly in most cases.  We will see what the problem is and how to
    solve it in Section<SPACE/><REF NAME="sec:internal-definitions"/>.</FOOTNOTE>

  <SNIPPET PAGE="368">
    <NAME>eval_definition</NAME>
    <REQUIRES>define_variable</REQUIRES>
    <REQUIRES>definition</REQUIRES>
    <REQUIRES>eval</REQUIRES>
    <SCHEME>
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env)
  \&apos;ok)
    </SCHEME>
    <JAVASCRIPT>
function evaluate_var_definition(stmt,env) {
   define_variable(var_definition_variable(stmt),
      evaluate(var_definition_value(stmt),env),
      env);
   return undefined;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SPLIT>
  <SCHEME>
    <TEXT>
      We have chosen here to return the symbol <SCHEMEINLINE>ok</SCHEMEINLINE> as 
      the value of an assignment or a definition.<FOOTNOTE>As we said when we
        introduced <SCHEMEINLINE>define</SCHEMEINLINE> and 
        <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE>, these values
        are implementation-dependent in Scheme<EMDASH/>that is, the implementor
        can choose what value to return.</FOOTNOTE>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and <SCHEMEINLINE>apply</SCHEMEINLINE>|)</SUBINDEX></INDEX>
    </TEXT>
  </SCHEME>
  <JAVASCRIP>
    <TEXT>
      Note that the returned value of the <JAVASCRIPTINLINE>var</JAVASCRIPTINLINE>
      definition is the value <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>, as
      prescribed by the ECMAScript standard (<CITATION>Ecma 1997</CITATION>).
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>eval@<SCHEMEINLINE>eval</SCHEMEINLINE> and <SCHEMEINLINE>apply</SCHEMEINLINE>|)</SUBINDEX></INDEX>
    </TEXT>
  </JAVASCRIP>
      </SPLIT>

      <EXERCISE>
  <INDEX>order of evaluation<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>order of operand evaluation</SUBINDEX></INDEX>
  Notice that we cannot tell whether the metacircular evaluator
  evaluates operands from left to right or from right to left.  Its evaluation
  order is inherited from the underlying <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>:
  If the arguments to <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> in <SCHEMEINLINE>list-of-values</SCHEMEINLINE>
  are evaluated from left to right, then <SCHEMEINLINE>list-of-values</SCHEMEINLINE> will
  evaluate operands from left to right; and 
  if the arguments to <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  are evaluated from right to left, then <SCHEMEINLINE>list-of-values</SCHEMEINLINE> will
  evaluate operands from right to left.

  Write a version of <SCHEMEINLINE>list-of-values</SCHEMEINLINE> that evaluates operands
  from left to right regardless of the order of evaluation in the underlying
  <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>.  Also write a version of <SCHEMEINLINE>list-of-values</SCHEMEINLINE> that evaluates operands
  from right to left.
  <LABEL NAME="ex:arg-eval-order"/>
      </EXERCISE>
    </SUBSECTION>