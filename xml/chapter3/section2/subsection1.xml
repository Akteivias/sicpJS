    <SUBSECTION> 
      <NAME>
        The Rules for Evaluation
      </NAME>

      <LABEL NAME="sec:env-model-rules"/>
      <INDEX>environment model of evaluation<SUBINDEX>rules for evaluation|(</SUBINDEX></INDEX>

      <TEXT>
        The overall specification of how the interpreter evaluates a
        combination remains the same as when we first introduced it in
        section<SPACE/><REF NAME="sec:evaluating-combinations"/>:

        <UL>
          <LI>To evaluate a combination:
            <OL>
              <LI> Evaluate the subexpressions of the
                combination.<FOOTNOTE>Assignment introduces a subtlety into step 1 of
                  the evaluation rule.  As shown in
                  exercise<SPACE/><REF NAME="ex:order-of-evaluation"/>, the presence of assignment
                  allows us to write expressions that will produce different values
                  depending on the order in which the subexpressions in a combination
                  <INDEX>order of evaluation<SUBINDEX>implementation-dependent</SUBINDEX></INDEX>
                  <INDEX>implementation dependencies<SUBINDEX>order of subexpression evaluation</SUBINDEX></INDEX>
                  are evaluated.  Thus, to be precise, we should specify an evaluation
                  order in step 1 (e.g., left to right or right to left).  However, this
                  order should always be considered to be an implementation detail, and
                  one should never write programs that depend on some particular order.
                  For instance, a sophisticated compiler might optimize a program by
                  varying the order in which subexpressions are evaluated.</FOOTNOTE>
              </LI>
              <LI> Apply the value of the function subexpression to the values of the
                argument subexpressions.
              </LI>
            </OL>
          </LI>
        </UL>
      </TEXT>

      <TEXT>
        The environment model of evaluation replaces the substitution model in
        specifying what it means to apply a compound
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        to arguments.
      </TEXT>

      <TEXT>
        In the environment model of evaluation, a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        is always a pair
        consisting of some code and a pointer to an environment. 
        <SPLITINLINE><SCHEME>Procedures</SCHEME><JAVASCRIPT>Functions</JAVASCRIPT></SPLITINLINE>
        are created in one way only: by evaluating a
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>function definition</JAVASCRIPT>
	</SPLITINLINE>	
	expression.
        <INDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>creating with <SCHEMEINLINE>lambda</SCHEMEINLINE></SUBINDEX></INDEX>
        This produces a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        whose code is obtained from the text of the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>function definition</JAVASCRIPT>
	</SPLITINLINE>	
	expression and whose environment is the environment in
        which the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>function definition</JAVASCRIPT>
	</SPLITINLINE>	
	expression was evaluated to produce the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  For example, consider the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        definition

        <SNIPPET EVAL="yes">
          <EXAMPLE>square_example</EXAMPLE>
          <SCHEME>
            <!-- \indcode{square}[environment@in environment model|(] -->
            (define (square x)
            (* x x))
          </SCHEME>
    <JAVASCRIPT>
function square(x) {
    return x * x;
}
    </JAVASCRIPT>
        </SNIPPET>

        evaluated in the global environment.  The
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        definition syntax
        is just syntactic sugar for an underlying implicit
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>function definition</JAVASCRIPT>
	</SPLITINLINE>
        expression.  It would have been equivalent to have used

        <SNIPPET EVAL="yes">
          <EXAMPLE>square_example</EXAMPLE>
          <SCHEME>
            (define square
            (lambda (x) (* x x)))
          </SCHEME>
          <JAVASCRIPT>
const square = x =&gt; x * x;
          </JAVASCRIPT>
        </SNIPPET>

        which evaluates <SPLITINLINE><SCHEME><SCHEMEINLINE>(lambda (x) (* x x))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>x =&gt; x * x;</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and binds <SCHEMEINLINE>square</SCHEMEINLINE> to the resulting value, all in the global environment.
      </TEXT>

      <TEXT>
        Figure<SPACE/><REF NAME="fig:evaluating-square"/> shows the result of evaluating this
        <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE> expression</SCHEME><JAVASCRIPT>function definition statement</JAVASCRIPT></SPLITINLINE>.  The
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object is a pair whose code
        specifies that the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        has one formal parameter, namely <SCHEMEINLINE>x</SCHEMEINLINE>,
        and a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        body <SPLITINLINE><SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  The environment part of the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        is a pointer to the global environment, since that is the
        environment in which the
	<SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT>function definition</JAVASCRIPT></SPLITINLINE>
	expression was evaluated to
        produce the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>. A new binding, which associates the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object with the symbol <SCHEMEINLINE>square</SCHEMEINLINE>, has been added to the global
        frame.  In general, <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE> creates</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>const</JAVASCRIPTINLINE> and <JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> create</JAVASCRIPT></SPLITINLINE> definitions by adding
        bindings to frames.

  <FIGURE>
    <FIGURE src="img_javascript/ch3-Z-G-3.png"></FIGURE>
    <LABEL NAME="fig:evaluating-square"/>
    <CAPTION>Environment structure produced by
        evaluating
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(define (square x) (* x x))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>function square(x) { return x * x; }</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> in the global environment.
    </CAPTION>
  </FIGURE>
      </TEXT>

      <TEXT>
        Now that we have seen how
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        are created, we can describe how
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        are applied.  The environment model specifies: To apply a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        to arguments, create a new environment containing a frame
        that binds the parameters to the values of the arguments.  The
        enclosing environment of this frame is the environment specified by
        the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  Now, within this new environment, evaluate the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        body.
      </TEXT>

      <TEXT>
        To show how this rule is followed, Figure<SPACE/><REF NAME="fig:square5-eval"/>
        illustrates the environment structure created by evaluating the
        expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(square 5)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square(5);</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> in the global environment, where <SCHEMEINLINE>square</SCHEMEINLINE> is the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        generated in
        Figure<SPACE/><REF NAME="fig:evaluating-square"/>.  Applying the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        results in
        the creation of a new environment, labeled E1 in the figure, that
        begins with a frame in which <SCHEMEINLINE>x</SCHEMEINLINE>, the formal parameter for the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, is bound to the argument 5.  The pointer leading upward
        from this frame shows that the frame<APOS/>s enclosing environment is the
        global environment.  The global environment is chosen here, because
        this is the environment that is indicated as part of the <SCHEMEINLINE>square</SCHEMEINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        object.  Within E1, we evaluate the body of the
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>,
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(* x x)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>return x * x;</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.  Since the value of <SCHEMEINLINE>x</SCHEMEINLINE> in E1 is 5, the result is
        <SPLITINLINE><SCHEME><SCHEMEINLINE>(*<SPACE/>5<SPACE/>5)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>5</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, or<SPACE/>25.
        <!-- \indcode{square}[environment@in environment model|)] -->

  <FIGURE>
    <FIGURE src="img_javascript/ch3-Z-G-4.png"></FIGURE>
    <LABEL NAME="fig:square5-eval"/>
          <CAPTION>Environment created by evaluating <SPLITINLINE><SCHEME><SCHEMEINLINE>(square 5)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>square(5);</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        in the global environment.
    </CAPTION>
  </FIGURE>
      </TEXT>

      <TEXT>
        The environment model of
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        application can be summarized by
        two rules:

        <UL>
          <LI>A
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            object is applied to a set of arguments by
            constructing a frame, binding the formal parameters of the
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            to the arguments of the call, and then evaluating the body of
            the
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            in the context of the new environment constructed.  The
            new frame has as its enclosing environment the environment part of the
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            object being applied.
            <INDEX><SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>creating with <SPLITINLINE><SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>function</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE></SUBINDEX></INDEX>
            <!--\indcodeplus{lambda}{expression}[value of]-->
          </LI>
          <LI>A
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            is created by evaluating a 
	    <SPLITINLINE>
	      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	      <JAVASCRIPT>function definition</JAVASCRIPT>
	    </SPLITINLINE>
            expression relative to a given environment.  The resulting
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            object is a pair consisting of the text of the
	    <SPLITINLINE>
	      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	      <JAVASCRIPT>function definition</JAVASCRIPT>
	    </SPLITINLINE>
	    expression
            and a pointer to the environment in which the
            <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
            was created.
          </LI>
        </UL>
      </TEXT>

      <TEXT>
        <!--\indsf{define}[environment model of]-->
        We also specify that defining a symbol using <SPLITINLINE><SCHEME><SCHEMEINLINE>define</SCHEMEINLINE></SCHEME><JAVASCRIPT>const</JAVASCRIPT>/<JAVASCRIPT>let</JAVASCRIPT></SPLITINLINE> creates a
        constant/variable binding in the current environment frame and assigns to the symbol the
        indicated value. Finally, we specify the behavior of
        <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE>, the operation that forced us to introduce the environment
        model in the first place.
	<SPLIT>
	  <SCHEME>
	    Evaluating the expression
	    <SCHEMEINLINE>(set! </SCHEMEINLINE><LATEXINLINE>variable value</LATEXINLINE><SCHEMEINLINE>)</SCHEMEINLINE>
	    in some environment locates the binding of
            the variable in the environment.
	    For this, one finds the first frame in the environment
            that contains a binding for the variable
	    and modifies that frame. If the variable
	    is unbound in the environment, then
	    <SCHEMEINLINE>set!</SCHEMEINLINE> signals an error.
	  </SCHEME>
	  <JAVASCRIPT>
	    Evaluating the
	    <JAVASCRIPT>statement <LATEXINLINE>name</LATEXINLINE><JAVASCRIPTINLINE>=</JAVASCRIPTINLINE><LATEXINLINE>value</LATEXINLINE><JAVASCRIPTINLINE>;</JAVASCRIPTINLINE></JAVASCRIPT> in some environment locates the binding of
        the name in the environment.
	For this, one finds the first frame in the environment
        that contains a binding for the name.
	If the name
	is unbound in the environment, then
	the assignment signals a <QUOTE>variable undefined</QUOTE> error.
	Otherwise, if the binding is a constant binding, the assignment
	signals an <QUOTE>assignment to constant</QUOTE>
	error, because JavaScript forbids assignment
	to constants. At last, if
	the binding is a variable binding, that binding
	is changed to indicate the new value of the variable.
	  </JAVASCRIPT>
	</SPLIT>

      </TEXT>

      <TEXT>
        These evaluation rules, though considerably more complex than the
        substitution model, are still reasonably straightforward.  Moreover,
        the evaluation model, though abstract, provides a correct description
        of how the interpreter evaluates expressions.  In chapter<SPACE/>4 we shall
        see how this model can serve as a blueprint for implementing a working
        interpreter.  The following sections elaborate the details of the
        model by analyzing some illustrative programs.
        <INDEX>environment model of evaluation<SUBINDEX>rules for evaluation|)</SUBINDEX></INDEX>
      </TEXT>

    </SUBSECTION>
