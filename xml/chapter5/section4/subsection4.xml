<SUBSECTION>
  <NAME>
    Running the Evaluator
  </NAME>

  <LABEL NAME="sec:running-evaluator"/>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>running|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>models of evaluation</INDEX>
    <INDEX>evaluation<SUBINDEX>models of</SUBINDEX></INDEX>
    With the implementation of the explicit-control evaluator we come to
    the end of a development, begun in chapter<SPACE/>1, in which we have
    explored successively more precise models of the evaluation process.
    We started with the relatively informal substitution model, then
    extended this in chapter<SPACE/>3 to the environment model, which enabled us
    to deal with state and change.  In the metacircular evaluator of
    chapter<SPACE/>4, we used Scheme itself as a language for making more
    explicit the environment structure constructed during evaluation of an
    expression.  Now, with register machines, we have taken a close look
    at the evaluator<APOS/>s mechanisms for storage management,
    argument passing, and control.  At
    each new level of description, we have had to raise issues and resolve
    ambiguities that were not apparent at the previous, less precise
    treatment of evaluation.  To understand the behavior of the
    explicit-control evaluator, we can simulate it and monitor its
    performance.
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>driver loop</SUBINDEX></INDEX>
    <INDEX>driver loop
    <SUBINDEX>explicit@in explicit-control evaluator</SUBINDEX></INDEX>
    We will install a driver loop in our evaluator machine.  This plays
    the role of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>driver-loop</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:running-eval"/>.  The evaluator will
    repeatedly print a prompt, read an expression, evaluate the expression by
    going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    and print the result.  The following instructions form the beginning of the
    explicit-control evaluator<APOS/>s controller sequence:<FOOTNOTE>We assume
    here that <SCHEMEINLINE>read</SCHEMEINLINE> and the various printing
    operations are available as primitive machine operations, which is useful
    for our simulation, but completely unrealistic in practice.  These are
    actually extremely complex operations.  In practice, they would be
    implemented using low-level input-output operations such as transferring
    single characters to and from a device.
    <P/>
    To support the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-global-environment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>get_global_environment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation we define
    <!--  \indcode*{the-global-environment} -->
    <!--  \indcode*{get-global-environment} -->
    <SNIPPET EVAL="no">
      <SCHEME>
    (define the-global-environment (setup-environment))

    (define (get-global-environment)
    the-global-environment)
      </SCHEME>
      <JAVASCRIPT>
const the_global_environment = setup_environment();

function get_global_environment() {
    return the_global_environment;
}
      </JAVASCRIPT>
    </SNIPPET></FOOTNOTE>
    <INDEX>prompts<SUBINDEX>explicit-control evaluator</SUBINDEX></INDEX>
    <!--  \indcode*{read-eval-print-loop} -->
    <!--  \indcode*{print-result} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      read-eval-print-loop
      (perform (op initialize-stack))
      (perform
      (op prompt-for-input) (const ";;; EC-Eval input:"))
      (assign exp (op read))
      (assign env (op get-global-environment))
      (assign continue (label print-result))
      (goto (label eval-dispatch))
      print-result
      (perform
      (op announce-output) (const ";;; EC-Eval value:"))
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"read_eval_print_loop",
    perform(op("initialize_stack")),
    perform(op("prompt_for_input"), const("/// EC_Eval input:")),
    assign("exp", op("read")),
    assign("env", op("get_global_environment")),
    assign("continue", label("print_result")),
    go_to(label("eval_dispatch")),
"print_result",
    perform(op("announce_output"), const(";;; EC_Eval value:")),
    perform(op("user_print"), reg("val")),
    go_to(label("read_eval_print_loop")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    When we encounter an error in a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    (such as the <QUOTE>unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    type error</QUOTE> indicated at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>),</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>),
      </JAVASCRIPT>
    </SPLITINLINE>
    we print an error message and return to the driver loop.<FOOTNOTE>There are
    other errors that we would like the interpreter to handle, but these are not
    so simple.  See exercise<SPACE/><REF NAME="ex:interp-errors"/>.</FOOTNOTE>
    <!--  \indcode*{unknown-expression-type} -->
    <!--  \indcode*{unknown-procedure-type} -->
    <!--  \indcode*{signal-error} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      unknown-expression-type
      (assign val (const unknown-expression-type-error))
      (goto (label signal-error))

      unknown-procedure-type
      (restore continue)    <EM>; clean up stack (from <SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>)</EM>
      (assign val (const unknown-procedure-type-error))
      (goto (label signal-error))

      signal-error
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"unknown_expression_type",
    assign("val", list(constant("unknown_expression_type_error"))),
    go_to(label("signal_error")),
    
"unknown_function_type",
    restore("continue"), /// clean up stack (from apply_dispatch)
    assign("val", list(constant("unknown_function_type_error"))),
    go_to(label("signal_error")),
    
"signal_error",
    perform(list(op("user_print"), reg("val"))),
    go_to(label("evaluator_done")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For the purposes of the simulation, we initialize the stack each time
    through the driver loop, since it might not be empty after an error
    (such as an undefined variable) interrupts an evaluation.<FOOTNOTE>We
    could perform the stack initialization only after errors, but doing it in
    the driver loop will be convenient for monitoring the evaluator<APOS/>s
    performance, as described below.</FOOTNOTE>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>controller|)</SUBINDEX></INDEX>
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>machine model</SUBINDEX></INDEX>
    If we combine all the code fragments presented in sections
    <REF NAME="sec:eceval-core"/><ENDASH/><REF NAME="sec:running-evaluator"/>,
    we can create an evaluator machine model that we can run using the
    register-machine simulator of section<SPACE/><REF NAME="sec:simulator"/>.

    <SNIPPET EVAL="no">
      <SCHEME>
      (define eceval
      (make-machine
      '(exp env val proc argl continue unev)
      eceval-operations
      '(
      read-eval-print-loop
      ^entire machine controller as given above^
      )))
      </SCHEME>
      <JAVASCRIPT>
function eceval() {
    return make_machine(list("exp", "env", "val", "fun", "argl", "continue", "unev", "temp"), // FIXME: remove temp?
                        eceval_operations,
                        list(read_eval_print_loop,
                             ... /* entire machine controller as given above */ 
                             ));
}                       
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We must define Scheme
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    to simulate the operations used as primitives by the evaluator.  These are
    the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we used for the metacircular evaluator in
    section<SPACE/><REF NAME="sec:mc-eval"/>, together with the few additional
    ones defined in footnotes throughout section<SPACE/><REF NAME="sec:eceval"/>.
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define eceval-operations
  (list (list 'self-evaluating? self-evaluating)
        <EM><LATEXINLINE>$\langle$</LATEXINLINE>complete list of operations for eceval machine<LATEXINLINE>$\rangle$</LATEXINLINE></EM>))
      </SCHEME>
      <JAVASCRIPT>
const eceval_operations = 
    list(list("is_self_evaluating", is_self_evaluating),
         $\langle complet$e $list$ $of$ $operation$s $for$ eceval $machine \rangle$
        );
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Finally, we can initialize the global environment and run the evaluator:
    <SNIPPET>
      <SCHEME>
      (define the-global-environment (setup-environment))

      (start eceval)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (append x y)
(if (null? x)
y
(cons (car x)
    (append (cdr x) y))))
;;; EC-Eval value:
ok

;;; EC-Eval input:
(append '(a b c) '(d e f))
;;; EC-Eval value:
(a b c d e f)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_RUN>
/*
  Explicit control evaluator for a JavaScript sublanguage
*/

/*
  Evaluator for language with booleans, conditionals,
  sequences, functions, constants, variables and blocks
  This is an evaluator for a language that lets you declare
  functions, variables and constants, apply functions, and
  carry out simple arithmetic calculations, boolean operations.
  The covered JavaScript sublanguage is:
  stmt    ::= const name = expr ; 
  |  let name = expr ; 
  |  function name(params) block
  |  expr ; 
  |  stmt stmt
  |  name = expr ; 
  |  block
  block   ::= { stmt }
  expr    ::= expr ? expr : expr
  |  expr binop expr
  |  unop expr
  |  name
  |  number
  |  expr(expr, expr, ...)
  binop   ::= + | - | * | / | % | &lt; | &gt; | &lt;= | &gt;= 
  | === | !== |  &amp;&amp; | ||
  unop    ::= ! | -
*/

/* CONSTANTS: NUMBERS, STRINGS, TRUE, FALSE */

// constants (numbers, strings, booleans)
// are considered "self_evaluating". This means, they
// represent themselves in the syntax tree

function is_self_evaluating(stmt) {
    return is_number(stmt) || is_string(stmt) || is_boolean(stmt);
}

// all other statements and expressions are
// tagged lists. Their tag tells us what
// kind of statement/expression they are

function is_tagged_list(stmt, the_tag) {
    return is_pair(stmt) &amp;&amp; head(stmt) === the_tag;
}

/* NAMES */

// In this evaluator, the operators are referred
// to as "names" in expressions.

// Names are tagged with "name".
// In this evaluator, typical names
// are
// list("name", "+")
// list("name", "factorial")
// list("name", "n")

function is_name(stmt) {
    return is_tagged_list(stmt, "name");
}
function name_of_name(stmt) {
    return head(tail(stmt));
}

/* CONSTANT DECLARATIONS */

// constant declarations are tagged with "constant_declaration"
// and have "name" and "value" properties

function is_constant_declaration(stmt) {
    return is_tagged_list(stmt, "constant_declaration");
}
function constant_declaration_name(stmt) {
    return head(tail(head(tail(stmt))));
}
function constant_declaration_value(stmt) {
    return head(tail(tail(stmt)));
}

/* VARIABLE DECLARATIONS */

function is_variable_declaration(stmt) {
    return is_tagged_list(stmt, "variable_declaration");
}
function variable_declaration_name(stmt) {
    return head(tail(head(tail(stmt))));
}
function variable_declaration_value(stmt) {
    return head(tail(tail(stmt)));
}

/* CONDITIONAL EXPRESSIONS */

// conditional expressions are tagged
// with "conditional_expression"

function is_conditional_expression(stmt) {
    return is_tagged_list(stmt, "conditional_expression");
}
function cond_expr_pred(stmt) {
    return list_ref(stmt, 1);
}
function cond_expr_cons(stmt) {
    return list_ref(stmt, 2);
}
function cond_expr_alt(stmt) {
    return list_ref(stmt, 3);
}
function is_true(x) {
    return x === true;
}

/* FUNCTION DEFINITION EXPRESSIONS */

// function definitions are tagged with "function_definition"
// have a list of "parameters" and a "body" statement

function is_function_definition(stmt) {
    return is_tagged_list(stmt, "function_definition");
}
function function_definition_parameters(stmt) {
    return head(tail(stmt));
}
function function_definition_body(stmt) {
    return head(tail(tail(stmt)));
}

// compound function values keep track of parameters, body
// and environment, in a list tagged as "compound_function"

function make_compound_function(parameters, body, env) {
    return list("compound_function", parameters, body, env);
}
function is_compound_function(f) {
    return is_tagged_list(f, "compound_function");
}
function function_parameters(f) {
    return list_ref(f, 1);
}
function function_body(f) {
    return list_ref(f, 2);
}
function function_environment(f) {
    return list_ref(f, 3);
}

// evaluating a function definition expression
// results in a function value. Note that the
// current environment is stored as the function
// value's environment

function eval_function_definition(stmt, env) {
    return make_compound_function(
        map(name_of_name, function_definition_parameters(stmt)),
        function_definition_body(stmt),
        env
    );
}

/* SEQUENCES */

// sequences of statements are just represented
// by tagged lists of statements by the parser.

function is_sequence(stmt) {
    return is_tagged_list(stmt, "sequence");
}
function make_sequence(stmts) {
    return list("sequence", stmts);
}
function sequence_statements(stmt) {
    return head(tail(stmt));
}
function is_empty_sequence(stmts) {
    return is_null(stmts);
}
function is_last_statement(stmts) {
    return is_null(tail(stmts));
}
function first_statement(stmts) {
    return head(stmts);
}
function rest_statements(stmts) {
    return tail(stmts);
}

/* FUNCTION APPLICATION */

// The core of our evaluator is formed by the
// implementation of function applications.
// Applications are tagged with "application"
// and have "operator" and "operands"

function is_application(stmt) {
    return is_tagged_list(stmt, "application");
}
function operator(stmt) {
    return head(tail(stmt));
}
function operands(stmt) {
    return head(tail(tail(stmt)));
}
function no_operands(ops) {
    return is_null(ops);
}
function first_operand(ops) {
    return head(ops);
}
function rest_operands(ops) {
    return tail(ops);
}

// primitive functions are tagged with "primitive"
// and come with a Source function "implementation"

function make_primitive_function(impl) {
    return list("primitive", impl);
}
function is_primitive_function(fun) {
    return is_tagged_list(fun, "primitive");
}
function primitive_implementation(fun) {
    return list_ref(fun, 1);
}

/* APPLY */

// apply_in_underlying_javascript allows us
// to make use of JavaScript's primitive functions
// in order to access operators such as addition

function apply_primitive_function(fun, argument_list) {
    return apply_in_underlying_javascript(
        primitive_implementation(fun),
        argument_list
    );
}

// We use a nullary function as temporary value for names whose
// declaration has not yet been evaluated. The purpose of the
// function definition is purely to create a unique identity;
// the function will never be applied and its return value
// (null) is irrelevant.
const no_value_yet = () => null;

// The function local_names collects all names declared in the
// body statements. For a name to be included in the list of
// local_names, it needs to be declared outside of any other
// block or function.

function insert_all(xs, ys) {
    return is_null(xs)
        ? ys
        : is_null(member(head(xs), ys))
        ? pair(head(xs), insert_all(tail(xs), ys))
        : error(head(xs), "multiple declarations of: ");
}

function local_names(stmt) {
    if (is_sequence(stmt)) {
        const stmts = sequence_statements(stmt);
        return is_empty_sequence(stmts)
            ? null
            : insert_all(
                local_names(first_statement(stmts)),
                local_names(make_sequence(rest_statements(stmts)))
            );
    } else {
        return is_constant_declaration(stmt)
            ? list(constant_declaration_name(stmt))
            : is_variable_declaration(stmt)
            ? list(variable_declaration_name(stmt))
            : null;
    }
}

/* RETURN STATEMENTS */

// functions return the value that results from
// evaluating their expression

function is_return_statement(stmt) {
    return is_tagged_list(stmt, "return_statement");
}
function return_statement_expression(stmt) {
    return head(tail(stmt));
}

function make_return_value(content) {
    return list("return_value", content);
}
function is_return_value(value) {
    return is_tagged_list(value, "return_value");
}
function return_value_content(value) {
    return head(tail(value));
}

/* ASSIGNMENT */

function is_assignment(stmt) {
    return is_tagged_list(stmt, "assignment");
}
function assignment_name(stmt) {
    return head(tail(head(tail(stmt))));
}
function assignment_value(stmt) {
    return head(tail(tail(stmt)));
}

/* BLOCKS */

// blocks are tagged with "block"
function is_block(stmt) {
    return is_tagged_list(stmt, "block");
}
function make_block(stmt) {
    return list("block", stmt);
}
function block_body(stmt) {
    return head(tail(stmt));
}

/* ENVIRONMENTS */

// frames are pairs with a list of names as head
// an a list of pairs as tail (values). Each value
// pair has the proper value as head and a flag
// as tail, which indicates whether assignment
// is allowed for the corresponding name

function make_frame(names, values) {
    return pair(names, values);
}
function frame_names(frame) {
    return head(frame);
}
function frame_values(frame) {
    return tail(frame);
}

// The first frame in an environment is the
// "innermost" frame. The tail operation
// takes you to the "enclosing" environment

function first_frame(env) {
    return head(env);
}
function enclosing_environment(env) {
    return tail(env);
}
function enclose_by(frame, env) {
    return pair(frame, env);
}
function is_empty_environment(env) {
    return is_null(env);
}

// set_name_value is used for let and const to give
// the initial value to the name in the first
// (innermost) frame of the given environment

function set_name_value(name, val, env) {
    function scan(names, vals) {
        return is_null(names)
            ? error("internal error: name not found")
            : name === head(names)
            ? set_head(head(vals), val)
            : scan(tail(names), tail(vals));
    }
    const frame = first_frame(env);
    return scan(frame_names(frame), frame_values(frame));
}

// name lookup proceeds from the innermost
// frame and continues to look in enclosing
// environments until the name is found

function lookup_name_value(name, env) {
    function env_loop(env) {
        function scan(names, vals) {
            return is_null(names)
                ? env_loop(enclosing_environment(env))
                : name === head(names)
                ? head(head(vals))
                : scan(tail(names), tail(vals));
        }
        if (is_empty_environment(env)) {
            error(name, "Unbound name: ");
        } else {
            const frame = first_frame(env);
            const value = scan(frame_names(frame), frame_values(frame));
            if (value === no_value_yet) {
                error(name, "Name used before declaration: ");
            } else {
                return value;
            }
        }
    }
    return env_loop(env);
}

// to assign a name to a new value in a specified environment,
// we scan for the name, just as in lookup_name_value, and
// change the corresponding value when we find it,
// provided it is tagged as mutable

function assign_name_value(name, val, env) {
    function env_loop(env) {
        function scan(names, vals) {
            return is_null(names)
                ? env_loop(enclosing_environment(env))
                : name === head(names)
                ? tail(head(vals))
                ? set_head(head(vals), val)
                : error("no assignment " + "to constants allowed")
            : scan(tail(names), tail(vals));
        }
        if (is_empty_environment(env)) {
            error(name, "Unbound name in assignment: ");
        } else {
            const frame = first_frame(env);
            return scan(frame_names(frame), frame_values(frame));
        }
    }
    return env_loop(env);
}

// applying a compound function to parameters will
// lead to the creation of a new environment, with
// respect to which the body of the function needs
// to be evaluated
// (also used for blocks)

function extend_environment(names, vals, base_env) {
    if (length(names) === length(vals)) {
        return enclose_by(
            make_frame(
                names,
                map((x) => pair(x, true), vals)
            ),
            base_env
        );
    } else if (length(names) &lt; length(vals)) {
        error(
            "Too many arguments supplied: " +
                stringify(names) +
                ", " +
                stringify(vals)
        );
    } else {
        error(
            "Too few arguments supplied: " + stringify(names) + ", " + stringify(vals)
        );
    }
}

/* THE GLOBAL ENVIRONMENT */

const the_empty_environment = null;

// the minus operation is overloaded to
// support both binary minus and unary minus

function minus(x, y) {
    if (is_number(x) &amp;&amp; is_number(y)) {
        return x - y;
    } else {
        return -x;
    }
}

// the global environment has bindings for all
// primitive functions, including the operators

const primitive_functions = list(
    list("display", display),
    list("error", error),
    list("+", (x, y) =&gt; x + y),
    list("-", (x, y) =&gt; minus(x, y)),
    list("*", (x, y) =&gt; x * y),
    list("/", (x, y) =&gt; x / y),
    list("%", (x, y) =&gt; x % y),
    list("===", (x, y) =&gt; x === y),
    list("!==", (x, y) =&gt; x !== y),
    list("&lt;", (x, y) =&gt; x &lt; y),
    list("&lt;=", (x, y) =&gt; x &lt;= y),
    list("&gt;", (x, y) =&gt; x &gt; y),
    list("&gt;=", (x, y) =&gt; x &gt;= y),
    list("!", (x) => !x)
);

// the global environment also has bindings for all
// primitive non-function values, such as undefined and
// math_PI

const primitive_constants = list(
    list("undefined", undefined),
    list("math_PI", math_PI)
);

// setup_environment makes an environment that has
// one single frame, and adds a binding of all names
// listed as primitive_functions and primitive_values.
// The values of primitive functions are "primitive"
// objects, see line 281 how such functions are applied

function setup_environment() {
    const primitive_function_names = map((f) =&gt; head(f), primitive_functions);
    const primitive_function_values = map(
        (f) =&gt; make_primitive_function(head(tail(f))),
        primitive_functions
    );
    const primitive_constant_names = map((f) =&gt; head(f), primitive_constants);
    const primitive_constant_values = map(
        (f) =&gt; head(tail(f)),
        primitive_constants
    );
    return extend_environment(
        append(primitive_function_names, primitive_constant_names),
        append(primitive_function_values, primitive_constant_values),
        the_empty_environment
    );
}

function get_global_environment() {
    return the_global_environment;
}

function user_print(object) {
    display(is_compound_function(object)
        ? "function" +
        stringify(function_parameters(object)) +
        stringify(function_body(object)) +
        "&lt;environment&gt;"
        : object);
}

// END EVALUATOR SKELETON

// Global registers
let the_heads = [];
let the_tails = [];
let free = 0;

const POINTER_TAG = 800;
const NUMBER_TAG = 801;
const STRING_TAG = 802;
const NULL_TAG = -1;

// Implementation is with arrays...
function head_(n) {
    return vector_ref(the_heads, n);
}

function tail_(n) {
    return vector_ref(the_tails, n);
}

function vector_ref(xs, index) {
    return xs[index];
}

function vector_set(xs, index, value) {
    xs[index] = value;
    display(xs);
    return undefined;
}

function pair_(a, b) {
    // perform(list(op("vector_set"), reg("the_heads"), reg("free"), a));
    // perform(list(op("vector_set"), reg("the_tails"), reg("free"), b));
    // assign("free", list(op("+"), reg("free"), constant(1)));
    // display(is_number(a), "is_number");

    const ret = free;
    vector_set(the_heads, free, a);
    vector_set(the_tails, free, b);

    free = free + 1;
    return ret;
}

function assoc(key, records) {
    return is_null(records)
        ? undefined
        : equal(key, head(head(records)))
        ? head(records)
        : assoc(key, tail(records));
}

function get_contents(register) {
    return register("get");
}

function set_contents(register, value) {
    return register("set")(value);
}

function op(name) {
    return list("op", name);
}

function reg(name) {
    return list("reg", name);
}

function label(name) {
    return list("label", name);
}

function constant(value) {
    return list("constant", value);
}

function branch(label) {
    return list("branch", label);
}

function assign(register_name, source) {
    const a = append(list("assign", register_name), source);
    return a;
}

function perform(args) {
    const a = append(list("perform"), args);
    return a;
}

// Made an n-ary function helper...
function nary_function(f) {
    // f is n-ary
    return (arg_list) => apply_in_underlying_javascript(f, arg_list);
}

function save(value) {
    return list("save", value);
}

function restore(value) {
    return list("restore", value);
}

function go_to(label) {
    return list("go_to", label);
}

function test(op, lhs) {
    return list("test", op, lhs, constant(true));
}

function binary_function(f) {
    // f is binary
    return (arg_list) =>
        length(arg_list) === 2
        ? apply_in_underlying_javascript(f, arg_list)
        : error(
            arg_list,
            "Incorrect number of arguments passed to binary function "
        );
}

function make_machine(register_names, ops, controller_text) {
    const machine = make_new_machine();

    map((reg_name) => machine("allocate_register")(reg_name), register_names);
    machine("install_operations")(ops);
    machine("install_instruction_sequence")(assemble(controller_text, machine));

    return machine;
}

function make_register(name) {
    let contents = "*unassigned*";

    function dispatch(message) {
        if (message === "get") {
            return contents;
        } else {
            if (message === "set") {
                return (value) => {
                    contents = value;
                };
            } else {
                error(message, "Unknown request: REGISTER");
            }
        }
    }

    return dispatch;
}

function debug(reg) {
    display(reg);
}

function make_stack() {
    let stack = null;

    function push(x) {
        stack = pair(x, stack);
        return "done";
    }

    function pop() {
        if (is_null(stack)) {
            error("Empty stack: POP");
        } else {
            const top = head(stack);
            stack = tail(stack);
            return top;
        }
    }

    function initialize() {
        stack = null;
        return "done";
    }

    function dispatch(message) {
        return message === "push"
            ? push
            : message === "pop"
            ? pop()
            : message === "initialize"
            ? initialize()
            : error("Unknown request: STACK", message);
    }

    return dispatch;
}

function pop(stack) {
    return stack("pop");
}

function push(stack, value) {
    return stack("push")(value);
}

function make_new_machine() {
    const pc = make_register("pc");
    const flag = make_register("flag");
    const stack = make_stack();
    let the_instruction_sequence = null;
    let the_ops = list(list("initialize_stack", () => stack("initialize")));
    let register_table = list(list("pc", pc), list("flag", flag));

    function allocate_register(name) {
        if (assoc(name, register_table) === undefined) {
            register_table = pair(list(name, make_register(name)), register_table);
        } else {
            error(name, "Multiply defined register: ");
        }

        return "register_allocated";
    }

    function lookup_register(name) {
        const val = assoc(name, register_table);

        return val === undefined
            ? error(name, "Unknown register:")
            : head(tail(val));
    }

    function execute() {
        const insts = get_contents(pc);

        if (is_null(insts)) {
            return "done";
        } else {
            const proc = instruction_execution_proc(head(insts));
            proc();
            return execute();
        }
    }

    function dispatch(message) {
        return message === "start"
            ? () => {
                set_contents(pc, the_instruction_sequence);
                return execute();
            }
        : message === "install_instruction_sequence"
            ? (seq) => {
                the_instruction_sequence = seq;
            }
        : message === "allocate_register"
            ? allocate_register
            : message === "get_register"
            ? lookup_register
            : message === "install_operations"
            ? (ops) => {
                the_ops = append(the_ops, ops);
            }
        : message === "stack"
            ? stack
            : message === "operations"
            ? the_ops
            : error(message, "Unknown request: MACHINE");
    }

    return dispatch;
}

function start(machine) {
    return machine("start")();
}

function get_register_contents(machine, register_name) {
    return get_contents(get_register(machine, register_name));
}

function set_register_contents(machine, register_name, value) {
    set_contents(get_register(machine, register_name), value);
    return "done";
}

function get_register(machine, reg_name) {
    return machine("get_register")(reg_name);
}

function assemble(controller_text, machine) {
    function receive(insts, labels) {
        update_insts(insts, labels, machine);
        return insts;
    }

    return extract_labels(controller_text, receive);
}

function extract_labels(text, receive) {
    function helper(insts, labels) {
        /// FIXME: rename to something useful
        const next_inst = head(text);

        return is_string(next_inst)
            ? receive(insts, pair(make_label_entry(next_inst, insts), labels))
            : receive(pair(make_instruction(next_inst), insts), labels);
    }

    return text === undefined || is_null(text)
        ? receive(null, null)
        : extract_labels(tail(text), helper);
}

function update_insts(insts, labels, machine) {
    const pc = get_register(machine, "pc");
    const flag = get_register(machine, "flag");
    const stack = machine("stack");
    const ops = machine("operations");

    const set_iep = set_instruction_execution_proc;
    const make_ep = make_execution_procedure;
    return map(
        (i) =>
            set_iep(
                i,
                make_ep(instruction_text(i), labels, machine, pc, flag, stack, ops)
            ),
        insts
    );
}

function make_instruction(text) {
    return pair(text, null);
}

function instruction_text(inst) {
    return head(inst);
}

function instruction_execution_proc(inst) {
    return tail(inst);
}

function set_instruction_execution_proc(inst, proc) {
    set_tail(inst, proc);
}

function make_label_entry(label_name, insts) {
    return pair(label_name, insts);
}

function lookup_label(labels, label_name) {
    const val = assoc(label_name, labels);

    return val === undefined
        ? error(label_name, "Undefined label: ASSEMBLE")
        : tail(val);
}

function make_execution_procedure(inst, labels, machine, pc, flag, stack, ops) {
    const x = head(inst);

    return x === "assign"
        ? make_assign(inst, machine, labels, ops, pc)
        : x === "test"
        ? make_test(inst, machine, labels, ops, flag, pc)
        : x === "branch"
        ? make_branch(inst, machine, labels, flag, pc)
        : x === "go_to"
        ? make_goto(inst, machine, labels, pc)
        : x === "save"
        ? make_save(inst, machine, stack, pc)
        : x === "restore"
        ? make_restore(inst, machine, stack, pc)
        : x === "perform"
        ? make_perform(inst, machine, labels, ops, pc)
        : error(inst, "Unknown instruction type: ASSEMBLE");
}

function make_assign(inst, machine, labels, operations, pc) {
    const target = get_register(machine, assign_reg_name(inst));
    const value_exp = assign_value_exp(inst);

    // FIX FOR LABEL
    const value_proc = is_operation_exp(value_exp)
          ? make_operation_exp(value_exp, machine, labels, operations)
          : // fix for label...
          is_label_exp(value_exp)
          ? make_primitive_exp(value_exp, machine, labels)
          : make_primitive_exp(head(value_exp), machine, labels);

    function perform_make_assign() {
        set_contents(target, value_proc());
        advance_pc(pc);
    }

    return perform_make_assign;
}

function assign_reg_name(assign_instruction) {
    return head(tail(assign_instruction));
}

function assign_value_exp(assign_instruction) {
    return tail(tail(assign_instruction));
}

function advance_pc(pc) {
    set_contents(pc, tail(get_contents(pc)));
}

function make_test(inst, machine, labels, operations, flag, pc) {
    const condition = test_condition(inst);

    if (is_operation_exp(condition)) {
        const condition_proc = make_operation_exp(
            condition,
            machine,
            labels,
            operations
        );

        function perform_make_test() {
            set_contents(flag, condition_proc());
            advance_pc(pc);
        }

        return perform_make_test;
    } else {
        error(inst, "Bad TEST instruction: ASSEMBLE");
    }
}

function test_condition(test_instruction) {
    return tail(test_instruction);
}

function make_branch(inst, machine, labels, flag, pc) {
    const dest = branch_dest(inst);

    if (is_label_exp(dest)) {
        const insts = lookup_label(labels, label_exp_label(dest));

        function perform_make_branch() {
            if (get_contents(flag)) {
                set_contents(pc, insts);
            } else {
                advance_pc(pc);
            }
        }

        return perform_make_branch;
    } else if (is_register_exp(dest)) {
        const reg = get_register(machine, register_exp_reg(dest));

        function perform_make_branch() {
            if (get_contents(flag)) {
                set_contents(pc, get_contents(reg));
            } else {
                advance_pc(pc);
            }
        }

        return perform_make_branch;
    } else {
        error(inst, "Bad BRANCH instruction: ASSEMBLE");
    }
}

function branch_dest(branch_instruction) {
    return head(tail(branch_instruction));
}

function make_goto(inst, machine, labels, pc) {
    const dest = goto_dest(inst);

    if (is_label_exp(dest)) {
        const insts = lookup_label(labels, label_exp_label(dest));
        return () =&gt; set_contents(pc, insts);
    } else if (is_register_exp(dest)) {
        const reg = get_register(machine, register_exp_reg(dest));
        return () =&gt; set_contents(pc, get_contents(reg));
    } else {
        error(inst, "Bad GOTO instruction: ASSEMBLE");
    }
}

function goto_dest(goto_instruction) {
    return head(tail(goto_instruction));
}

function make_save(inst, machine, stack, pc) {
    const reg = get_register(machine, stack_inst_reg_name(inst));

    function perform_make_save() {
        push(stack, get_contents(reg));
        advance_pc(pc);
    }

    return perform_make_save;
}

function make_restore(inst, machine, stack, pc) {
    const reg = get_register(machine, stack_inst_reg_name(inst));

    function perform_make_restore() {
        set_contents(reg, pop(stack));
        advance_pc(pc);
    }

    return perform_make_restore;
}

function stack_inst_reg_name(stack_instruction) {
    return head(tail(stack_instruction));
}

function make_perform(inst, machine, labels, operations, pc) {
    const action = perform_action(inst);

    if (is_operation_exp(action)) {
        const action_proc = make_operation_exp(action, machine, labels, operations);
        return () => {
            action_proc();
            advance_pc(pc);
        };
    } else {
        error(inst, "Bad PERFORM instruction: ASSEMBLE");
    }
}

function perform_action(inst) {
    return tail(inst);
}

function make_primitive_exp(exp, machine, labels) {
    if (is_constant_exp(exp)) {
        const c = constant_exp_value(exp);
        return () => c;
    } else if (is_label_exp(exp)) {
        const insts = lookup_label(labels, label_exp_label(exp));
        return () => insts;
    } else if (is_register_exp(exp)) {
        const r = get_register(machine, register_exp_reg(exp));
        return () => get_contents(r);
    } else {
        error(exp, "Unknown expression type: ASSEMBLE");
    }
}

function is_register_exp(exp) {
    return is_tagged_list(exp, "reg");
}

function register_exp_reg(exp) {
    return head(tail(exp));
}

function is_constant_exp(exp) {
    return is_tagged_list(exp, "constant");
}

function constant_exp_value(exp) {
    return head(tail(exp));
}

function is_label_exp(exp) {
    return is_tagged_list(exp, "label");
}

function label_exp_label(exp) {
    return head(tail(exp));
}

function make_operation_exp(exp, machine, labels, operations) {
    const op = lookup_prim(operation_exp_op(exp), operations);
    const aprocs = map(
        (e) => make_primitive_exp(e, machine, labels),
        operation_exp_operands(exp)
    );

    function perform_make_operation_exp() {
        return op(map((p) => p(), aprocs));
    }

    return perform_make_operation_exp;
}

function is_operation_exp(exp) {
    return is_pair(exp) &amp;&amp; is_tagged_list(head(exp), "op");
}

function operation_exp_op(operation_exp) {
    return head(tail(head(operation_exp)));
}

function operation_exp_operands(operation_exp) {
    return tail(operation_exp);
}

function lookup_prim(symbol, operations) {
    const val = assoc(symbol, operations);

    return val === undefined
        ? error(symbol, "Unknown operation: ASSEMBLE")
        : head(tail(val));
}

const eceval_operations = list(
    // eval functions from meta-circular evaluator
    list("is_self_evaluating", nary_function(is_self_evaluating)),
    list("is_name", nary_function(is_name)),
    list("name_of_name", nary_function(name_of_name)),
    list(
        "all_names_of_names",
        nary_function((names) => map(name_of_name, names))
    ),
    list("is_assignment", nary_function(is_assignment)),
    list("assignment_name", nary_function(assignment_name)),
    list("assignment_value", nary_function(assignment_value)),
    list("assign_name_value", nary_function(assign_name_value)),
    list("is_constant_declaration", nary_function(is_constant_declaration)),
    list(
        "constant_declaration_name",
        nary_function(constant_declaration_name)
    ),
    list(
        "constant_declaration_value",
        nary_function(constant_declaration_value)
    ),
    list("is_variable_declaration", nary_function(is_variable_declaration)),
    list(
        "variable_declaration_name",
        nary_function(variable_declaration_name)
    ),
    list(
        "variable_declaration_value",
        nary_function(variable_declaration_value)
    ),
    list("declare_value", nary_function(set_name_value)),
    list("is_function_definition", nary_function(is_function_definition)),
    list(
        "function_definition_parameters",
        nary_function(function_definition_parameters)
    ),
    list("function_definition_body", nary_function(function_definition_body)),
    list("is_return_statement", nary_function(is_return_statement)),
    list(
        "is_conditional_expression",
        nary_function(is_conditional_expression)
    ),
    list("conditional_pred", nary_function(cond_expr_pred)),
    list("conditional_cons", nary_function(cond_expr_cons)),
    list("conditional_alt", nary_function(cond_expr_alt)),

    list("is_sequence", nary_function(is_sequence)),
    list("make_sequence", nary_function(make_sequence)),
    list("is_block", nary_function(is_block)),
    list("block_body", nary_function(block_body)),
    list("local_names", nary_function(local_names)),
    list(
        "get_temp_block_values",
        nary_function((locals) => map((x) => no_value_yet, locals))
    ),
    list("is_application", nary_function(is_application)),
    list("is_primitive_function", nary_function(is_primitive_function)),
    list("apply_primitive_function", nary_function(apply_primitive_function)),
    list("is_compound_function", nary_function(is_compound_function)),
    list("function_parameters", nary_function(function_parameters)),
    list("function_environment", nary_function(function_environment)),
    list("function_body", nary_function(function_body)),
    list("insert_all", nary_function(insert_all)),
    list("extend_environment", nary_function(extend_environment)),
    list("make_compound_function", nary_function(make_compound_function)),

    list(
        "lookup_name_value",
        nary_function((stmt, env) => lookup_name_value(name_of_name(stmt), env))
    ),
    list("get_global_environment", nary_function(get_global_environment)),

    // generic helpers
    list("is_true", nary_function(is_true)),
    list("is_null", nary_function(is_null)),
    list(
        "is_pair",
        nary_function((a) => is_pair(a))
    ),
    list(
        "is_number",
        nary_function((a) => is_number(a))
    ),
    list(
        "append",
        nary_function((xs, ys) => append(xs, ys))
    ),

    list("vector_ref", binary_function(vector_ref)),
    list("vector_set", nary_function(vector_set)),
    list("pair", nary_function(pair_)),

    list("prompt_for_input", nary_function((s) => prompt_for_input(s))),
    list("user_print", nary_function(user_print)),
    list("display", nary_function(display)),

    // basic functions
    list(
        "rem",
        binary_function((a, b) => a % b)
    ),
    list(
        "=",
        binary_function((a, b) => a === b)
    ),
    list(
        "+",
        binary_function((a, b) => a + b)
    ),
    list(
        "===",
        binary_function((a, b) => a === b)
    ),
    // operands
    list("operands", nary_function(operands)),
    list("operator", nary_function(operator)),
    list("has_no_operands", nary_function(no_operands)),
    list("first_operand", nary_function(first_operand)),
    list(
        "is_last_operand",
        nary_function((a) => is_null(tail(a)))
    ),
    list("rest_operands", nary_function(rest_operands)),

    //arg
    list(
        "empty_arglist",
        nary_function((_) => list())
    ),
    list(
        "adjoin_arg",
        nary_function((val, argl) => append(argl, list(val)))
    ),

    // exp (sequence)
    list("first_statement", nary_function(first_statement)),
    list("rest_statements", nary_function(rest_statements)),
    list("is_last_statement", nary_function(is_last_statement)),
    list("sequence_statements", nary_function(sequence_statements))
);

function eceval() {
    return make_machine(
        list(
            "exp",
            "env",
            "val",
            "continue",
            "fun",
            "argl",
            "unev",
            "temp" // FIXME: TOBIAS -- not mentioned in 5.4
        ),
        eceval_operations,
        list(
            assign("continue", label("evaluator_done")),
            assign("env", list(op("get_global_environment"))),

            go_to(label("read_eval_print_loop")),
            
            // This corresponds to the 'evaluate' function
            // The workhorse of our evaluator is the evaluate function.
            // It dispatches on the kind of statement at hand, and
            // invokes the appropriate implementations of their
            // evaluation process, as described above, always using
            // a current environment
            // See the source code at bottom of file for refrence
            "eval_dispatch",
            test(op("is_self_evaluating"), reg("exp")), 
            branch(label("ev_self_eval")),
            test(op("is_name"), reg("exp")),
            branch(label("ev_name")),

            // for simplicity, treat let/const the same
            test(op("is_variable_declaration"), reg("exp")),
            branch(label("ev_variable_declaration")),
            test(op("is_constant_declaration"), reg("exp")),
            branch(label("ev_constant_declaration")),
            test(op("is_assignment"), reg("exp")),
            branch(label("ev_assignment")),

            test(op("is_conditional_expression"), reg("exp")),
            branch(label("ev_if")),
            test(op("is_function_definition"), reg("exp")),
            branch(label("ev_lambda")),
            test(op("is_sequence"), reg("exp")),
            branch(label("ev_seq")),
            test(op("is_block"), reg("exp")),
            branch(label("ev_block")),
            test(op("is_application"), reg("exp")),
            branch(label("ev_application")),
            go_to(label("unknown_expression_type")),

            "ev_self_eval",
            assign("val", list(reg("exp"))),
            go_to(reg("continue")),

            "ev_name",
            assign("val", list(op("lookup_name_value"), reg("exp"), reg("env"))),
            go_to(reg("continue")),

            "ev_lambda",
            assign("unev", list(op("function_definition_parameters"), reg("exp"))),
            assign("exp", list(op("function_definition_body"), reg("exp"))),
            assign(
                "val",
                list(op("make_compound_function"), reg("unev"), reg("exp"), reg("env"))
            ),
            go_to(reg("continue")),

            "ev_application",
            save("continue"),
            save("env"),
            assign("unev", list(op("operands"), reg("exp"))),
            save("unev"),
            assign("exp", list(op("operator"), reg("exp"))),
            assign("continue", label("ev_appl_did_operator")),
            go_to(label("eval_dispatch")),

            "ev_appl_did_operator",
            restore("unev"), // the operands
            restore("env"),
            assign("argl", list(op("empty_arglist"))),
            assign("fun", list(reg("val"))), // the operator
            test(op("has_no_operands"), reg("unev")),
            branch(label("apply_dispatch")),
            save("fun"),

            "ev_appl_argument_loop",
            save("argl"),
            assign("exp", list(op("first_operand"), reg("unev"))),
            test(op("is_last_operand"), reg("unev")),
            branch(label("ev_appl_last_arg")),
            save("env"),
            save("unev"),
            assign("continue", label("ev_appl_accumulate_arg")),
            go_to(label("eval_dispatch")),

            "ev_appl_accumulate_arg",
            restore("unev"),
            restore("env"),
            restore("argl"),
            assign("argl", list(op("adjoin_arg"), reg("val"), reg("argl"))),
            assign("unev", list(op("rest_operands"), reg("unev"))),
            go_to(label("ev_appl_argument_loop")),

            "ev_appl_last_arg",
            assign("continue", label("ev_appl_accum_last_arg")),
            go_to(label("eval_dispatch")),

            "ev_appl_accum_last_arg",
            restore("argl"),
            assign("argl", list(op("adjoin_arg"), reg("val"), reg("argl"))),
            restore("fun"),
            go_to(label("apply_dispatch")),

            // function application needs to distinguish between
            // primitive functions (which are evaluated using the
            // underlying JavaScript), and compound functions.
            // An application of the latter needs to evaluate the
            // body of the function value with respect to an
            // environment that results from extending the function
            // object's environment by a binding of the function
            // parameters to the arguments and of local names to
            // the special value no_value_yet

            // function apply(fun, args) {
            //   if (is_primitive_function(fun)) {
            //     return apply_primitive_function(fun, args);
            //   } else if (is_compound_function(fun)) {
            //     const body = function_body(fun);
            //     const locals = local_names(body);
            //     const names = insert_all(function_parameters(fun), locals);
            //     const temp_values = map((x) => no_value_yet, locals);
            //     const values = append(args, temp_values);
            //     const result = evaluate(
            //       body,
            //       extend_environment(names, values, function_environment(fun))
            //     );
            //     if (is_return_value(result)) {
            //       return return_value_content(result);
            //     } else {
            //       return undefined;
            //     }
            //   } else {
            //     error(fun, "Unknown function type in apply");
            //   }
            // }
            "apply_dispatch",
            test(op("is_primitive_function"), reg("fun")),
            branch(label("primitive_apply")),
            test(op("is_compound_function"), reg("fun")),
            branch(label("compound_apply")),
            go_to(label("unknown_function_type")),

            "primitive_apply",
            assign(
                "val",
                list(op("apply_primitive_function"), reg("fun"), reg("argl"))
            ),
            restore("continue"),
            go_to(reg("continue")),

            "compound_apply",
            assign("unev", list(op("function_parameters"), reg("fun"))), // params
            // A QUICK HACK HERE, UNSURE WHY IT'S NEEDED
            assign("unev", list(op("all_names_of_names"), reg("unev"))), // params destructured

            assign("temp", list(op("function_body"), reg("fun"))), // body
            assign("temp", list(op("local_names"), reg("unev"))), // locals

            assign("unev", list(op("insert_all"), reg("unev"), reg("temp"))), //names
            assign("temp", list(op("get_temp_block_values"), reg("temp"))), // temp_values

            assign("temp", list(op("append"), reg("argl"), reg("temp"))), // values
            assign("env", list(op("function_environment"), reg("fun"))),

            assign(
                "env",
                list(op("extend_environment"), reg("unev"), reg("temp"), reg("env"))
            ),
            assign("unev", list(op("function_body"), reg("fun"))),
            go_to(label("ev_sequence")),

            // to evaluate a sequence, we need to evaluate
            // its statements one after the other, and return
            // the value of the last statement.
            // An exception to this rule is when a return
            // statement is encountered. In that case, the
            // remaining statements are ignored and the
            // return value is the value of the sequence.

            // function eval_sequence(stmts, env) {
            //   if (is_empty_sequence(stmts)) {
            //     return undefined;
            //   } else if (is_last_statement(stmts)) {
            //     return evaluate(first_statement(stmts), env);
            //   } else {
            //     const first_stmt_value = evaluate(first_statement(stmts), env);
            //     if (is_return_value(first_stmt_value)) {
            //       return first_stmt_value;
            //     } else {
            //       return eval_sequence(rest_statements(stmts), env);
            //     }
            //   }
            // }
            "ev_seq",
            save("continue"),
            assign("unev", list(op("sequence_statements"), reg("exp"))),

            "ev_sequence",
            assign("exp", list(op("first_statement"), reg("unev"))),
            test(op("is_last_statement"), reg("unev")),
            branch(label("ev_sequence_last_exp")),
            save("unev"),
            save("env"),
            assign("continue", label("ev_sequence_continue")),
            go_to(label("eval_dispatch")),

            "ev_sequence_continue",
            restore("env"),
            restore("unev"),
            assign("unev", list(op("rest_statements"), reg("unev"))),
            go_to(label("ev_sequence")),

            "ev_sequence_last_exp",
            restore("continue"),
            go_to(label("eval_dispatch")),

            // evaluation of blocks evaluates the body of the block
            // with respect to the current environment extended by
            // a binding of all local names to the special value
            // no_value_yet

            // function eval_block(stmt, env) {
            //   const body = block_body(stmt);
            //   const locals = local_names(body);
            //   const temp_values = map((x) => no_value_yet, locals);
            //   return evaluate(body, extend_environment(locals, temp_values, env));
            // }
            "ev_block",
            save("continue"),
            assign("exp", list(op("block_body"), reg("exp"))),
            assign("val", list(op("local_names"), reg("exp"))),
            assign("temp", list(op("get_temp_block_values"), reg("val"))),
            assign(
                "env",
                list(op("extend_environment"), reg("val"), reg("temp"), reg("env"))
            ),
            go_to(label("eval_dispatch")),

            // the meta-circular evaluation of conditional expressions
            // evaluates the predicate and then the appropriate
            // branch, depending on whether the predicate evaluates to
            // true or not

            // function eval_conditional_expression(stmt, env) {
            //   return is_true(evaluate(cond_expr_pred(stmt), env))
            //     ? evaluate(cond_expr_cons(stmt), env)
            //     : evaluate(cond_expr_alt(stmt), env);
            // }
            "ev_if",
            save("exp"), // save expression for later
            save("env"),
            save("continue"),
            assign("continue", label("ev_if_decide")),
            assign("exp", list(op("conditional_pred"), reg("exp"))),
            go_to(label("eval_dispatch")), // evaluate the predicate

            "ev_if_decide",
            restore("continue"),
            restore("env"),
            restore("exp"),
            test(op("is_true"), reg("val")),
            branch(label("ev_if_consequent")),

            "ev_if_alternative",
            assign("exp", list(op("conditional_alt"), reg("exp"))),
            go_to(label("eval_dispatch")),

            "ev_if_consequent",
            assign("exp", list(op("conditional_cons"), reg("exp"))),
            go_to(label("eval_dispatch")),

            // function eval_assignment(stmt, env) {
            //   const value = evaluate(assignment_value(stmt), env);
            //   assign_name_value(assignment_name(stmt), value, env);
            //   return value;
            // }
            "ev_assignment",
            assign("unev", list(op("assignment_name"), reg("exp"))),
            save("unev"), // save variable for later
            assign("exp", list(op("assignment_value"), reg("exp"))),
            save("env"),
            save("continue"),
            assign("continue", label("ev_assignment_1")),
            go_to(label("eval_dispatch")), // evaluate the assignment value

            "ev_assignment_1",
            restore("continue"),
            restore("env"),
            restore("unev"),
            perform(
                list(op("assign_name_value"), reg("unev"), reg("val"), reg("env"))
            ),
            assign("val", list(constant("ok"))),
            go_to(reg("continue")),

            // evaluation of a constant declaration evaluates
            // the right-hand expression and binds the
            // name to the resulting value in the
            // first (innermost) frame

            // function eval_constant_declaration(stmt, env) {
            //   set_name_value(
            //     constant_declaration_name(stmt),
            //     evaluate(constant_declaration_value(stmt), env),
            //     env
            //   );
            // }
            "ev_variable_declaration",
            assign("unev", list(op("variable_declaration_name"), reg("exp"))),
            save("unev"), // save variable for later
            assign("exp", list(op("variable_declaration_value"), reg("exp"))),
            save("env"),
            save("continue"),
            assign("continue", label("ev_variable_declaration_1")),
            go_to(label("eval_dispatch")), // evaluate the declaration value

            "ev_variable_declaration_1",
            restore("continue"),
            restore("env"),
            restore("unev"),
            perform(list(op("declare_value"), reg("unev"), reg("val"), reg("env"))),
            assign("val", list(constant("ok"))),
            go_to(reg("continue")),

            "ev_constant_declaration",
            assign("unev", list(op("constant_declaration_name"), reg("exp"))),
            save("unev"), // save constant for later
            assign("exp", list(op("constant_declaration_value"), reg("exp"))),
            save("env"),
            save("continue"),
            assign("continue", label("ev_constant_declaration_1")),
            go_to(label("eval_dispatch")), // evaluate the declaration value

            "ev_constant_declaration_1",
            restore("continue"),
            restore("env"),
            restore("unev"),
            perform(list(op("declare_value"), reg("unev"), reg("val"), reg("env"))),
            assign("val", list(constant("ok"))),
            go_to(reg("continue")),

            // Error handling
            "unknown_expression_type",
            assign("val", list(constant("unknown_expression_type_error"))),
            go_to(label("signal_error")),

            "unknown_function_type",
            restore("continue"), /// clean up stack (from apply_dispatch)
            assign("val", list(constant("unknown_function_type_error"))),
            go_to(label("signal_error")),

            "signal_error",
            perform(list(op("user_print"), reg("val"))),
            go_to(label("evaluator_done")),

            "read_eval_print_loop",
            // perform(list(op("initialize_stack"))), /// Removed as it is already performed 
            perform(list(op("prompt_for_input"), constant("/// EC_Eval input:"))),
            assign("env", list(op("get_global_environment"))),
            assign("continue", list(label("print_result"))),
            go_to(label("eval_dispatch")),

            "print_result",
            perform(list(op("display"), constant(";;; EC_Eval value:"))),
            perform(list(op("user_print"), reg("val"))),
            //go_to(label("read_eval_print_loop")), /// Comment out to avoid infinite loop
            
            "evaluator_done"
        )
    );
}

const m = eceval();

/// FIXME: Handle differently
function prompt_for_input(p) {
    const program_block = make_block(parse("function plus(a,b) { return a + b; } plus(2,3);"));//prompt(p)));
    set_register_contents(m, "exp", program_block);
}

const the_global_environment = setup_environment();

start(m);

      </JAVASCRIPT_RUN>
      <JAVASCRIPT>
const the_global_environment = setup_environment();

start(eceval);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
;;; EC-Eval input:
function plus(a, b) {
    return a + b;
}
;;; EC-Eval value:
ok

;;; EC-Eval input:
plus(40, 2);
;;; EC-Eval value:
42
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Of course, evaluating expressions in this way will take much longer
    than if we had directly typed them into Scheme, because of the
    multiple levels of simulation involved.  Our expressions are evaluated
    by the explicit-control-evaluator machine, which is being simulated by
    a Scheme program, which is itself being evaluated by the Scheme
    interpreter.
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>running|)</SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING> 
    <NAME>Monitoring the performance of the evaluator</NAME>
  </SUBHEADING>

  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>simulation<SUBINDEX>machine@as machine-design tool</SUBINDEX></INDEX>
    Simulation can be a powerful tool to guide the implementation of
    evaluators.  Simulations make it easy not only to explore variations
    of the register-machine design but also to monitor the performance of
    the simulated evaluator.  For example, one important factor in
    performance is how efficiently the evaluator uses the stack.  We can
    observe the number of stack operations required to evaluate various
    expressions by defining the evaluator register machine with the
    version of the simulator that collects statistics on stack use
    (section<SPACE/><REF NAME="sec:monitor"/>), and adding an instruction at the
    evaluator<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-result</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_result</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    entry point to print the statistics:
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <SNIPPET LATEX="yes">
      <SCHEME EVAL="no">
      print-result
      (perform (op print-stack-statistics))<EM>; added instruction</EM>
      (perform
      (op announce-output) (const ";;; EC-Eval value:"))
      ^$\ldots$^ ; same as before
      </SCHEME>
      <JAVASCRIPT>
"print_result",
    perform(op("print_stack_statistics")), // added instruction
    perform(op("announce_output"), constant("/// EC-Eval value:")),
    $\ldots$  // same as before
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Interactions with the evaluator now look like this:
    <SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (factorial n)
(if (= n 1)
1
(* (factorial (- n 1)) n)))
(total-pushes = 3 maximum-depth = 3)
;;; EC-Eval value:
ok

;;; EC-Eval input:
(factorial 5)
(total-pushes = 144 maximum-depth = 28)
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
/// EC-Eval input:
function factorial (n) {
return n === 1 ?
1
n * factorial(n - 1); }
(total-pushes = 3 maximum-depth = 3)
/// EC-Eval value:
ok

/// EC-Eval input:
factorial(5);
(total-pushes = 144 maximum-depth = 28)
/// EC-Eval value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Note that the driver loop of the evaluator reinitializes the stack
    at the start of
    each interaction, so that the statistics printed will refer only to
    stack operations used to evaluate the previous expression.
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:tail-rec-fact"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    Use the monitored stack to explore the tail-recursive property of the
    evaluator (section<SPACE/><REF NAME="sec:sequence-evaluation"/>).  Start the
    evaluator and define the iterative <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    from section<SPACE/><REF NAME="sec:recursion-and-iteration"/>:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (define (iter product counter)
      (if (&gt; counter n)
            product
            (iter (* counter product)
            (+ counter 1))))
      (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter, max_count) {
        return counter &gt; max_count
               ? product
               : fact_iter(counter * product,
                           counter + 1,
                           max_count);
    }

    return iter(1, 1, n);
}
      </JAVASCRIPT>
    </SNIPPET>
    Run the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with some small values of <LATEXINLINE>$n$</LATEXINLINE>.  Record the
    maximum stack depth and the number of pushes required to compute
    <LATEXINLINE>$n!$</LATEXINLINE> for each of these values.
    <OL>
      <LI>
	You will find that the maximum depth required to evaluate
	<LATEXINLINE>$n!$</LATEXINLINE> is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  What is that depth?
      </LI>
      <LI>
	Determine from your data a formula in terms of
	<LATEXINLINE>$n$</LATEXINLINE> for the total number of push operations
	used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for any
	<LATEXINLINE>$n \geq 1$</LATEXINLINE>. Note that the number of
	operations used is a linear function of <LATEXINLINE>$n$</LATEXINLINE>
	and is thus determined by two constants.
      </LI>
    </OL>
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    For comparison with exercise<SPACE/><REF NAME="ex:tail-rec-fact"/>, explore
    the behavior of the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for computing factorials recursively:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    By running this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the monitored stack, determine, as a function of
    <LATEXINLINE>$n$</LATEXINLINE>, the maximum depth of the stack and the total
    number of pushes used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for
    <LATEXINLINE>$n \geq 1$</LATEXINLINE>.  (Again, these functions will be
    linear.)  Summarize your experiments by filling in the following table with
    the appropriate expressions in terms of <LATEXINLINE>$n$</LATEXINLINE>:
    <FIGURE src="img_original/527table.svg"></FIGURE>
    The maximum depth is a measure of the amount of space used by the
    evaluator in carrying out the computation, and the number of pushes
    correlates well with the time required.
    <LABEL NAME="ex:rec-fact"/>
  </EXERCISE>
      
  <EXERCISE>
    <LABEL NAME="ex:rec-fib"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    Modify the definition of the evaluator by changing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as described in section<SPACE/><REF NAME="sec:sequence-evaluation"/> so that
    the evaluator is no longer tail-recursive.  Rerun your experiments from
    exercises<SPACE/><REF NAME="ex:tail-rec-fact"/>
    and<SPACE/><REF NAME="ex:rec-fact"/> to demonstrate that both versions of
    the <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    now require space that grows linearly with their input.
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{fib}[stack usage, interpreted] -->
    Monitor the stack operations in the tree-recursive Fibonacci computation:
    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{fib}[tree-recursive version] -->
      (define (fib n)
      (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{fib}[tree-recursive version] -->
function fib(n) {
    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Give a formula in terms of <LATEXINLINE>$n$</LATEXINLINE> for the
	maximum depth of the stack required to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  Hint: In
	section<SPACE/><REF NAME="sec:tree-recursion"/> we argued that the space
	used by this process grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.
      </LI>
      <LI>
	Give a formula for the total number of pushes used to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  You should find that the number
	of pushes (which correlates well with the time used) grows exponentially
	with <LATEXINLINE>$n$</LATEXINLINE>.  Hint: Let
	<LATEXINLINE>$S(n)$</LATEXINLINE> be the number of pushes used in
	computing <LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE>.  You should be
	able to argue that there is a formula that expresses
	<LATEXINLINE>$S(n)$</LATEXINLINE> in terms of
	<LATEXINLINE>$S(n-1)$</LATEXINLINE>, <LATEXINLINE>$S(n-2)$</LATEXINLINE>,
	and some fixed <QUOTE>overhead</QUOTE> constant
	<LATEXINLINE>$k$</LATEXINLINE> that is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  Give the formula, and say what
	<LATEXINLINE>$k$</LATEXINLINE> is.  Then show that
	<LATEXINLINE>$S(n)$</LATEXINLINE> can be expressed as
	<LATEXINLINE>$a {\textrm{Fib}}(n+1) + b$</LATEXINLINE> and give the
	values of <LATEXINLINE>$a$</LATEXINLINE> and
	<LATEXINLINE>$b$</LATEXINLINE>.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|)</SUBINDEX></INDEX>

  <EXERCISE>
    <LABEL NAME="ex:interp-errors"/>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    Our evaluator currently catches and signals only two kinds of
    errors<EMDASH/>unknown expression types and unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    types.  Other errors will take us out of the evaluator read-eval-print loop.
    When we run the evaluator using the register-machine simulator, these
    errors are caught by the underlying Scheme system.  This is analogous
    to the computer crashing when a user program makes an
    error.<FOOTNOTE>Regrettably, this is the normal state of affairs in
    <INDEX>C<SUBINDEX>error handling</SUBINDEX></INDEX>
    conventional compiler-based language systems such as C.  
    <INDEX>UNIX</INDEX>
    <INDEX>DOS/Windows</INDEX>
    <INDEX>Macintosh</INDEX>
    In UNIX<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> the system <QUOTE>dumps
    core,</QUOTE> and in DOS/Windows<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE>
    it becomes catatonic. The
    Macintosh<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> displays a picture of
    an exploding bomb and offers you the opportunity to reboot the
    computer<EMDASH/>if you<APOS/>re lucky.</FOOTNOTE>  It is a large project to
    make a real error system work, but it is well worth the effort to understand
    what is involved here.
    <OL>
      <LI>
	Errors that occur in the evaluation process, such as an attempt to
	access an unbound variable, could be caught by changing the lookup
	operation to make it return a distinguished condition code, which cannot
	be a possible value of any user variable.  The evaluator can test
	for this condition code and then do what is necessary to go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	Find all of the places in the evaluator where such a
	change is necessary and fix them.  This is lots of work.
      </LI>
      <LI>
	Much worse is the problem of handling errors that are signaled by
	applying primitive
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	such as an attempt to divide by zero or an attempt to extract the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of a symbol.  In a professionally written high-quality system, each
	primitive application is checked for safety as part of the primitive.
	For example, every call to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	could first check that the argument is a pair.  If the argument is not
	a pair, the application would return a distinguished condition code to
	the evaluator, which would then report the failure.  We could arrange
	for this in our register-machine simulator by making each primitive
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	check for applicability and returning an appropriate distinguished
	condition code on failure. Then the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>primitive-apply</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>primitive_apply</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	code in the evaluator can check for the condition code and go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	if necessary.  Build this structure and make it work.
	This is a major project.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme|)</INDEX>
</SUBSECTION>
