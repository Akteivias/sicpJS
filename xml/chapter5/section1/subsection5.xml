<SUBSECTION>
  <NAME>
    Instruction Summary
  </NAME>

  <LABEL NAME="sec:instruction-summary"/>
  <INDEX>register-machine language<SUBINDEX>instructions</SUBINDEX></INDEX>

  <TEXT>
    <INDEX>register-machine language<SUBINDEX><USE>reg</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>constant</USE></SUBINDEX></INDEX>
    A controller instruction in our register-machine language
    has one of the following forms, where each
    <LATEXINLINE>$\textit{input}_i$</LATEXINLINE> is either
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(reg ^register-name^)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>reg(</JAVASCRIPTINLINE><LATEXINLINE>$\OptionalPar{register-name}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(const ^constant-value^)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant(</JAVASCRIPTINLINE><LATEXINLINE>$\OptionalPar{constant-value}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
      </SPLITINLINE>
  </TEXT>

  <TEXT>
    These instructions were introduced in
    section<SPACE/><REF NAME="sec:register-machine-language"/>:
    <INDEX>register-machine language<SUBINDEX><USE>assign</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>op</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>perform</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>test</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>branch</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>label</USE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>register-machine language<SUBINDEX><USE>goto</USE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>register-machine language<SUBINDEX><USE>go_to</USE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign ^register-name^ (reg ^register-name^))

(assign ^register-name^ (const ^constant-value^))

(assign ^register-name^ (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(perform (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(test (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(branch (label ^label-name^))

(goto (label ^label-name^))
      </SCHEME>
      <JAVASCRIPT>
assign($\OptionalPar{register-name}$, reg($\OptionalPar{register-name}$))

assign($\OptionalPar{register-name}$, constant($\OptionalPar{constant-value}$))

assign($\OptionalPar{register-name}$, list(op($\OptionalPar{operation-name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

perform(list(op($\OptionalPar{operation-name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

test(list(op($\OptionalPar{operation-name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

branch(label($\OptionalPar{label-name}$))

go_to(label($\OptionalPar{label-name}$))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The use of registers to hold labels was introduced in
    section<SPACE/><REF NAME="sec:subroutines"/>:
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign ^register-name^ (label ^label-name^))

(goto (reg ^register-name^))
      </SCHEME>
      <JAVASCRIPT>
assign($\OptionalPar{register-name}$, label($\OptionalPar{label-name}$))

go_to(reg($\OptionalPar{register-name}$))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Instructions to use the stack were introduced in
    section<SPACE/><REF NAME="sec:stack-recursion"/>:
    <INDEX>register-machine language<SUBINDEX><USE>save</USE></SUBINDEX></INDEX>
    <INDEX>register-machine language<SUBINDEX><USE>restore</USE></SUBINDEX></INDEX>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(save ^register-name^)

(restore ^register-name^)
      </SCHEME>
      <JAVASCRIPT>
save($\OptionalPar{register-name}$)

restore($\OptionalPar{register-name}$)
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>register-machine language<SUBINDEX><USE>constant</USE></SUBINDEX></INDEX>
    <INDEX><USE>constant</USE> (in register machine)<SUBINDEX>syntax of</SUBINDEX></INDEX>
    <INDEX>constant, specifying in register machine</INDEX>
    The only kind of
    <SPLITINLINE>
      <SCHEME>
	<LATEXINLINE>$\langle constant-value \rangle$</LATEXINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<LATEXINLINE>$\OptionalPar{constant-value}$</LATEXINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    we have seen so far is a number, but later we will use
    <SPLITINLINE>
      <SCHEME>strings, symbols,</SCHEME>
      <JAVASCRIPT>strings</JAVASCRIPT>
    </SPLITINLINE>
    and lists.
    For example,
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(const<SPACE/>abc)</SCHEMEINLINE> is the symbol
	<SCHEMEINLINE>abc</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant("abc")</JAVASCRIPTINLINE>
	is the string <SCHEMEINLINE>"abc"</SCHEMEINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(const<SPACE/>(a b c))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant(list(a, b, c))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(a b c)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(a, b, c)</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(const<SPACE/>())</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>constant(null)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the empty list.
    <INDEX>register machine<SUBINDEX>design of<CLOSE/></SUBINDEX></INDEX>
  </TEXT>
</SUBSECTION>
