<SUBSECTION>
  <NAME>
    Instruction Summary
  </NAME>

  <LABEL NAME="sec:instruction-summary"/>
  <INDEX>register-machine language<SUBINDEX>instructions</SUBINDEX></INDEX>

  <TEXT>
    <INDEX>register-machine language
    <SUBINDEX>reg@<SCHEMEINLINE>reg</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>const@<SCHEMEINLINE>const</SCHEMEINLINE></SUBINDEX></INDEX>
    A controller instruction in our register-machine language
    has one of the following forms, where each
    <LATEXINLINE>$\textit{input}_i$</LATEXINLINE> is either
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(reg ^register-name^)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>reg(</JAVASCRIPTINLINE><LATEXINLINE>$\OptionalPar{register-name}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    or
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(const ^constant-value^)</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant(</JAVASCRIPTINLINE><LATEXINLINE>$\OptionalPar{constant-value}$</LATEXINLINE><JAVASCRIPTINLINE>)</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
      </SPLITINLINE>
  </TEXT>

  <TEXT>
    These instructions were introduced in
    section<SPACE/><REF NAME="sec:register-machine-language"/>:
    <INDEX>register-machine language
    <SUBINDEX>assign@<SCHEMEINLINE>assign</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>op@<SCHEMEINLINE>op</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>perform@<SCHEMEINLINE>perform</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>test@<SCHEMEINLINE>test</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>branch@<SCHEMEINLINE>branch</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>label@<SCHEMEINLINE>label</SCHEMEINLINE></SUBINDEX></INDEX>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>register-machine language
	<SUBINDEX>goto@<SCHEMEINLINE>goto</SCHEMEINLINE></SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>register-machine language
	<SUBINDEX>goto@<JAVASCRIPTINLINE>go_to</JAVASCRIPTINLINE></SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign ^register-name^ (reg ^register-name^))

(assign ^register-name^ (const ^constant-value^))

(assign ^register-name^ (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(perform (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(test (op ^operation-name^) ^input$_{1}$^ ^$\ldots$^ ^input$_{n}$^)

(branch (label ^label-name^))

(goto (label ^label-name^))
      </SCHEME>
      <JAVASCRIPT>
assign($\OptionalPar{register_name}$, reg($\OptionalPar{register_name}$))

assign($\OptionalPar{register_name}$, constant($\OptionalPar{constant_value}$))

assign($\OptionalPar{register_name}$, list(op($\OptionalPar{operation_name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

perform(list(op($\OptionalPar{operation_name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

test(list(op($\OptionalPar{operation_name}$), $\OptionalPar[1]{input}$, $\ldots$, $\OptionalPar[n]{input}$))

branch(label($\OptionalPar{label_name}$))

go_to(label($\OptionalPar{label_name}$))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The use of registers to hold labels was introduced in
    section<SPACE/><REF NAME="sec:subroutines"/>:
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(assign ^register-name^ (label ^label-name^))

(goto (reg ^register-name^))
      </SCHEME>
      <JAVASCRIPT>
assign($\OptionalPar{register_name}$, label($\OptionalPar{label_name}$))

go_to(reg($\OptionalPar{register_name}$))
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Instructions to use the stack were introduced in
    section<SPACE/><REF NAME="sec:stack-recursion"/>:
    <INDEX>register-machine language
    <SUBINDEX>save@<SCHEMEINLINE>save</SCHEMEINLINE></SUBINDEX></INDEX>
    <INDEX>register-machine language
    <SUBINDEX>restore@<SCHEMEINLINE>restore</SCHEMEINLINE></SUBINDEX></INDEX>
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(save ^register-name^)

(restore ^register-name^)
      </SCHEME>
      <JAVASCRIPT>
save($\OptionalPar{register_name}$)

restore($\OptionalPar{register_name}$)
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>register-machine language
    <SUBINDEX>const@<SCHEMEINLINE>const</SCHEMEINLINE></SUBINDEX></INDEX>
    <!-- \indcodeplus{const}{(in register machine)}[syntax of]-->
    <INDEX>constant@constant, specifying in register machine</INDEX>
    The only kind of
    <SPLITINLINE>
      <SCHEME>
	<LATEXINLINE>$\langle constant-value \rangle$</LATEXINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<LATEXINLINE>$\OptionalPar{constant_value}$</LATEXINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    we have seen so far is a number, but later we will use
    <SPLITINLINE>
      <SCHEME>strings, symbols,</SCHEME>
      <JAVASCRIPT>strings</JAVASCRIPT>
    </SPLITINLINE>
    and lists.
    For example,
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(const<SPACE/>abc)</SCHEMEINLINE> is the symbol
	<SCHEMEINLINE>abc</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant("abc")</JAVASCRIPTINLINE>
	is the string <SCHEMEINLINE>"abc"</SCHEMEINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>(const<SPACE/>(a b c))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>constant(list(a, b, c))</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is the list
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(a b c)</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>list(a, b, c)</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(const<SPACE/>())</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
      <JAVASCRIPTINLINE>constant(null)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    is the empty list.
    <INDEX>register machine<SUBINDEX>design of|)</SUBINDEX></INDEX>
  </TEXT>
</SUBSECTION>
