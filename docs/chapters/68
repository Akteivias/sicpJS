<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="3.5.2 
    Infinite Streams
  " />
    <title>
         3.5.2 
    Infinite Streams
  
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="yrivQFVXdqqOFtcbg11uN8y9fhI2NyUMeoewDaSFrZgW7hx7MjzIfWRIanktvy6QeN0INtNVHhy84+Hghn2cjQ==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-f313219f7bd4d132a6fd02c8f84b86f62781f5d155b9681036fc6390c9f3d06c.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments from Second Edition of SICP, 1996    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">Making of the JavaScript Adaptation</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">3.5.2 
    Infinite Streams
  </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
  

  
  
  <div class="permalink">
<a name="p1" class="permalink"></a><p>
    We have seen how to support the illusion of manipulating streams
    as complete entities even though, in actuality, we compute only
    as much of the stream as we need to access.  We can exploit this
    technique to represent sequences efficiently as streams, even if the
    sequences are very long.  What is more striking, we can use streams to
    represent sequences that are infinitely long.  For instance, consider
    the following definition of the stream of positive integers:

    <div class="snippet" id="javascript_68_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function integers_starting_from(n) {\n    return pair(n,\n                () =&gt; integers_starting_from(n + 1)\n               );\n}'+'\n'+'\neval_stream(integers_starting_from(7), 30);\n      '+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function integers_starting_from(n) {
    return pair(n,
                () =&gt; integers_starting_from(n + 1)
               );
}</pre></div></div>

    
  </p>
</div>

  <div class="permalink">
<a name="p2" class="permalink"></a><p>
    This makes sense because <kbd>integers</kbd> will be a pair whose
    
      
      <kbd>head</kbd>
    
    is 1 and whose
    
      
      <kbd>tail</kbd>
    
    is a promise to produce the integers beginning with 2. This is an infinitely long
    stream, but in any given time we can examine only a finite portion of it.  Thus,
    our programs will never know that the entire infinite stream is not there.
  </p>
</div>

  <div class="permalink">
<a name="p3" class="permalink"></a><p>
    Using <kbd>integers</kbd> we can define other infinite streams, such as
    the stream of integers that are not divisible by 7:

    <div class="snippet" id="javascript_68_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_filter(pred, s) {\n    return is_null(s)\n           ? null\n           : pred(head(s))\n             ? pair(head(s),\n                    () =&gt; stream_filter(pred, \n                                        stream_tail(s)))\n             : stream_filter(pred,\n                             stream_tail(s));\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    \nconst ones = pair(1, () =&gt; ones);\n      \nconst integers = pair(1, () =&gt; add_streams(ones, integers));\n      '+'\n'+'function is_divisible(x, y) {\n    return x % y === 0;\n}\n\nconst no_sevens =\n    stream_filter(x =&gt; ! is_divisible(x, 7),\n                  integers);'+'\n'+'\neval_stream(no_sevens, 23);\n      '+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function is_divisible(x, y) {
    return x % y === 0;
}

const no_sevens =
    stream_filter(x =&gt; ! is_divisible(x, 7),
                  integers);</pre></div></div>

    


  </p>
</div>

  <div class="permalink">
<a name="p4" class="permalink"></a><p>
    Then we can find integers not divisible by 7 simply by accessing
    elements of this stream:

    <div class="snippet" id="javascript_68_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_filter(pred, s) {\n    return is_null(s)\n           ? null\n           : pred(head(s))\n             ? pair(head(s),\n                    () =&gt; stream_filter(pred, \n                                        stream_tail(s)))\n             : stream_filter(pred,\n                             stream_tail(s));\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    \nconst ones = pair(1, () =&gt; ones);\n      \nconst integers = pair(1, () =&gt; add_streams(ones, integers));\n      \nfunction is_divisible(x, y) {\n    return x % y === 0;\n}\n\nconst no_sevens =\n    stream_filter(x =&gt; ! is_divisible(x, 7),\n                  integers);\n      '+'\n'+'stream_ref(no_sevens, 100);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">stream_ref(no_sevens, 100);</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p5" class="permalink"></a><p>
    In analogy with <kbd>integers</kbd>, we can define the infinite stream of
    Fibonacci numbers:

    <div class="snippet" id="javascript_68_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function fibgen(a, b) {\n    return pair(a, () =&gt; fibgen(b, a + b));\n}\n\nconst fibs = fibgen(0, 1);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function fibgen(a, b) {
    return pair(a, () =&gt; fibgen(b, a + b));
}

const fibs = fibgen(0, 1);</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p6" class="permalink"></a><p>
    
      
      The function <kbd>fibs</kbd>
    
    is a pair whose
    
      
      <kbd>head</kbd>
    
    is 0 and whose
    
      
      <kbd>tail</kbd>
    
    is a promise to evaluate
    
      
      <kbd>fibgen(1, 1)</kbd>.
    
    When we evaluate this delayed
    
      
      <kbd>fibgen(1, 1)</kbd>,
    
    it will produce a pair whose
    
      
      <kbd>head</kbd>
    
    is 1 and whose
    
      
      <kbd>tail</kbd>
    
    is a promise to evaluate
    
      
      <kbd>fibgen(1, 2)</kbd>,
    
    and so on.
  </p>
</div>

  <div class="permalink">
<a name="p7" class="permalink"></a><p>
    
    For a look at a more exciting infinite stream, we can generalize the
    
      
      <kbd>no_sevens</kbd>
    
    example to construct the infinite stream of prime
    numbers, using a method known as the
    
    <EM>sieve of
    Eratosthenes</EM>.<a class="superscript" id="footnote-link-1" href="68#footnote-1">[1]</a>
    We start with the integers beginning with 2, which is the first prime.
    To get the rest of the primes, we start by filtering the multiples of
    2 from the rest of the integers.  This leaves a stream beginning with
    3, which is the next prime.  Now we filter the multiples of 3 from the
    rest of this stream.  This leaves a stream beginning with 5, which is
    the next prime, and so on.  In other words, we construct the primes by
    a sieving process, described as follows: To sieve a stream
    <kbd>S</kbd>,
    form a stream whose first element is the first element of
    <kbd>S</kbd> and
    the rest of which is obtained by filtering all multiples of the first element
    of <kbd>S</kbd> out of the rest of
    <kbd>S</kbd> and sieving the result. This
    process is readily described in terms of stream operations:

    
    <div class="snippet" id="javascript_68_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_filter(pred, s) {\n    return is_null(s)\n           ? null\n           : pred(head(s))\n             ? pair(head(s),\n                    () =&gt; stream_filter(pred, \n                                        stream_tail(s)))\n             : stream_filter(pred,\n                             stream_tail(s));\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    \nconst ones = pair(1, () =&gt; ones);\n      \nconst integers = pair(1, () =&gt; add_streams(ones, integers));\n      \nfunction is_divisible(x, y) {\n    return x % y === 0;\n}\n\nconst no_sevens =\n    stream_filter(x =&gt; ! is_divisible(x, 7),\n                  integers);\n      '+'\n'+'function sieve(stream) {\n    return pair(head(stream),\n                () =&gt; sieve(stream_filter(\n                                x =&gt; !is_divisible(x,\n                                          head(stream)),\n			        stream_tail(stream)\n			       )\n                           )\n	       );\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function sieve(stream) {
    return pair(head(stream),
                () =&gt; sieve(stream_filter(
                                x =&gt; !is_divisible(x,
                                          head(stream)),
			        stream_tail(stream)
			       )
                           )
	       );
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p8" class="permalink"></a><p>
    Now to find a particular prime we need only ask for it:

    <div class="snippet" id="javascript_68_5_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">stream_ref(primes, 50);</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p9" class="permalink"></a><p>
    It is interesting to contemplate the signal-processing system set up
    by <kbd>sieve</kbd>, shown in the
    
    <QUOTE>Henderson diagram</QUOTE> in
    Figure <REF NAME="fig:primesieve"><a class="superscript" id="3.5.2-fig-link-3.31" href="68#fig_3.31">3.31</a></REF>.<a class="superscript" id="footnote-link-2" href="68#footnote-2">[2]</a>
    The input stream feeds into an
    <QUOTE>un<kbd>pair</kbd>er</QUOTE> that separates the first element of the stream from the
    rest of the stream.
    The first element is used to construct a divisibility filter, through
    which the rest is passed, and the output of the filter is fed to
    another sieve box.  Then the original first element is <kbd>pair</kbd>ed onto the
    output of the internal sieve to form the output stream.  Thus, not
    only is the stream infinite, but the signal processor is also
    infinite, because the sieve contains a sieve within it.

    <FIGURE>
      <img src="img_original/ch3-Z-G-35.svg">
      <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_3.31" href="68#fig_3.31">Figure 3.31 </a></b>The prime sieve viewed as a signal-processing system.
      </div>
      
    </FIGURE>

  </p>
</div>

  <div class="permalink">
<a name="h1" class="permalink"></a><h2>
    Defining streams implicitly
  </h2>
</div>

  

  <div class="permalink">
<a name="p10" class="permalink"></a><p>
    The <kbd>integers</kbd> and <kbd>fibs</kbd>
    streams above were defined by specifying <QUOTE>generating</QUOTE>
    functions
    that explicitly compute the
    stream elements one by one. An alternative way to specify streams is
    to take advantage of delayed evaluation to define streams implicitly.
    For example, the following expression defines the stream
    <kbd>ones</kbd> to be an infinite stream of ones:

    <div class="snippet" id="javascript_68_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const ones = pair(1, () =&gt; ones);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const ones = pair(1, () =&gt; ones);</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p11" class="permalink"></a><p>
    This works much like the definition of a recursive
    function: <kbd>ones</kbd> is a pair whose <kbd>head</kbd> is 1 and whose <kbd>tail</kbd> is a promise
    to evaluate <kbd>ones</kbd>.  Evaluating the <kbd>tail</kbd> gives us again a 1
    and a promise to evaluate <kbd>ones</kbd>, and so on.
  </p>
</div>

  <div class="permalink">
<a name="p12" class="permalink"></a><p>
    We can do more interesting things by manipulating streams with
    operations such as
    <kbd>add_streams</kbd>,
    which produces the elementwise
    sum of two given streams:<a class="superscript" id="footnote-link-3" href="68#footnote-3">[3]</a>

  <div class="snippet" id="javascript_68_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  '+'\n'+'function add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function add_streams(s1, s2) {
    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);
}</pre></div></div>
  </p>
</div>
      
  <div class="permalink">
<a name="p13" class="permalink"></a><p>
    Now we can define the integers as follows:

    <div class="snippet" id="javascript_68_8_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    \nconst ones = pair(1, () =&gt; ones);\n      '+'\n'+'const integers = pair(1, () =&gt; add_streams(ones, integers));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const integers = pair(1, () =&gt; add_streams(ones, integers));</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p14" class="permalink"></a><p>
    This defines <kbd>integers</kbd> to be a stream whose first element is 1
    and the rest of which is the sum of <kbd>ones</kbd> and
    <kbd>integers</kbd>.  Thus, the
    second element of <kbd>integers</kbd> is 1 plus the first element of
    <kbd>integers</kbd>,
    or 2; the third element of <kbd>integers</kbd> is 1 plus the second
    element of <kbd>integers</kbd>, or 3; and so on.  This definition works
    because, at any point, enough of the <kbd>integers</kbd> stream has been
    generated so that we can feed it back into the definition to produce
    the next integer.
  </p>
</div>

  <div class="permalink">
<a name="p15" class="permalink"></a><p>
    We can define the Fibonacci numbers in the same style:

    <div class="snippet" id="javascript_68_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    '+'\n'+'const fibs = pair(0,\n                  () =&gt; pair(1,\n                             () =&gt; add_streams(fibs,\n                                               stream_tail(fibs))\n                            )\n                 );'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const fibs = pair(0,
                  () =&gt; pair(1,
                             () =&gt; add_streams(fibs,
                                               stream_tail(fibs))
                            )
                 );</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p16" class="permalink"></a><p>
    This definition says that <kbd>fibs</kbd> is a stream beginning
    with 0 and 1, such that the rest of the stream can be generated by adding
    <kbd>fibs</kbd> to itself shifted by one place:
    <SPLIT>
      
      
        <img src="img_tex/ch3_5_2-1.png">
      
    </SPLIT>
  </p>
</div>

  <div class="permalink">
<a name="p17" class="permalink"></a><p>
    The function
      <kbd>scale_stream</kbd>
    is also useful
    in formulating such stream definitions.
    This multiplies each item in a stream by a given
    constant:

    <div class="snippet" id="javascript_68_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  '+'\n'+'function scale_stream(stream, factor) {\n    return stream_map(x =&gt; x * factor,\n                      stream);\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function scale_stream(stream, factor) {
    return stream_map(x =&gt; x * factor,
                      stream);
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p18" class="permalink"></a><p>
    For example,
    <div class="snippet" id="javascript_68_11_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction scale_stream(stream, factor) {\n    return stream_map(x =&gt; x * factor,\n                      stream);\n}\n      '+'\n'+'const double = pair(1, () =&gt; scale_stream(double, 2));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const double = pair(1, () =&gt; scale_stream(double, 2));</pre></div></div>
    produces the stream of powers of 2: $1, 2, 4, 8, 16, 32,$ ….
  </p>
</div>

  <div class="permalink">
<a name="p19" class="permalink"></a><p>
    An alternate definition of the stream of primes can be given by
    starting with the integers and filtering them by testing for
    primality.  We will need the first prime, 2, to get started:

    <div class="snippet" id="javascript_68_12_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \nfunction smallest_divisor(n) {\n    return find_divisor(n, 2);\n}\nfunction find_divisor(n, test_divisor) {\n     return square(test_divisor) &gt; n\n            ? n\n            : divides(test_divisor, n)\n              ? test_divisor\n              : find_divisor(n, test_divisor + 1);\n}\nfunction divides(a, b) {\n    return b % a === 0;\n}\n          \nfunction is_prime(n) {\n    return n === smallest_divisor(n);\n}\n          \nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_filter(pred, s) {\n    return is_null(s)\n           ? null\n           : pred(head(s))\n             ? pair(head(s),\n                    () =&gt; stream_filter(pred, \n                                        stream_tail(s)))\n             : stream_filter(pred,\n                             stream_tail(s));\n}\n	  \nfunction integers_starting_from(n) {\n    return pair(n,\n                () =&gt; integers_starting_from(n + 1)\n               );\n}\n      '+'\n'+'const primes = pair(2,\n                    () =&gt; stream_filter(\n                              is_prime, \n			      integers_starting_from(3))\n		   );'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const primes = pair(2,
                    () =&gt; stream_filter(
                              is_prime, 
			      integers_starting_from(3))
		   );</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p20" class="permalink"></a><p>
    This definition is not so straightforward as it appears, because we
    will test whether a number $n$ is prime by
    checking whether $n$ is
    divisible by a prime (not by just any integer) less than or equal to
    $\sqrt{n}$:

    <div class="snippet" id="javascript_68_13_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_filter(pred, s) {\n    return is_null(s)\n           ? null\n           : pred(head(s))\n             ? pair(head(s),\n                    () =&gt; stream_filter(pred, \n                                        stream_tail(s)))\n             : stream_filter(pred,\n                             stream_tail(s));\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    \nconst ones = pair(1, () =&gt; ones);\n      \nconst integers = pair(1, () =&gt; add_streams(ones, integers));\n      \nfunction is_divisible(x, y) {\n    return x % y === 0;\n}\n\nconst no_sevens =\n    stream_filter(x =&gt; ! is_divisible(x, 7),\n                  integers);\n      \nfunction smallest_divisor(n) {\n    return find_divisor(n, 2);\n}\nfunction find_divisor(n, test_divisor) {\n     return square(test_divisor) &gt; n\n            ? n\n            : divides(test_divisor, n)\n              ? test_divisor\n              : find_divisor(n, test_divisor + 1);\n}\nfunction divides(a, b) {\n    return b % a === 0;\n}\n          \nfunction is_prime(n) {\n    return n === smallest_divisor(n);\n}\n          \nfunction integers_starting_from(n) {\n    return pair(n,\n                () =&gt; integers_starting_from(n + 1)\n               );\n}\n      \nconst primes = pair(2,\n                    () =&gt; stream_filter(\n                              is_prime, \n			      integers_starting_from(3))\n		   );\n      '+'\n'+'function is_prime(n) {\n    function iter(ps) {\n        return square(head(ps)) &gt; n\n               ? true\n               : is_divisible(n, head(ps))\n                 ? false\n                 : iter(stream_tail(ps));\n    }\n    return iter(primes);\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function is_prime(n) {
    function iter(ps) {
        return square(head(ps)) &gt; n
               ? true
               : is_divisible(n, head(ps))
                 ? false
                 : iter(stream_tail(ps));
    }
    return iter(primes);
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p21" class="permalink"></a><p>
    This is a recursive definition, since <kbd>primes</kbd> is defined in terms
    of the
    <kbd>is_prime</kbd>
    predicate,
    which itself uses the <kbd>primes</kbd>
    stream.  The reason this
    function
    works is that, at any point, enough
    of the <kbd>primes</kbd> stream has been generated to test the primality of
    the numbers we need to check next.  That is, for every $n$ we test for
    primality, either $n$ is not prime (in which case there is a prime
    already generated that divides it) or $n$ is prime (in which case
    there is a prime already generated—i.e., a prime less than
    $n$—that is greater than $\sqrt{n}$).<a class="superscript" id="footnote-link-4" href="68#footnote-4">[4]</a>
    
  </p>
</div>

  <div class="permalink">
<a name="ex_3.53" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.53">Exercise 3.53 </a></b>
    Without running the program, describe the elements of the
    stream defined by
    <div class="snippet" id="javascript_68_14_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction stream_ref(s, n) {\n    return n === 0\n           ? head(s)\n           : stream_ref(stream_tail(s), n - 1);\n}\nfunction stream_map(f, s) {\n    return is_null(s)\n           ? null\n           : pair(f(head(s)),\n                  () =&gt; stream_map(f, stream_tail(s)));\n}\nfunction stream_for_each(fun, s) {\n    if (is_null(s)) {\n        return true;\n    } else {\n        fun(head(s));\n        return stream_for_each(fun, stream_tail(s));\n    }\n}\n	  \nfunction stream_combine(f, s1, s2) {\n    return is_null(s1) &amp;&amp; is_null(s2)\n        ? null\n        : is_null(s1) || is_null(s2)\n        ? error(null, &quot;unexpected null in stream_combine&quot;)\n        : pair(f(head(s1),head(s2)), \n               () =&gt; stream_combine(f, stream_tail(s1),\n                                       stream_tail(s2)));\n}	  	\n	  \nfunction add_streams(s1, s2) {\n    return stream_combine((x1, x2) =&gt; x1 + x2, s1, s2);\n}\n    '+'\n'+'const s = pair(1, () =&gt; add_streams(s, s));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const s = pair(1, () =&gt; add_streams(s, s));</pre></div></div>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.54" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.54">Exercise 3.54 </a></b>
    Define a
    function

    
    
    
    <kbd>mul_streams</kbd>,
    analogous to
    <kbd>add_streams</kbd>,
    that produces the elementwise product of its two input streams.
    Use this together with the stream of <kbd>integers</kbd> to complete the
    following definition of the stream whose $n$th element (counting from 0)
    is $n+1$ factorial:
    <div class="snippet" id="javascript_68_15_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// mul_streams to be written by students\nconst factorials = pair(1, () =&gt; mul_streams(???, ???));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">// mul_streams to be written by students
const factorials = pair(1, () =&gt; mul_streams(???, ???));</pre></div></div>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.55" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.55">Exercise 3.55 </a></b>
    Define a
    function
    
    
      
      <kbd>partial_sums</kbd>
    
    that takes as argument a
    stream $S$ and returns the stream whose
    elements are $S_0, S_0+S_1, S_0+S_1+S_2,$ ….
    For example,
    
      
      <kbd>partial_sums(integers)</kbd>
     should be the stream
    $1, 3, 6, 10, 15,$ ….
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.56" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.56">Exercise 3.56 </a></b>
    A famous problem, first raised by
    
    R. Hamming, is to enumerate, in
    ascending order with no repetitions, all positive integers with no
    prime factors other than 2, 3, or 5.  One obvious way to do this is to
    simply test each integer in turn to see whether it has any factors
    other than 2, 3, and 5.  But this is very inefficient, since, as the
    integers get larger, fewer and fewer of them fit the requirement.  As
    an alternative, let us call the required stream of numbers <kbd>S</kbd> and
    notice the following facts about it.
    <UL>
      <LI>
        <kbd>S</kbd> begins with 1.

      </LI>
      <LI>
        The elements of <kbd>scale_stream(S, 2)</kbd> are also
        elements of <kbd>S</kbd>.

      </LI>
      <LI>
        The same is true for <kbd>scale_stream(S, 3)</kbd>
        and <kbd>scale_stream(5, S)</kbd>.

      </LI>
      <LI>
        These are all the elements of <kbd>S</kbd>.
      </LI>
    </UL>

    
    Now all we have to do is combine elements from these sources.
    For this we define a
    function
    <kbd>merge</kbd> that combines two ordered
    streams into one ordered result stream, eliminating repetitions:

    <div class="snippet" id="javascript_68_16_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  '+'\n'+'function merge(s1, s2) {\n    if (is_null(s1)) {\n        return s2;\n    } else if (is_null(s2)) {\n        return s1;\n    } else {\n        const s1head = head(s1);\n        const s2head = head(s2);\n        if (s1head &lt; s2head) {\n            return pair(s1head,\n                        () =&gt; merge(stream_tail(s1), s2)\n                       );\n        } else if (s1head &gt; s2head) {\n            return pair(s2head,\n                        () =&gt; merge(s1, stream_tail(s2))\n                       );\n        } else {\n            return pair(s1head,\n                        () =&gt; merge(stream_tail(s1), stream_tail(s2));\n        }\n    }\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function merge(s1, s2) {
    if (is_null(s1)) {
        return s2;
    } else if (is_null(s2)) {
        return s1;
    } else {
        const s1head = head(s1);
        const s2head = head(s2);
        if (s1head &lt; s2head) {
            return pair(s1head,
                        () =&gt; merge(stream_tail(s1), s2)
                       );
        } else if (s1head &gt; s2head) {
            return pair(s2head,
                        () =&gt; merge(s1, stream_tail(s2))
                       );
        } else {
            return pair(s1head,
                        () =&gt; merge(stream_tail(s1), stream_tail(s2));
        }
    }
}</pre></div></div>

    Then the required stream may be constructed with <kbd>merge</kbd>, as
    follows:

    <div class="snippet" id="javascript_68_17_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction stream_tail(stream) {\n    return tail(stream)();\n}\n	  \nfunction merge(s1, s2) {\n    if (is_null(s1)) {\n        return s2;\n    } else if (is_null(s2)) {\n        return s1;\n    } else {\n        const s1head = head(s1);\n        const s2head = head(s2);\n        if (s1head &lt; s2head) {\n            return pair(s1head,\n                        () =&gt; merge(stream_tail(s1), s2)\n                       );\n        } else if (s1head &gt; s2head) {\n            return pair(s2head,\n                        () =&gt; merge(s1, stream_tail(s2))\n                       );\n        } else {\n            return pair(s1head,\n                        () =&gt; merge(stream_tail(s1), stream_tail(s2));\n        }\n    }\n}\n      '+'\n'+'const S = pair(1, () =&gt; merge(??, ??));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const S = pair(1, () =&gt; merge(??, ??));</pre></div></div>

    Fill in the missing expressions in the places marked ?? above.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.57" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.57">Exercise 3.57 </a></b>
    
    How many additions are performed when we compute the $n$th
    Fibonacci number using the definition of <kbd>fibs</kbd> based on the
    
      
      <kbd>add_streams</kbd>
    
    
      
      function, implemented using
      <kbd>pair(..., () =&gt; ...)</kbd>
      as described in the beginning of
      section <REF NAME="sec:delayed-lists"><a class="superscript" id="3.5.2-sec-link-3.5.1" href="67">3.5.1</a></REF>?
    
    
      
      
	Show that the number of additions is
	exponentially greater than if we had implemented
	<kbd>add_streams</kbd>
	using the optimization using
	<kbd>pair(..., memo( () =&gt; ... ))</kbd>
	described in the last part of
      
    
	section <REF NAME="sec:delayed-lists"><a class="superscript" id="3.5.2-sec-link-3.5.1" href="67">3.5.1</a></REF>.<a class="superscript" id="footnote-link-5" href="68#footnote-5">[5]</a>
    
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.58" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.58">Exercise 3.58 </a></b>
    Give an interpretation of the stream computed by the 
    
      
      function
    :

    <div class="snippet" id="javascript_68_18_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function expand(num, den, radix) {	\n    return pair(quotient(num * radix, den),\n                expand((num * radix) % den, den, radix));\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">function expand(num, den, radix) {	
    return pair(quotient(num * radix, den),
                expand((num * radix) % den, den, radix));
}</pre></div></div>

    
    
    
      
      
	where the function <kbd>quotient</kbd> computes 
	integer division, in which the fractional part (remainder) is discarded.
      
    
    What are the successive elements produced by
    
      
      
	<kbd>expand(1, 7, 10)</kbd>$\,$?
      
    
    What is produced by
    
      
      
	<kbd>expand(3, 8, 10)</kbd>$\,$?
      
    
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.59" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.59">Exercise 3.59 </a></b>
    
  
  
  In section <REF NAME="sec:symbolic-algebra"><a class="superscript" id="3.5.2-sec-link-2.5.3" href="46">2.5.3</a></REF> we saw how to implement a
  polynomial arithmetic system representing polynomials as lists of
  terms.  In a similar way, we can work with <EM>power series</EM>, such as
  
  
    \[ e^{x} =
    1+x+\frac{x^{2}}{2}+\frac{x^{3}}{3\cdot2}+\frac{x^{4}}{4\cdot 3\cdot 2}+\cdots, \]
  
  
  
    \[ \cos x =1-\frac{x^{2}}{2}+\frac{x^{4}}{4\cdot 3\cdot 2}-\cdots, \]
  
  
  
    \[ \sin x =x-\frac{x^{3}}{3\cdot 2}+\frac{x^{5}}{5\cdot 4\cdot 3\cdot 2}- \cdots, \]
  
  represented as infinite streams.
  We will represent the series
  $a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \cdots$
  as the stream whose elements are the coefficients $a_0, a_1, a_2, a_3,$ ….
  
  
  <OL>
    <LI>
      The integral of the series $a_0 + a_1 x + a_2 x^2 + a_3 x^3 + \cdots$
      is the series
      
        \[ c + a_0 x + \frac{1}{2}a_1 x^2 + \frac{1}{3}a_2 x^3 + \frac{1}{4}a_3
        x^4 + \cdots \]
      
      where $c$ is any constant.
      Define a
      function
      
      
	
	<kbd>integrate_series</kbd>
      
      that takes as input a stream
      $a_0, a_1, a_2,$ … representing
      a power series and returns the stream
      $a_0, \frac{1}{2}a_1, \frac{1}{3}a_2,$
      … of coefficients of the non-constant terms of the integral of the series.
      (Since the result has no constant term, it doesn't represent a power
      series; when we use <kbd>integrate-series</kbd>,
      we will
      
	
	<kbd>pair</kbd> with
      
      the appropriate constant.)
    </LI>
    <LI>
      The function $x\mapsto e^x$ is its own
      derivative.  This implies that $e^x$ and the integral
      of $e^x$ are the
      same series, except for the constant term, which is $e^0 = 1$.
      Accordingly, we can generate the series for
      $e^x$ as
      <div class="snippet" id="javascript_68_19_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const exp_series = \n    pair(1, () =&gt; integrate_series(exp_series));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=3&amp;ext=STREAMS&amp;prgrm='+compressed; window.open(url); ">const exp_series = 
    pair(1, () =&gt; integrate_series(exp_series));</pre></div></div>
      Show how to generate the series for sine and cosine, starting from the facts
      that the derivative of sine is cosine and the derivative of cosine is
      the negative of sine:
      <div class="snippet" id="javascript_68_20_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">const cosine_series = pair(1, ??);	  
const sine_series = pair(0, ??);</pre></div></div>
    </LI>
  </OL>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.60" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.60">Exercise 3.60 </a></b>
    
    
    
    
    With power series represented as streams of coefficients as in
    exercise <REF NAME="ex:powerseries"><a class="superscript" id="3.5.2-ex-link-3.59" href="68#ex_3.59">3.59</a></REF>, adding series is implemented by <kbd>add-streams</kbd>.  Complete the definition of the following
    function
    for
    multiplying series:
    <div class="snippet" id="javascript_68_21_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function mul_series(s1, s2) {
    pair(??, add_streams(??, ??));
}</pre></div></div>

    You can test your
    function
    by verifying that
    $sin^2 x + cos^2 x = 1$,
    using the series from exercise <REF NAME="ex:powerseries"><a class="superscript" id="3.5.2-ex-link-3.59" href="68#ex_3.59">3.59</a></REF>.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.61" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.61">Exercise 3.61 </a></b>
    Let $S$ be a power series
    (exercise <REF NAME="ex:powerseries"><a class="superscript" id="3.5.2-ex-link-3.59" href="68#ex_3.59">3.59</a></REF>)
    whose constant term is 1.  Suppose we want
    to find the power series $1/S$, that is,
    the series $X$ such that
    $S\cdot X= 1$.
    Write $S=1+S_R$ where $S_R$
    is the part of $S$ after the constant term.
    Then we can solve for $X$ as follows:
    \begin{eqnarray*}
    S \cdot X &amp;=&amp; 1 \\
    (1+S_R)\cdot X &amp;=&amp; 1 \\
    X + S_R \cdot X &amp;=&amp; 1 \\
    X &amp;=&amp; 1 - S_R \cdot X
    \end{eqnarray*}
    In other words, $X$ is the power series whose constant term
    is 1 and whose higher-order terms are given by the negative of
    $S_R$ times $X$.
    Use this idea to write a
    function
    
      
      <kbd>invert_unit_series</kbd>
    
    that computes $1/S$ for a power series
    $S$ with constant term 1.
    You will need to use
    
      
      <kbd>mul_series</kbd>
    
    from exercise <REF NAME="ex:mul-series"><a class="superscript" id="3.5.2-ex-link-3.60" href="68#ex_3.60">3.60</a></REF>.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.62" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.62">Exercise 3.62 </a></b>
    
    
    
    Use the results of exercises <REF NAME="ex:mul-series"><a class="superscript" id="3.5.2-ex-link-3.60" href="68#ex_3.60">3.60</a></REF>
    and <REF NAME="ex:invert-unit-series"><a class="superscript" id="3.5.2-ex-link-3.61" href="68#ex_3.61">3.61</a></REF> to define a
    function
    
      
      <kbd>div_series</kbd>
    
    that divides two power series.
    
      
      The function <kbd>div_series</kbd>
    
    should work for any
    two series, provided that the denominator series begins with a
    nonzero constant term.  (If the denominator has a zero constant term, then
    
      
      <kbd>div_series</kbd>
    
    should signal an error.)
    Show how to use
    
      
      <kbd>div_series</kbd>
    
    together with the result of exercise <REF NAME="ex:powerseries"><a class="superscript" id="3.5.2-ex-link-3.59" href="68#ex_3.59">3.59</a></REF>
    to generate 
    the power series for tangent.
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_68_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_68_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  

<hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="68#footnote-link-1">[1] </a><FOOTNOTE>Eratosthenes, a third-century <SC>b.c.</SC>
    
    
    Alexandrian Greek philosopher, is famous for giving the first accurate
    estimate of the circumference of the Earth, which he computed by
    observing shadows cast at noon on the day of the summer solstice.
    Eratosthenes's sieve method, although ancient, has formed the basis
    for special-purpose hardware <QUOTE>sieves</QUOTE> that, until the 1970s,
    were the
    most powerful tools in existence for locating large primes.  Since then,
    however, these methods have been superseded by outgrowths of the
    
    probabilistic techniques discussed in
    section <REF NAME="sec:primality"><a class="superscript" id="3.5.2-sec-link-1.2.6" href="17">1.2.6</a></REF>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="68#footnote-link-2">[2] </a><FOOTNOTE>We
    have named these figures after
    
    Peter Henderson, who
    was the first person to show us diagrams of this sort as a way of
    thinking about stream processing.  Each solid line represents a stream
    of values being transmitted.  The dashed line from the <kbd>head</kbd> to
    the <kbd>pair</kbd> and the <kbd>filter</kbd> indicates that this is a single
    value rather than a stream.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="68#footnote-link-3">[3] </a><FOOTNOTE>
    <SPLIT>
      
      
	This uses the function <kbd>stream_merge</kbd>
	from exercise <REF NAME="ex:combine-streams"><a class="superscript" id="3.5.2-ex-link-3.50" href="67#ex_3.50">3.50</a></REF>.
      
    </SPLIT>
  </FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="68#footnote-link-4">[4] </a><FOOTNOTE>This last point is
    very subtle and relies on the fact that $p_{n+1} \leq p_{n}^2$.
    (Here, $p_{k}$ denotes the $k$th prime.)  Estimates such as these are
    very difficult to establish.  The ancient proof by
    
    Euclid that there
    are an infinite number of primes shows that $p_{n+1}\leq p_{1} p_{2}\,
    \cdots\,\, p_{n} +1$, and no substantially better result was proved
    until 1851, when the Russian mathematician P. L. Chebyshev established
    
    
    
    
    that $p_{n+1}\leq 2p_{n}$ for all $n$.  This result, originally
    conjectured in 1845, is known as <EM>Bertrand's hypothesis</EM>.  A proof
    can be found in section 22.3 of
    <CITATION>Hardy and Wright 1960</CITATION>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-5" href="68#footnote-link-5">[5] </a><FOOTNOTE>This
	exercise shows how call-by-need is closely related to
    
    
    ordinary memoization as described in exercise <REF NAME="ex:memoization"><a class="superscript" id="3.5.2-ex-link-3.27" href="60#ex_3.27">3.27</a></REF>.
    In that exercise, we used assignment to explicitly construct a local
    table.  Our call-by-need stream optimization effectively constructs
    such a table automatically, storing values in the previously forced
    parts of the stream.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="67">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="69">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        3.5.2 
    Infinite Streams
  
    </div>
  <script>
//<![CDATA[
var chapter_id = 68;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
