<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="2.4.3 
        Data-Directed Programming and Additivity
      " />
    <title>
         2.4.3 
        Data-Directed Programming and Additivity
      
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="WMThEQkIkCdj2MazcQZutwIpDY2x24VVJ9ALsvew7CDlswuj7zX0Vn+oDAOdnQbXWapu43jTjh3v43IcyUXdhA==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-646697584dca3e04ba2ffbdf497816ce21a735eef61eccd54a0f8bf08a4e82e9.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">JavaScript Adaptation Making-of</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">2.4.3 
        Data-Directed Programming and Additivity
      </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      
      

      <div class="permalink">
<a name="p1" class="permalink"></a><p>
      
      The general strategy of checking the type of a datum and calling an
      appropriate
      function
      is called
      
      
      <EM>dispatching on type</EM>.  This is a
      powerful strategy for obtaining modularity in system design.  On
      the other hand, implementing the dispatch as in
      section <REF NAME="sec:manifest-types"><a class="superscript" id="2.4.3-sec-link-2.4.2" href="41">2.4.2</a></REF> has two significant weaknesses.  One
      weakness is that the generic interface
      functions
      (<kbd>real_part</kbd>,
      <kbd>imag_part</kbd>, <kbd>magnitude</kbd>, and <kbd>angle</kbd>) must know about all
      the different representations.  For instance, suppose we wanted to
      incorporate a new representation for complex numbers into our
      complex-number system.  We would need to identify this new
      representation with a type, and then add a clause to each of the
      generic interface
      functions
      to check for the new type and apply the
      appropriate selector for that representation.
      </p>
</div>
      <div class="permalink">
<a name="p2" class="permalink"></a><p>
      Another weakness of the technique is that even though the individual
      representations can be designed separately, we must guarantee that
      no two
      functions
      in the entire system have the same name.  This is
      why Ben and Alyssa had to change the names of their original
      functions
      from section <REF NAME="sec:representations-complex-numbers"><a class="superscript" id="2.4.3-sec-link-2.4.1" href="40">2.4.1</a></REF>.
      </p>
</div>
      <div class="permalink">
<a name="p3" class="permalink"></a><p>
      The issue underlying both of these weaknesses is that the technique
      for implementing generic interfaces is not <EM>additive</EM>.  The person
      implementing the generic selector
      functions
      must modify those
      functions
      each time a new representation is installed, and the people
      interfacing the individual representations must modify their
      code to avoid name conflicts.  In each of these cases, the changes
      that must be made to the code are straightforward, but they must be
      made nonetheless, and this is a source of inconvenience and error.
      This is not much of a problem for the complex-number system as it
      stands, but suppose there were not two but hundreds of different
      representations for complex numbers.  And suppose that there were many
      generic selectors to be maintained in the abstract-data interface.
      Suppose, in fact, that no one programmer knew all the interface
      functions
      or all the representations.  The problem is real and must
      be addressed in such programs as large-scale data-base-management
      systems.
      </p>
</div>
      <div class="permalink">
<a name="p4" class="permalink"></a><p>
      What we need is a means for modularizing the system design even
      further.  This is provided by the programming technique known as <EM>
        data-directed programming</EM>.  To understand how data-directed
      programming works, begin with the observation that whenever we deal
      with a set of generic operations that are common to a set of
      different types we are, in effect, dealing with a two-dimensional
      table that contains the possible operations on one axis and the
      possible types on the other axis.  The entries in the table are the
      functions
      that implement each operation for each type of argument
      presented.  In the complex-number system developed in the previous
      section, the correspondence between operation name, data type, and
      actual
      function
      was spread out among the various conditional clauses
      in the generic interface
      functions.  But the same information could
      have been organized in a table, as shown in
      figure <REF NAME="fig:operator-table"><a class="superscript" id="2.4.3-fig-link-2.22" href="42#fig_2.22">2.22</a></REF>.
      </p>
</div>
      <div class="permalink">
<a name="p5" class="permalink"></a><p>
      
      Data-directed programming is the technique of designing programs to
      work with such a table directly.  Previously, we implemented the
      mechanism that interfaces the complex-arithmetic code with the two
      representation packages as a set of
      functions
      that each perform an
      explicit dispatch on type.  Here we will implement the interface as a single
      function
      that looks up the combination of the operation name and
      argument type in
      the table to find the correct
      function
      to apply, and then applies it
      to the contents of the argument.  If we do this, then to add a new
      representation package to the system we need not change any existing
      functions; we need only add new entries to the table.
      </p>
</div>
      <div class="permalink">
<a name="p6" class="permalink"></a><p>

        <SPLIT>
          
          
            <img src="img_javascript/ch2-Z-G-63.svg">
          
        </SPLIT>

      To implement this plan, assume that we have two
      functions,
      <kbd>put</kbd> and <kbd>get</kbd>, for manipulating the
      operation-and-type table:
      

      <UL>
        
        <LI>
<kbd>put(</kbd>$\langle \textit{op} \rangle, \langle \textit{type} \rangle, \langle \textit{item} \rangle$<kbd>)</kbd><BREAK></BREAK>
        installs the $\langle \textit{item} \rangle$ in the table, indexed by the
          $\langle \textit{op} \rangle$ and the
          $\langle \textit{type} \rangle$.
          
        </LI>
        <LI>
<kbd>get(</kbd>$\langle \textit{op} \rangle, \langle \textit{type} \rangle$<kbd>)</kbd><BREAK></BREAK>
          looks up the
          $\langle \textit{op} \rangle$,
          $\langle \textit{type} \rangle$
          entry in the table
          and returns the item found there.  If no item is found, <kbd>get</kbd>
          returns
	  <kbd>undefined</kbd>.
        </LI>
      </UL>

      For now, we can assume that <kbd>put</kbd> and <kbd>get</kbd> are
      included in our language.  In chapter 3 (section <REF NAME="sec:tables"><a class="superscript" id="2.4.3-sec-link-3.3.3" href="60">3.3.3</a></REF>)
      we will see how to implement these and
      other operations for manipulating tables.
      </p>
</div>
      <div class="permalink">
<a name="p7" class="permalink"></a><p>
      Here is how data-directed programming can be used in the
      complex-number system.  Ben, who developed the rectangular
      representation, implements his code just as he did originally.  He defines a collection of
      functions, or a
      
      <EM>package</EM>, and interfaces
      these to the rest of the system by adding entries to the table that
      tell the system how to operate on rectangular numbers.
      This is accomplished by calling the following
      function:
      
      

      
      
      <div class="snippet" id="javascript_42_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction square(x) {\n    return x * x;\n}\n                '+'\n'+'function install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=3&amp;prgrm='+compressed; window.open(url); ">function install_rectangular_package() {
    function real_part(z) { return head(z); }
    function imag_part(z) { return tail(z); }
    function make_from_real_imag(x, y) { return pair(x, y); }
    function magnitude(z) {
        return math_sqrt(square(real_part(z)) +
                   square(imag_part(z)));
    }
    function angle(z) {
        return math_atan(imag_part(z), real_part(z));
    }
    function make_from_mag_ang(r, a) {
        return pair(r * math_cos(a), r * math_sin(a));
    }
    // interface to the rest of the system
    function tag(x) {
        return attach_tag("rectangular", x);
    }
    put("real_part", list("rectangular"), real_part);
    put("imag_part", list("rectangular"), imag_part);
    put("magnitude", list("rectangular"), magnitude);
    put("angle", list("rectangular"), angle);
    put("make_from_real_imag", "rectangular",
        (x, y) =&gt; tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "rectangular",
        (r, a) =&gt; tag(make_from_mag_ang(r, a)));
    return "done";
}

install_rectangular_package();</pre></div></div>

      Notice that the internal
      functions
      here are the same
      functions
      from
      section <REF NAME="sec:representations-complex-numbers"><a class="superscript" id="2.4.3-sec-link-2.4.1" href="40">2.4.1</a></REF> that Ben wrote when
      he was working in isolation.  No changes are necessary in order to
      interface them to the rest of the system.  Moreover, since these
      function
      definitions are internal to the installation
      function, Ben
      needn't worry about name conflicts with other
      functions
      outside the
      rectangular package.  To interface these to the rest of the system,
      Ben installs his <kbd>real_part</kbd>
      function
      under the operation name
      <kbd>real_part</kbd> and the type <kbd>list("rectangular")</kbd>, and similarly
      for the other selectors.<a class="superscript" id="footnote-link-1" href="42#footnote-1">[1]</a>  The interface also defines
      the constructors to be used by the external system.<a class="superscript" id="footnote-link-2" href="42#footnote-2">[2]</a>
      These are
      identical to Ben's internally defined constructors, except that they
      attach the tag.

      
      
      Alyssa's polar package is analogous:
      <div class="snippet" id="javascript_42_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction square(x) {\n    return x * x;\n}\n                '+'\n'+'function install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=3&amp;prgrm='+compressed; window.open(url); ">function install_polar_package() {
    // internal functions
    function magnitude(z) { return head(z); }
    function angle(z) { return tail(z); }
    function make_from_mag_ang(r, a) { return pair(r, a); }
    function real_part(z) {
       return magnitude(z) * math_cos(angle(z));
    }
    function imag_part(z) {
       return magnitude(z) * math_sin(angle(z));
    }
    function make_from_real_imag(x, y) {
       return pair(math_sqrt(square(x) + square(y)),
                   math_atan(y, x));
    }

    // interface to the rest of the system
    function tag(x) { return attach_tag("polar", x); }
    put("real_part", list("polar"), real_part);
    put("imag_part", list("polar"), imag_part);
    put("magnitude", list("polar"), magnitude);
    put("angle", list("polar"), angle);
    put("make_from_real_imag", "polar", 
        (x, y) =&gt; tag(make_from_real_imag(x, y)));
    put("make_from_mag_ang", "polar",
        (r, a) =&gt; tag(make_from_mag_ang(r, a)));
    return "done";
}

install_polar_package();</pre></div></div>
      </p>
</div>
      <div class="permalink">
<a name="p8" class="permalink"></a><p>
      Even though Ben and Alyssa both still use their original
      functions
      defined with the same names as each other's (e.g., <kbd>real_part</kbd>), these
      definitions are now internal to different
      functions
      (see
      section <REF NAME="sec:block-structure"><a class="superscript" id="2.4.3-sec-link-1.1.8" href="10">1.1.8</a></REF>), so there is no name
      conflict.
      </p>
</div>
      <div class="permalink">
<a name="p9" class="permalink"></a><p>
      The complex-arithmetic selectors access the table by means of a
      general <QUOTE>operation</QUOTE>
      function
      called <kbd>apply_generic</kbd>, which
      applies a generic operation to some arguments.  The function <kbd>apply_generic</kbd>
      looks in the table under the name of the operation and the types of the
      arguments and applies the resulting
      function
      if one is present:<a class="superscript" id="footnote-link-3" href="42#footnote-3">[3]</a>


      

	
      <div class="snippet" id="javascript_42_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// In Source, most functions have a fixed number of arguments.\n// (The function list is the only exception, to this so far.)\n// The function apply_in_underlying_javascript allows us to\n// apply any given function fun to all elements of the argument \n// list args, as if they were separate arguments\nfunction apply(fun, args) {\n    return apply_in_underlying_javascript(fun, args);\n}	  \n	'+'\n'+'function apply_generic(op, args) {\n    const type_tags = map(type_tag, args);\n    const fun = get(op, type_tags);\n    return fun !== undefined\n        ? apply(fun, map(contents, args))\n        : Error(&quot;No method for these types in apply_generic&quot;,\n                list(op, type_tags));\n}'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function apply_generic(op, args) {
    const type_tags = map(type_tag, args);
    const fun = get(op, type_tags);
    return fun !== undefined
        ? apply(fun, map(contents, args))
        : Error("No method for these types in apply_generic",
                list(op, type_tags));
}</pre></div></div>
      Using 
      <kbd>apply_generic</kbd>
      , we can define our generic selectors as follows:

      <div class="snippet" id="javascript_42_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// In Source, most functions have a fixed number of arguments.\n// (The function list is the only exception, to this so far.)\n// The function apply_in_underlying_javascript allows us to\n// apply any given function fun to all elements of the argument \n// list args, as if they were separate arguments\nfunction apply(fun, args) {\n    return apply_in_underlying_javascript(fun, args);\n}	  \n	\nfunction apply_generic(op, args) {\n    const type_tags = map(type_tag, args);\n    const fun = get(op, type_tags);\n    return fun !== undefined\n        ? apply(fun, map(contents, args))\n        : Error(&quot;No method for these types in apply_generic&quot;,\n                list(op, type_tags));\n}\n        \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction square(x) {\n    return x * x;\n}\n                \nfunction install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();\n        \nfunction install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();\n	\nfunction add_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) + real_part(z2),\n               imag_part(z1) + imag_part(z2));\n}\nfunction sub_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) - real_part(z2),\n               imag_part(z1) - imag_part(z2));\n}\nfunction mul_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) * magnitude(z2),\n               angle(z1) + angle(z2));\n}\nfunction div_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) / magnitude(z2),\n               angle(z1) - angle(z2));\n}\n        \nfunction make_from_real_imag(x, y) {\n   return get(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;)(x, y);\n}\nfunction make_from_mag_ang(r, a) {\n   return get(&quot;make_from_mag_ang&quot;, &quot;polar&quot;)(r, a);\n}\n        '+'\n'+'function real_part(z) {\n   return apply_generic(&quot;real_part&quot;, list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;, list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;, list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;, list(z));\n}'+'\n'+'\nconst my_complex_number = \n    make_from_real_imag(1.0, 4.5);\n\nconst result = \n    add_complex(my_complex_number,\n                my_complex_number);\n\nimag_part(result);		\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=4&amp;prgrm='+compressed; window.open(url); ">function real_part(z) {
   return apply_generic("real_part", list(z));
}
function imag_part(z) {
   return apply_generic("imag_part", list(z));
}
function magnitude(z) {
   return apply_generic("magnitude", list(z));
}
function angle(z) {
   return apply_generic("angle", list(z));
}</pre></div></div>

      
      
      Observe that these do not change at all if a new representation is
      added to the system.
      </p>
</div>
      <div class="permalink">
<a name="p10" class="permalink"></a><p>
      We can also extract from the table the
      constructors to be used by the programs external to the packages in
      making complex numbers from real and imaginary parts and from
      magnitudes and angles.
      As in section <REF NAME="sec:manifest-types"><a class="superscript" id="2.4.3-sec-link-2.4.2" href="41">2.4.2</a></REF>, we
      construct rectangular numbers whenever we have real and
      imaginary parts, and polar numbers whenever we have magnitudes and angles:

      <div class="snippet" id="javascript_42_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// In Source, most functions have a fixed number of arguments.\n// (The function list is the only exception, to this so far.)\n// The function apply_in_underlying_javascript allows us to\n// apply any given function fun to all elements of the argument \n// list args, as if they were separate arguments\nfunction apply(fun, args) {\n    return apply_in_underlying_javascript(fun, args);\n}	  \n	\nfunction apply_generic(op, args) {\n    const type_tags = map(type_tag, args);\n    const fun = get(op, type_tags);\n    return fun !== undefined\n        ? apply(fun, map(contents, args))\n        : Error(&quot;No method for these types in apply_generic&quot;,\n                list(op, type_tags));\n}\n        \nfunction real_part(z) {\n   return apply_generic(&quot;real_part&quot;, list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;, list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;, list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;, list(z));\n}\n        \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction square(x) {\n    return x * x;\n}\n                \nfunction install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();\n        \nfunction install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();\n	\nfunction add_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) + real_part(z2),\n               imag_part(z1) + imag_part(z2));\n}\nfunction sub_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) - real_part(z2),\n               imag_part(z1) - imag_part(z2));\n}\nfunction mul_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) * magnitude(z2),\n               angle(z1) + angle(z2));\n}\nfunction div_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) / magnitude(z2),\n               angle(z1) - angle(z2));\n}\n        '+'\n'+'function make_from_real_imag(x, y) {\n   return get(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;)(x, y);\n}\nfunction make_from_mag_ang(r, a) {\n   return get(&quot;make_from_mag_ang&quot;, &quot;polar&quot;)(r, a);\n}'+'\n'+'\nconst my_complex_number = \n    make_from_real_imag(1.0, 4.5);\n\nconst result = \n    add_complex(my_complex_number,\n                my_complex_number);\n\nimag_part(result);		\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=4&amp;prgrm='+compressed; window.open(url); ">function make_from_real_imag(x, y) {
   return get("make_from_real_imag", "rectangular")(x, y);
}
function make_from_mag_ang(r, a) {
   return get("make_from_mag_ang", "polar")(r, a);
}</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="ex_2.73" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.73">Exercise 2.73 </a></b>
        Section <REF NAME="sec:symbolic-differentiation"><a class="superscript" id="2.4.3-sec-link-2.3.2" href="36">2.3.2</a></REF> described a program that
        performs symbolic differentiation:
        
        
        <div class="snippet" id="javascript_42_5_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            '+'\n'+'function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)),\n                            make_product(deriv(multiplier(exp), \n                                               variable), \n                                multiplicand(exp)))\n                 // more rules can be added here\n                 : Error(&quot;unknown expression type in deriv&quot;, \n                         exp);\n}'+'\n'+'\nderiv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 4)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//           [[&quot;+&quot;, [1, [0, null]]], null]]],\n//    [[&quot;*&quot;,\n//      [[&quot;+&quot;,\n//        [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//         [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]],\n//         [[&quot;+&quot;, [&quot;x&quot;, [4, null]]], null] ] ],\n//     null ]]]\n        '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable)) ? 1 : 0
             : is_sum(exp)
               ? make_sum(deriv(addend(exp), variable), 
                          deriv(augend(exp), variable))
               : is_product(exp)
                 ? make_sum(make_product(multiplier(exp), 
                                deriv(multiplicand(exp), 
                                      variable)),
                            make_product(deriv(multiplier(exp), 
                                               variable), 
                                multiplicand(exp)))
                 // more rules can be added here
                 : Error("unknown expression type in deriv", 
                         exp);
}</pre></div></div>

      <div class="snippet" id="javascript_42_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'deriv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 4)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//           [[&quot;+&quot;, [1, [0, null]]], null]]],\n//    [[&quot;*&quot;,\n//      [[&quot;+&quot;,\n//        [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//         [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]],\n//         [[&quot;+&quot;, [&quot;x&quot;, [4, null]]], null] ] ],\n//     null ]]]'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", list("*", "x", "y"), list("+", "x", 4)), "x");
// [ "+",
//   [["*", [["*", ["x", ["y", null]]], 
//           [["+", [1, [0, null]]], null]]],
//    [["*",
//      [["+",
//        [["*", ["x", [0, null]]], 
//         [["*", [1, ["y", null]]], null]]],
//         [["+", ["x", [4, null]]], null] ] ],
//     null ]]]</pre></div></div>
	
        We can regard this program as performing a dispatch on the type of the
        expression to be differentiated.  In this situation the <QUOTE>type tag</QUOTE> of the
          datum is the algebraic operator symbol (such as +) and the
          operation being performed is <kbd>deriv</kbd>.  We can transform this
        program into data-directed style by rewriting the basic derivative
        function
        as
        <div class="snippet" id="javascript_42_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            '+'\n'+'function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : get(&quot;deriv&quot;, \n                   operator(exp))(operands(exp), variable);\n}\nfunction operator(exp) {\n   return head(exp);\n}\nfunction operands(exp) {\n   return tail(exp);\n}'+'\n'+'\nderiv(&quot;x&quot;, &quot;x&quot;);\n// 1\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable) ? 1 : 0)
             : get("deriv", 
                   operator(exp))(operands(exp), variable);
}
function operator(exp) {
   return head(exp);
}
function operands(exp) {
   return tail(exp);
}</pre></div></div>

	

	
        <OL>
          <LI>
            Explain what was done above.
            Why can't we assimilate the predicates <kbd>is_number</kbd> and <kbd>is_same_variable</kbd> into the data-directed dispatch?
          </LI>
          <LI>
            Write the
            functions
            for derivatives of sums and products, and the
            auxiliary code required to install them in the table used by the
            program above.
          </LI>
          <LI>
            Choose any additional differentiation rule that you like, such as
            the one for exponents (exercise <REF NAME="ex:deriv-exponentiation"><a class="superscript" id="2.4.3-ex-link-2.56" href="36#ex_2.56">2.56</a></REF>),
            and install it in this data-directed system.
          </LI>
          <LI>
            In this simple algebraic manipulator the type of an expression is
            the algebraic operator that binds it together.  Suppose, however, we
            indexed the
            functions
            in the opposite way, so that the dispatch line
            in <kbd>deriv</kbd> looked like

            <div class="snippet" id="javascript_42_8_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">get(operator(exp), "deriv")(operands(exp), variable);</pre></div></div>

            What corresponding changes to the derivative system are required?
          </LI>
        </OL>
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_42_1_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_42_1_div"><SOLUTION>

        <OL>
          <LI>
            <EM>Explain what was done above.
            Why can't we assimilate the predicates <kbd>is_number</kbd> and <kbd>is_same_variable</kbd> into the data-directed dispatch?</EM>
	    <p></p>
	    The operator symbols come very handy as <QUOTE>type</QUOTE>
	    keys in the operator table. For
	    numbers and variables, there aren't such obvious keys, although we
	    could introduce names for those types of expressions, as well, if we change the
	    way expressions are represented as lists.
          </LI>


	  <LI>
            <EM>Write the
            functions
            for derivatives of sums and products, and the
            auxiliary code required to install them in the table used by the
            program above.</EM>
	    <p></p>
	    <div class="snippet" id="javascript_42_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : get(&quot;deriv&quot;, \n                   operator(exp))(operands(exp), variable);\n}\nfunction operator(exp) {\n   return head(exp);\n}\nfunction operands(exp) {\n   return tail(exp);\n}\n        \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(operands) {\n    return head(operands);\n}\n            \nfunction augend(operands) {\n    return head(tail(operands));\n}\n            \nfunction multiplier(operands) {\n    return head(operands);\n}\n            \nfunction multiplicand(operands) {\n    return head(tail(operands));\n}\n	      \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          '+'\n'+'function deriv_sum(operands, variable) {		\n    return make_sum(deriv(addend(operands), variable),\n                    deriv(augend(operands), variable));\n}\nfunction deriv_product(operands, variable) {\n    return make_sum(make_product(multiplier(operands),\n                        deriv(multiplicand(operands),\n                              variable)),\n                    make_product(deriv(multiplier(\n                                             operands),\n                                       variable),\n                        multiplicand(operands)));\n}\nfunction install_deriv() {\n    put(&quot;deriv&quot;, &quot;+&quot;, deriv_sum);\n    put(&quot;deriv&quot;, &quot;*&quot;, deriv_product);\n    return &quot;done&quot;;\n}\ninstall_deriv();'+'\n'+'\nderiv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//           [[&quot;+&quot;, [1, [0, null]]], null]]],\n//    [[&quot;*&quot;,\n//      [[&quot;+&quot;,\n//        [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//         [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]],\n//         [[&quot;+&quot;, [&quot;x&quot;, [3, null]]], null] ] ],\n//     null ]]]\n        '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=4&amp;prgrm='+compressed; window.open(url); ">function deriv_sum(operands, variable) {		
    return make_sum(deriv(addend(operands), variable),
                    deriv(augend(operands), variable));
}
function deriv_product(operands, variable) {
    return make_sum(make_product(multiplier(operands),
                        deriv(multiplicand(operands),
                              variable)),
                    make_product(deriv(multiplier(
                                             operands),
                                       variable),
                        multiplicand(operands)));
}
function install_deriv() {
    put("deriv", "+", deriv_sum);
    put("deriv", "*", deriv_product);
    return "done";
}
install_deriv();</pre></div></div>

	    
	    
	    
      
	    
	  </LI>

          <LI>
	    <EM>
            Choose any additional differentiation rule that you like, such as
            the one for exponents (Exercise <REF NAME="ex:deriv-exponentiation"><a class="superscript" id="2.4.3-ex-link-2.56" href="36#ex_2.56">2.56</a></REF>),
            and install it in this data-directed system.
	    </EM>
	    <p></p>

	    
	    
	    <div class="snippet" id="javascript_42_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : get(&quot;deriv&quot;, \n                   operator(exp))(operands(exp), variable);\n}\nfunction operator(exp) {\n   return head(exp);\n}\nfunction operands(exp) {\n   return tail(exp);\n}\n        \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(operands) {\n    return head(operands);\n}\n            \nfunction augend(operands) {\n    return head(tail(operands));\n}\n            \nfunction multiplier(operands) {\n    return head(operands);\n}\n            \nfunction multiplicand(operands) {\n    return head(tail(operands));\n}\n	      \nfunction make_exponentiation(base, exp) {\n    return list(&quot;**&quot;, base, exp);\n}\nfunction base(operands) {\n    return head(operands);\n}\nfunction exponent(operands) {\n    return head(tail(operands));\n}\n	      \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          '+'\n'+'function deriv_exponentiation(operands, variable) {		\n    const bas = base(operands);\n    const exp = exponent(operands);\n    return make_product(exp,\n               make_product(make_exponentiation(bas, make_sum(exp, -1)),\n	                    deriv(bas, variable)));\n}\nfunction install_exponentiation_extension() {\n    put(&quot;deriv&quot;, &quot;**&quot;, deriv_exponentiation);\n    return &quot;done&quot;;\n}\ninstall_exponentiation_extension();'+'\n'+'\nderiv(list(&quot;**&quot;, &quot;x&quot;, 4), &quot;x&quot;);\n    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=4&amp;prgrm='+compressed; window.open(url); ">function deriv_exponentiation(operands, variable) {		
    const bas = base(operands);
    const exp = exponent(operands);
    return make_product(exp,
               make_product(make_exponentiation(bas, make_sum(exp, -1)),
	                    deriv(bas, variable)));
}
function install_exponentiation_extension() {
    put("deriv", "**", deriv_exponentiation);
    return "done";
}
install_exponentiation_extension();</pre></div></div>

          </LI>
          <LI>
	    <EM>
            In this simple algebraic manipulator the type of an expression is
            the algebraic operator that binds it together.  Suppose, however, we
            indexed the
            functions
            in the opposite way, so that the dispatch line
            in <kbd>deriv</kbd> looked like

            <div class="snippet" id="javascript_42_11_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">get(operator(exp), "deriv")(operands(exp), variable);</pre></div></div>

            What corresponding changes to the derivative system are required?
	    </EM>
	    <p></p>
	    We would need to change the order of arguments in the installation
	    procedure for the differentiation library:
	    <div class="snippet" id="javascript_42_12_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">put("+", "deriv", deriv_sum);
put("*", "deriv", deriv_product);
put("**", "deriv", deriv_exponentiation);</pre></div></div>
          </LI>
        </OL>
	
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.74" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.74">Exercise 2.74 </a></b>
        
        
        Insatiable Enterprises, Inc., is a highly decentralized conglomerate
        company consisting of a large number of independent divisions located
        all over the world.  The company's computer facilities have just been
        interconnected by means of a clever network-interfacing scheme that
        makes the entire network appear to any user to be a single computer.
        Insatiable's president,  in her first attempt to exploit the ability of
        the network to extract administrative information from division files,
        is dismayed to discover that, although all the division files have
        been implemented as data structures in
	
	  
	  
	    JavaScript,
	  
	
	the particular data
        structure used varies from division to division.  A meeting of
        division managers is hastily called to search for a strategy to
        integrate the files that will satisfy headquarters' needs while
        preserving the existing autonomy of the divisions.

        Show how such a strategy can be implemented with data-directed
        programming.  As an example, suppose that each division's personnel
        records consist of a single file, which contains a set of records
        keyed on employees' names.  The structure of the set varies from
        division to division.  Furthermore, each employee's record is itself a
        set (structured differently from division to division) that contains
        information keyed under identifiers such as <kbd>address</kbd> and <kbd>salary</kbd>.  In particular:
        <OL>
          <LI>
            Implement for headquarters a <kbd>get_record</kbd>
            function
            that
            retrieves a specified employee's record from a specified personnel
            file.  The
            function
            should be applicable to any division's file.
            Explain how the individual divisions' files should be structured.  In
            particular, what type information must be supplied?
          </LI>
          <LI>
            Implement for headquarters a <kbd>get_salary</kbd>
            function
            that
            returns the salary information from a given employee's record from any
            division's personnel file.  How should the record be structured in
            order to make this operation work?
          </LI>
          <LI>
            Implement for headquarters a <kbd>find_employee_record</kbd>
            function.
            This should search all the divisions' files for the record of a given
            employee and return the record.  Assume that this
            function
            takes as
            arguments an employee's name and a list of all the divisions' files.
          </LI>
          <LI>
            When Insatiable takes over a new company, what changes must
            be made in order to incorporate the new personnel information into the
            central system?
          </LI>
        </OL>

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_42_2_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_42_2_div"><SOLUTION>

        <OL>
          <LI>
            <EM>Implement for headquarters a <kbd>get_record</kbd>
            function
            that
            retrieves a specified employee's record from a specified personnel
            file.  The
            function
            should be applicable to any division's file.
            Explain how the individual divisions' files should be structured.  In
            particular, what type information must be supplied?</EM><p></p>
	    We are tagging each division's file with a unique identifier for the
	    division, using the tagging functions in
	    section <REF NAME="sec:manifest-types"><a class="superscript" id="2.4.3-sec-link-2.4.2" href="41">2.4.2</a></REF>. We assume that each
	    division provides an implementation of the
	    <kbd>get_record</kbd> function and
	    installs it in the company-wide operations table.
	    <div class="snippet" id="javascript_42_13_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_insatiable_file(division, file) {
    return pair(division, file);
}
function insatiable_file_division(insatiable_file) {
    return head(insatiable_file);
}
function insatiable_file_content(insatiable_file) {
    return tail(insatiable_file);
}
function get_record(employee_name, insatiable_file) {
    const the_division 
        = insatiable_file_division(insatiable_file);
    const division_record = get("get_record", the_division)
                            (employee_name, 
                             insatiable_file_content(
                                 insatiable_file);
    return record !== undefined      
           ? attach_tag(the_division, division_record)
           : undefined;
}</pre></div></div>
          </LI>
          <LI>
            <EM>Implement for headquarters a <kbd>get_salary</kbd>
            function
            that
            returns the salary information from a given employee's record from any
            division's personnel file.  How should the record be structured in
            order to make this operation work?</EM><p></p>
	    Every division needs to implement functions such as
	    <kbd>get_salary</kbd> and install them
	    in Insatiable's operations table. Then, Insatiable's function
	    <kbd>get_salary</kbd> can look like this:
	    <div class="snippet" id="javascript_42_14_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_insatiable_record(division, record) {
    return pair(division, record);
}
function insatiable_record_division(insatiable_record) {
    return head(insatiable_record);
}
function insatiable_record_content(insatiable_record) {
    return tail(insatiable_record);
}
function get_salary(insatiable_record) {
    const the_division = 
        insatiable_record_division(insatiable_record);
    return get("get_salary", the_division)
           (insatiable_record_content);
}</pre></div></div>
	    Note that we rely on the fact that any employee record that gets returned by
	    <kbd>get_record</kbd> is tagged with its
	    division, which is used in the generic function
	    <kbd>get_salary</kbd> to retrieve the
	    correct implementation from the operation table.
           </LI>
          <LI>
            <EM>Implement for headquarters a <kbd>find_employee_record</kbd>
            function.
            This should search all the divisions' files for the record of a given
            employee and return the record.  Assume that this
            function
            takes as
            arguments an employee's name and a list of all the divisions' files.</EM>
	    <div class="snippet" id="javascript_42_15_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function find_employee_record(employee_name, 
                              personnel_files) {
    if (is_null(personell_files)) {
        return undefined;
    } else {
        const insatiable_record 
            = get_record(employee_name,
                         head(personell_files));
        return insatiable_record !== undefined
               ? insatiable_record
               : find_employee_record(employee_name, 
                              tail(personell_files));
    }
}</pre></div></div>
          </LI>
          <LI>
            <EM>When Insatiable takes over a new company, what changes must
            be made in order to incorporate the new personnel information into the
            central system?	    
	    </EM><p></p>
	    We would need to do the following, for each newly acquired company:
	    <UL>
	      <LI> Decide a name to be used as tag for any data item related
	      to the new division.</LI>
	      <LI> Write all division-specific functions such as
	      <kbd>get_salary</kbd> and install them
	      in the company-wide operations table using the division tag.</LI>
	      <LI> Add the employee files to the list of
	      <kbd>personell_files</kbd>.
	      Note that this
	      is a <QUOTE>destructive</QUOTE> operation—similar to the extension
	      of operations tables—in that the data structure is permanently  and
	      irrevocably modified; section <REF NAME="sec:mutable-data"><a class="superscript" id="2.4.3-sec-link-3.3" href="57">3.3</a></REF>
	      explains this concept in detail.
	      </LI>
	    </UL>
	    
          </LI>
        </OL>
	  
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>
      
      


      <div class="permalink">
<a name="h1" class="permalink"></a><h2>
        Message passing
      </h2>
</div>

      

      <div class="permalink">
<a name="p11" class="permalink"></a><p>
      The key idea of data-directed programming is to handle generic
      operations in programs by dealing explicitly with operation-and-type
      tables, such as the table in figure <REF NAME="fig:operator-table"><a class="superscript" id="2.4.3-fig-link-2.22" href="42#fig_2.22">2.22</a></REF>.  The
      style of programming we used in section <REF NAME="sec:manifest-types"><a class="superscript" id="2.4.3-sec-link-2.4.2" href="41">2.4.2</a></REF>
      organized the required dispatching on type by having each operation
      take care of its own dispatching.  In effect, this decomposes the
      operation-and-type table into rows, with each generic operation
      function
      representing a row of the table.
      </p>
</div>
      <div class="permalink">
<a name="p12" class="permalink"></a><p>
      An alternative implementation strategy is to decompose the table into
      columns and, instead of using <QUOTE>intelligent operations</QUOTE> that dispatch
      on data types, to work with <QUOTE>intelligent data objects</QUOTE> that dispatch
      on operation names.  We can do this by arranging things so that a data
      object, such as a rectangular number, is represented as a
      function
      that takes as input the required operation name and performs the
      operation indicated.  In such a discipline, <kbd>make_from_real_imag</kbd>
      could be written as

      <div class="snippet" id="javascript_42_16_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \nfunction real_part(z) {\n   return apply_generic(&quot;real_part&quot;, list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;, list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;, list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;, list(z));\n}\n        \nfunction apply_generic(op, arg) {\n    return head(arg)(op);\n}\n        \nfunction add_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) + real_part(z2),\n               imag_part(z1) + imag_part(z2));\n}\nfunction sub_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) - real_part(z2),\n               imag_part(z1) - imag_part(z2));\n}\nfunction mul_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) * magnitude(z2),\n               angle(z1) + angle(z2));\n}\nfunction div_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) / magnitude(z2),\n               angle(z1) - angle(z2));\n}\n        \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();\n        \nfunction install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();\n	'+'\n'+'function make_from_real_imag(x, y) {\n    function dispatch(op) {\n        return op === &quot;real_part&quot;\n            ? x\n            : op === &quot;imag_part&quot;\n              ? y\n              : op === &quot;magnitude&quot;\n                ? math_sqrt(square(x) + square(y))\n                : op === &quot;angle&quot;\n                  ? math_atan(y, x)\n                  : Error(&quot;Unknown op in make_from_real_imag&quot;, \n                          op);\n    }\n    return dispatch;\n}'+'\n'+'\nconst my_complex_number = \n    make_from_real_imag(1.0, 4.5);\n\nconst result = \n    add_complex(my_complex_number,\n                my_complex_number);\n\nimag_part(result);		\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=3&amp;prgrm='+compressed; window.open(url); ">function make_from_real_imag(x, y) {
    function dispatch(op) {
        return op === "real_part"
            ? x
            : op === "imag_part"
              ? y
              : op === "magnitude"
                ? math_sqrt(square(x) + square(y))
                : op === "angle"
                  ? math_atan(y, x)
                  : Error("Unknown op in make_from_real_imag", 
                          op);
    }
    return dispatch;
}</pre></div></div>

      The corresponding <kbd>apply_generic</kbd>
      function, which applies a
      generic operation to an argument, now simply feeds the operation's
      name to the data object and lets the object do the work:<a class="superscript" id="footnote-link-4" href="42#footnote-4">[4]</a>

	<div class="snippet" id="javascript_42_17_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \nfunction real_part(z) {\n   return apply_generic(&quot;real_part&quot;, list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;, list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;, list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;, list(z));\n}\n        \nfunction make_from_real_imag(x, y) {\n    function dispatch(op) {\n        return op === &quot;real_part&quot;\n            ? x\n            : op === &quot;imag_part&quot;\n              ? y\n              : op === &quot;magnitude&quot;\n                ? math_sqrt(square(x) + square(y))\n                : op === &quot;angle&quot;\n                  ? math_atan(y, x)\n                  : Error(&quot;Unknown op in make_from_real_imag&quot;, \n                          op);\n    }\n    return dispatch;\n}\n        \nfunction add_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) + real_part(z2),\n               imag_part(z1) + imag_part(z2));\n}\nfunction sub_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) - real_part(z2),\n               imag_part(z1) - imag_part(z2));\n}\nfunction mul_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) * magnitude(z2),\n               angle(z1) + angle(z2));\n}\nfunction div_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) / magnitude(z2),\n               angle(z1) - angle(z2));\n}\n        \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();\n        \nfunction install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();\n	'+'\n'+'function apply_generic(op, arg) {\n    return head(arg)(op);\n}'+'\n'+'\nconst my_complex_number = \n    make_from_real_imag(1.0, 4.5);\n\nconst result = \n    add_complex(my_complex_number,\n                my_complex_number);\n\nimag_part(result);		\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=3&amp;prgrm='+compressed; window.open(url); ">function apply_generic(op, arg) {
    return head(arg)(op);
}</pre></div></div>

      

      
      
      Note that the value returned by <kbd>make_from_real_imag</kbd> is a
      function—the internal <kbd>dispatch</kbd>
      function.  This is the
      function
      that is invoked when <kbd>apply_generic</kbd> requests an operation to
      be performed.
      </p>
</div>
      <div class="permalink">
<a name="p13" class="permalink"></a><p>
      This style of programming is called <EM>message passing</EM>.  The name
      comes from the image that a data object is an entity that receives the
      requested operation name as a <QUOTE>message.</QUOTE>  We have already seen an
      example of message passing in section <REF NAME="sec:data?"><a class="superscript" id="2.4.3-sec-link-2.1.3" href="27">2.1.3</a></REF>, where we saw
      how <kbd>pair</kbd>, <kbd>head</kbd>, and <kbd>tail</kbd> could be defined with no data
      objects but only
      functions.  Here we see that message passing is not
      a mathematical trick but a useful technique for organizing systems
      with generic operations.  In the remainder of this chapter we will
      continue to use data-directed programming, rather than message
      passing, to discuss generic arithmetic operations.  In chapter 3 we
      will return to message passing, and we will see that it can be a
      powerful tool for structuring simulation programs.
      </p>
</div>

      <div class="permalink">
<a name="ex_2.75" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.75">Exercise 2.75 </a></b>
        
        Implement the constructor <kbd>make_from_mag_ang</kbd> in message-passing style.
        This
        function
        should be analogous to the <kbd>make_from_real_imag</kbd>
        function
        given above.

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_42_3_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_42_3_div"><SOLUTION>

      <div class="snippet" id="javascript_42_18_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \nfunction real_part(z) {\n   return apply_generic(&quot;real_part&quot;, list(z));\n}\nfunction imag_part(z) {\n   return apply_generic(&quot;imag_part&quot;, list(z));\n}\nfunction magnitude(z) {\n   return apply_generic(&quot;magnitude&quot;, list(z));\n}\nfunction angle(z) {\n   return apply_generic(&quot;angle&quot;, list(z));\n}\n        \nfunction make_from_real_imag(x, y) {\n    function dispatch(op) {\n        return op === &quot;real_part&quot;\n            ? x\n            : op === &quot;imag_part&quot;\n              ? y\n              : op === &quot;magnitude&quot;\n                ? math_sqrt(square(x) + square(y))\n                : op === &quot;angle&quot;\n                  ? math_atan(y, x)\n                  : Error(&quot;Unknown op in make_from_real_imag&quot;, \n                          op);\n    }\n    return dispatch;\n}\n        \nfunction apply_generic(op, arg) {\n    return head(arg)(op);\n}\n        \nfunction add_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) + real_part(z2),\n               imag_part(z1) + imag_part(z2));\n}\nfunction sub_complex(z1, z2) {\n    return make_from_real_imag(\n               real_part(z1) - real_part(z2),\n               imag_part(z1) - imag_part(z2));\n}\nfunction mul_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) * magnitude(z2),\n               angle(z1) + angle(z2));\n}\nfunction div_complex(z1, z2) {\n    return make_from_mag_ang(\n               magnitude(z1) / magnitude(z2),\n               angle(z1) - angle(z2));\n}\n        \n// operation_table, put and get\n// from chapter 3 (section 3.3.3)\n	\nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        \nfunction assoc(key, records) {\n    return is_null(records)\n           ? undefined\n           : is_equal(key, head(head(records)))\n             ? head(records)\n             : assoc(key, tail(records));\n}\n    \nfunction make_table() {\n    const local_table = list(&quot;*table*&quot;);\n    function lookup(key_1, key_2) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            return undefined;\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n                return undefined;\n            } else {\n                return tail(record);\n            }\n        }\n    }\n    function insert(key_1, key_2, value) {\n        const subtable = assoc(key_1, tail(local_table));\n        if (subtable === undefined) {\n            set_tail(local_table,\n                     pair(list(key_1, pair(key_2, value)),\n                          tail(local_table)));\n        } else {\n            const record = assoc(key_2, tail(subtable));\n            if (record === undefined) {\n      	        set_tail(subtable,\n	                       pair(pair(key_2, value),\n                              tail(subtable)));\n	    } else {\n                set_tail(record, value);\n            }\n        }\n    }\n    function dispatch(m) {\n        return m === &quot;lookup&quot;\n               ? lookup\n               : m === &quot;insert&quot;\n                 ? insert\n                 : &quot;undefined operation -- table&quot;;\n    }\n    return dispatch;\n}\n    \nconst operation_table = make_table();\nconst get = operation_table(&quot;lookup&quot;);\nconst put = operation_table(&quot;insert&quot;);\n          \nfunction attach_tag(type_tag, contents) {\n    return pair(type_tag, contents);\n}\nfunction type_tag(datum) {\n    return is_pair(datum)\n           ? head(datum)\n           : Error(&quot;bad tagged datum in type_tag&quot;, datum);\n}\nfunction contents(datum) {\n    return is_pair(datum)\n           ? tail(datum)\n           : Error(&quot;bad tagged datum in contents&quot;, datum);\n}\n        \nfunction install_rectangular_package() {\n    function real_part(z) { return head(z); }\n    function imag_part(z) { return tail(z); }\n    function make_from_real_imag(x, y) { return pair(x, y); }\n    function magnitude(z) {\n        return math_sqrt(square(real_part(z)) +\n                   square(imag_part(z)));\n    }\n    function angle(z) {\n        return math_atan(imag_part(z), real_part(z));\n    }\n    function make_from_mag_ang(r, a) {\n        return pair(r * math_cos(a), r * math_sin(a));\n    }\n    // interface to the rest of the system\n    function tag(x) {\n        return attach_tag(&quot;rectangular&quot;, x);\n    }\n    put(&quot;real_part&quot;, list(&quot;rectangular&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;rectangular&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;rectangular&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;rectangular&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;rectangular&quot;,\n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;rectangular&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_rectangular_package();\n        \nfunction install_polar_package() {\n    // internal functions\n    function magnitude(z) { return head(z); }\n    function angle(z) { return tail(z); }\n    function make_from_mag_ang(r, a) { return pair(r, a); }\n    function real_part(z) {\n       return magnitude(z) * math_cos(angle(z));\n    }\n    function imag_part(z) {\n       return magnitude(z) * math_sin(angle(z));\n    }\n    function make_from_real_imag(x, y) {\n       return pair(math_sqrt(square(x) + square(y)),\n                   math_atan(y, x));\n    }\n\n    // interface to the rest of the system\n    function tag(x) { return attach_tag(&quot;polar&quot;, x); }\n    put(&quot;real_part&quot;, list(&quot;polar&quot;), real_part);\n    put(&quot;imag_part&quot;, list(&quot;polar&quot;), imag_part);\n    put(&quot;magnitude&quot;, list(&quot;polar&quot;), magnitude);\n    put(&quot;angle&quot;, list(&quot;polar&quot;), angle);\n    put(&quot;make_from_real_imag&quot;, &quot;polar&quot;, \n        (x, y) =&gt; tag(make_from_real_imag(x, y)));\n    put(&quot;make_from_mag_ang&quot;, &quot;polar&quot;,\n        (r, a) =&gt; tag(make_from_mag_ang(r, a)));\n    return &quot;done&quot;;\n}\n\ninstall_polar_package();\n	'+'\n'+'function make_from_mag_ang(r, a) {\n    function dispatch(op) {\n        return op === &quot;real_part&quot;\n            ? r * math_cos(a)\n            : op === &quot;imag_part&quot;\n              ? r * math_sin(a)\n              : op === &quot;magnitude&quot;\n                ? r\n                : op === &quot;angle&quot;\n                  ? a\n                  : Error(&quot;Unknown op in make_from_real_imag&quot;, \n                          op);\n    }\n    return dispatch;\n}'+'\n'+'\nconst my_complex_number = \n    make_from_real_imag(1.0, 4.5);\n\nconst result = \n    add_complex(my_complex_number,\n                my_complex_number);\n\nimag_part(result);		\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=3&amp;prgrm='+compressed; window.open(url); ">function make_from_mag_ang(r, a) {
    function dispatch(op) {
        return op === "real_part"
            ? r * math_cos(a)
            : op === "imag_part"
              ? r * math_sin(a)
              : op === "magnitude"
                ? r
                : op === "angle"
                  ? a
                  : Error("Unknown op in make_from_real_imag", 
                          op);
    }
    return dispatch;
}</pre></div></div>

      
	  
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.76" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.76">Exercise 2.76 </a></b>
        
        As a large system with generic operations evolves, new types of data
        objects or new operations may be needed.  For each of the three
        strategies—generic operations with explicit dispatch, data-directed
        style, and message-passing-style—describe the changes that must be
        made to a system in order to add new types or new operations.  Which
        organization would be most appropriate for a system in which new types
        must often be added?  Which would be most appropriate for a system in
        which new operations must often be added?
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_42_4_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_42_4_div"><SOLUTION>
<UL>
  <LI> <EM>Generic operations with explicit dispatch</EM>: For every new type, we need
  to touch every generic interface function, and add a new case.
</LI>
<LI> <EM>Data-directed style</EM>: Here the implementation of the generic interface
functions can be neatly packaged in 
<QUOTE>install</QUOTE> libraries for each new type. We can also have 
<QUOTE>install</QUOTE> libraries for new operations.
</LI>
<LI> <EM>Message-passing-style</EM>: Like in the data-directed style, we need to
write a library for each new type. In this case, the library consists of a dispatch
function with a case for every generic interface function.
</LI>
</UL>
Overall, it's probably best to use a data-directed style when we need to frequently
add new operations, and message-passing, when we frequently add new types.
	</SOLUTION></div>
</div>

      </EXERCISE>
</div>

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="42#footnote-link-1">[1] </a><FOOTNOTE>We use the list <kbd>list("rectangular")</kbd>
        rather than the string <kbd>"rectangular"</kbd> to allow for the possibility
        of operations with multiple arguments, not all of the same
        type.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="42#footnote-link-2">[2] </a><FOOTNOTE>The
        type the constructors are installed under needn't be a list because
        a constructor is always used to make an object of one particular
        type.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="42#footnote-link-3">[3] </a><FOOTNOTE>
      <SPLIT>
	
      </SPLIT>
      In
      
	
	
	  <kbd>apply_generic</kbd>,
	
      
      <kbd>op</kbd> has as its value the first
      argument to
      
	
	
	  <kbd>apply_generic</kbd>
	
      
      and
      <kbd>args</kbd>
      has as its value a list of the remaining arguments.
      <BREAK></BREAK>
      
	
	The function
	<kbd>apply_generic</kbd>
	
      
      also uses the primitive
      
      function
        
        
        <kbd>apply</kbd>,
        which takes two arguments, a
        
	  
	  function
	
        and a list.
	
	  
	  The function <kbd>apply</kbd>
	  
	
        applies the
        
	function,
	using the elements in the list as arguments.
        For example,
        <div class="snippet" id="javascript_42_19_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">apply(sum_of_squares, list(1, 3))</pre></div></div>
        returns 10.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="42#footnote-link-4">[4] </a><FOOTNOTE>One
        limitation of this organization is it permits only generic
        functions
        of one argument.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="41">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="43">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        2.4.3 
        Data-Directed Programming and Additivity
      
    </div>
  <script>
//<![CDATA[
var chapter_id = 42;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
