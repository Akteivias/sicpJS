<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="3.4.2 
    Mechanisms for Controlling Concurrency
  " />
    <title>
         3.4.2 
    Mechanisms for Controlling Concurrency
  
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="7qD7Gs4omkMO55hNS0oQ7qowqoip+rrtgXQuYcLbSpwy9kghqUMklOS5JS/lqFBJHlDcrEyYgf1HEH+M4CN7iQ==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-f313219f7bd4d132a6fd02c8f84b86f62781f5d155b9681036fc6390c9f3d06c.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments from Second Edition of SICP, 1996    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">Making of the JavaScript Adaptation</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">3.4.2 
    Mechanisms for Controlling Concurrency
  </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
  

  

  <div class="permalink">
<a name="p1" class="permalink"></a><p>
    We've seen that the difficulty in dealing with concurrent processes is
    rooted in the need to consider the interleaving of the order of events
    in the different processes.  For example, suppose we have two
    processes, one with three ordered events $(a,b,c)$
    and one with three ordered events $(x,y,z)$.  If the
    two processes run concurrently, with no constraints on how their execution is
    interleaved, then there are 20 different possible orderings for the events that
    are consistent with the individual orderings for the two processes:
    
      \[ \begin{array}{cccc}
      (a,b,c,x,y,z) &amp; (a,x,b,y,c,z) &amp; (x,a,b,c,y,z) &amp; (x,a,y,z,b,c)\\
      (a,b,x,c,y,z) &amp; (a,x,b,y,z,c) &amp; (x,a,b,y,c,z) &amp; (x,y,a,b,c,z)\\
      (a,b,x,y,c,z) &amp; (a,x,y,b,c,z) &amp; (x,a,b,y,z,c) &amp; (x,y,a,b,z,c)\\
      (a,b,x,y,z,c) &amp; (a,x,y,b,z,c) &amp; (x,a,y,b,c,z) &amp; (x,y,a,z,b,c)\\
      (a,x,b,c,y,z) &amp; (a,x,y,z,b,c) &amp; (x,a,y,b,z,c) &amp; (x,y,z,a,b,c)
      \end{array} \]
    
    As programmers designing this system, we would have to consider the
    effects of each of these 20 orderings and check that each behavior is
    acceptable.  Such an approach rapidly becomes unwieldy as the numbers
    of processes and events increase.
  </p>
</div>

  <div class="permalink">
<a name="p2" class="permalink"></a><p>
    A more practical approach to the design of concurrent systems is to
    devise general mechanisms that allow us to constrain the interleaving
    of concurrent processes so that we can be sure that the program
    behavior is correct.  Many mechanisms have been developed for this
    purpose.  In this section, we describe one of them, the <EM>
    serializer</EM>.
  </p>
</div>

  <div class="permalink">
<a name="h1" class="permalink"></a><h2>
    Serializing access to shared state
  </h2>
</div>

  

  <div class="permalink">
<a name="p3" class="permalink"></a><p>
    Serialization implements the following idea: Processes will execute
    concurrently, but there will be certain collections of
    
    functions
    that cannot be executed concurrently.  More precisely, serialization
    creates distinguished sets of
    
    functions
    such that only one execution of a
    
    function
    in each serialized set is permitted to happen at a time. If some
    
    function
    in the set is being executed, then a process that
    attempts to execute any
    
    function
    in the set will be forced to wait
    until the first execution has finished.
  </p>
</div>

  <div class="permalink">
<a name="p4" class="permalink"></a><p>
    We can use serialization to control access to shared variables.
    For example, if we want to update a shared variable based on the
    previous value of that variable, we put the access to the previous
    value of the variable and the assignment of the new value to the
    variable in the same
    
    function.
    We then ensure that no other
    
    function
    that assigns to the variable can run concurrently with this
    
    function
    by serializing all of these
    
    functions
    with the same serializer.  This guarantees that the value of the
    variable cannot be changed between an access and the corresponding
    assignment.
  </p>
</div>

  <SPLIT>
    
    
      <div class="permalink">
<a name="h2" class="permalink"></a><h2>
        Serializers in JavaScript
      </h2>
</div>
    
  </SPLIT>

  <div class="permalink">
<a name="p5" class="permalink"></a><p>
    To make the above mechanism more concrete, suppose that we have
    extended 
    
    JavaScript
    to include a
    
    function
    called 
    
    
      
      
        <kbd>parallel_execute</kbd>:
      
    

    <kbd EVAL="no" LATEX="yes" class="snippet">parallel_execute( f$_{1}$, f$_{2}$, $\ldots$, f$_{k}$ )</kbd>
  </p>
</div>

  <div class="permalink">
<a name="p6" class="permalink"></a><p>
    
      
      
        Each f must be a function of no arguments.  
        The function <kbd>parallel_execute</kbd>
        creates a separate process for each
        f, which applies
        f (to no arguments).
      
    
    These processes all
    run concurrently.<a class="superscript" id="footnote-link-1" href="65#footnote-1">[1]</a>
  </p>
</div>

  <div class="permalink">
<a name="p7" class="permalink"></a><p>
    As an example of how this is used, consider
    <div class="snippet" id="javascript_65_0_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">let x = 10;

parallel_execute( () =&gt; { x = x * x; },
                  () =&gt; { x = x + 1; } );</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p8" class="permalink"></a><p>
    This creates two concurrent
    processes—$P_1$, which
    sets <kbd>x</kbd> to
    <kbd>x</kbd> times <kbd>x</kbd>,
    and $P_2$, which increments
    <kbd>x</kbd>.  After execution is complete,
    <kbd>x</kbd> will be left with one of five possible
    values, depending on the interleaving of the events of
    $P_1$ and $P_2$:
    <UL>
      <LI>
      101: $P_1$
      sets <kbd>x</kbd> to 100 and then
      $P_2$ increments
      <kbd>x</kbd> to 101.
      </LI>
      <LI>
      121: $P_2$ increments <kbd>x</kbd> to 11 and then
      $P_1$ sets <kbd>x</kbd> to
      <kbd>x</kbd> times <kbd>x</kbd>.
      </LI>
      <LI>
      110: $P_2$ changes
      <kbd>x</kbd> from 10 to 11 between the two
      times that $P_1$ accesses the value of
      <kbd>x</kbd> during the evaluation of
      <kbd>x * x</kbd>.
      </LI>
      <LI>
      11:  $P_2$ accesses <kbd>x</kbd>, then
      $P_1$ sets <kbd>x</kbd> to 100,
      then $P_2$ sets <kbd>x</kbd>.
      </LI>
      <LI>
      100: $P_1$ accesses <kbd>x</kbd> (twice),
      then $P_2$ sets <kbd>x</kbd> to 11,
      then $P_1$ sets <kbd>x</kbd>.
      </LI>
    </UL>
  </p>
</div>

  <div class="permalink">
<a name="p9" class="permalink"></a><p>
    We can constrain the concurrency by using serialized
    
    functions,
    which are created by <EM>serializers</EM>. Serializers are constructed by
    
      
      <kbd>make_serializer</kbd>,
      
    
    whose implementation is given below.  A serializer takes a
    
    function
    as argument and returns a serialized
    
    function
    that behaves like the original
    
    function.
    All calls to a given serializer return serialized
    
    functions
    in the same set.
  </p>
</div>

  <div class="permalink">
<a name="p10" class="permalink"></a><p>
    Thus, in contrast to the example above, executing
    <div class="snippet" id="javascript_65_1_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">let x = 10;

const s = make_serializer();

parallel_execute(s( () =&gt; { x = x * x; }),
                 s( () =&gt; { x = x + 1; } ));</pre></div></div>
    can produce only two possible values for
    <kbd>x</kbd>, 101 or 121.
    The other possibilities are eliminated, because the execution of
    $P_1$ and
    $P_2$ cannot be interleaved.
  </p>
</div>

  <div class="permalink">
<a name="p11" class="permalink"></a><p>
    Here is a version of the
    
    <kbd>make_account</kbd>
    
    
    
    function
    from section <REF NAME="sec:local-state-variables"><a class="superscript" id="3.4.2-sec-link-3.1.1" href="49">3.1.1</a></REF>,
    where the deposits and withdrawals have been serialized:
    <div class="snippet" id="javascript_65_2_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt; amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;
    }
    const protector = make_serializer();
    function dispatch(m) {
        return m === "withdraw"
               ? protector(withdraw)
               : m === "deposit"
                 ? protector(deposit)
                 : m === "balance"
                   ? balance
                   : Error("Unknown request in make_account",
                           m);
    }
    return dispatch;
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p12" class="permalink"></a><p>
    With this implementation, two processes cannot be withdrawing from or
    depositing into a single account concurrently.  This eliminates the source
    of the error illustrated in figure <REF NAME="fig:bank-access"><a class="superscript" id="3.4.2-fig-link-3.29" href="64#fig_3.29">3.29</a></REF>,
    where Peter changes the account balance between the times when Paul accesses
    the balance to compute the new value and when Paul actually performs the
    assignment.  On the other hand, each account has its own serializer,
    so that deposits and withdrawals for different accounts can proceed
    concurrently.
  </p>
</div>

  <div class="permalink">
<a name="ex_3.39" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.39">Exercise 3.39 </a></b>
    Which of the five possibilities in the parallel execution shown above
    remain if we instead serialize execution as follows:

    <div class="snippet" id="javascript_65_3_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">let x = 10;

const s = make_serializer();

parallel_execute( () =&gt; { x = s( () =&gt; x * x ); }, 
                  s( () =&gt; { x = x + 1; } ) );</pre></div></div>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.40" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.40">Exercise 3.40 </a></b>
    Give all possible values of <kbd>x</kbd>
    that can result from executing

    <div class="snippet" id="javascript_65_4_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">let x = 10;

parallel_execute( () =&gt; { x = x * x; }, 
                  () =&gt; { x = x * x * x; } );</pre></div></div>

    Which of these possibilities remain if we instead use serialized
    
    functions:

    <div class="snippet" id="javascript_65_5_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">let x = 10;

const s = make_serializer();

parallel_execute( s( () =&gt; x = x * x ) , 
                  s( () =&gt; x = x * x * x ) )</pre></div></div>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.41" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.41">Exercise 3.41 </a></b>
  Ben Bitdiddle worries that it would be better to implement the bank
  account as follows (where the commented line has been changed):

  <div class="snippet" id="javascript_65_6_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt; amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;
    }
    const protected_ = make_serializer();
    function dispatch(m) {
        return m === "withdraw"
               ? protected_(withdraw)
                 : m === "deposit"
                   ? protected_(deposit)
                   : m === "balance"
                     ? protected_( () =&gt; balance )() // serialized
                     : error("Unknown request in make_account",
                             m);
                    }
                }
                return dispatch;
            }</pre></div></div>
  because allowing unserialized access to the bank balance can
  result in anomalous behavior.  Do you agree?  Is there any
  scenario that demonstrates Ben's concern?
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.42" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.42">Exercise 3.42 </a></b>
    Ben Bitdiddle suggests that it's a waste of time to
    create a new serialized
    
    function
    in response to every <kbd>withdraw</kbd> and
    <kbd>deposit</kbd> message.  He says that
    
    <kbd>make_account</kbd>
    could be changed so that the calls to
    
      
      
        <kbd>protected_</kbd>
      
    
    are done outside the <kbd>dispatch</kbd>
    
    function.
    That is, an account would return the same serialized
    
    function
    (which was created at the same time as the account) each time
    it is asked for a withdrawal
    
    function.
    <div class="snippet" id="javascript_65_7_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_account(balance) {
    function withdraw(amount) {
        if (balance &gt; amount) {
            balance = balance - amount;
            return balance;
        } else {
            return "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;
    }
    const protected_ = make_serializer();
    const protected_withdraw = protected_(withdraw);
    const protected_deposit = protected_(deposit);
    function dispatch(m) {
        return m === "withdraw"
               ? protected_withdraw
               : m === "deposit"
                 ? protected_deposit
                 : m === "balance"
                   ? balance
                   : error("Unknown request in make_account",
                           m);
    }
    return dispatch;
}</pre></div></div>

    Is this a safe change to make?  In particular, is there any
    difference in what concurrency is allowed by these two versions
    of
    
    <kbd>make_account</kbd>
    ? 
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>
  

  <div class="permalink">
<a name="h3" class="permalink"></a><h2>
    Complexity of using multiple shared resources
  </h2>
</div>

  
  
  <div class="permalink">
<a name="p13" class="permalink"></a><p>
    Serializers provide a powerful abstraction that helps isolate the
    complexities of concurrent programs so that they can be dealt with
    carefully and (hopefully) correctly.  However, while using serializers
    is relatively straightforward when there is only a single shared
    resource (such as a single bank account), concurrent programming can
    be treacherously difficult when there are multiple shared resources.
  </p>
</div>

  <div class="permalink">
<a name="p14" class="permalink"></a><p>
    To illustrate one of the difficulties that can arise, suppose we wish to swap
    the balances in two bank accounts.  We access each account to find the
    balance, compute the difference between the balances, withdraw this
    difference from one account, and deposit it in the other account.  We
    could implement this as
    follows:<a class="superscript" id="footnote-link-2" href="65#footnote-2">[2]</a>

    <div class="snippet" id="javascript_65_8_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function exchange(account1, account2) {
    const difference = account1("balance") - account2("balance");
    account1("withdraw")(difference);
    account2("deposit")(difference);
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p15" class="permalink"></a><p>
    This
    function
    works well when only a single process is trying to do
    the exchange.  Suppose, however, that Peter and Paul both have access
    to accounts $a_1$, $a_2$,
    and $a_3$, and that
    Peter exchanges $a_1$ and
    $a_2$ while Paul concurrently exchanges
    $a_1$ and $a_3$.
    Even with account deposits and withdrawals
    serialized for individual accounts (as in the
    
    <kbd>make_account</kbd>
    
    
    function
    shown above in this section),
    <kbd>exchange</kbd> can still
    produce incorrect results.  For example, Peter might compute the
    difference in the balances for
    $a_1$ and $a_2$, but then Paul
    might change the balance in $a_1$ before Peter is able
    to complete the exchange.<a class="superscript" id="footnote-link-3" href="65#footnote-3">[3]</a>
    For correct behavior, we must arrange for the <kbd>exchange</kbd>
    function
    to lock out any other concurrent accesses to the accounts during the
    entire time of the exchange.
  </p>
</div>

  <div class="permalink">
<a name="p16" class="permalink"></a><p>
    One way we can accomplish this is by using both accounts' serializers
    to serialize the entire <kbd>exchange</kbd>
    
    function.
    To do this, we will arrange for access to an account's serializer.
    Note that we are deliberately
    breaking the modularity of the bank-account object by exposing the
    serializer.  The following version of
    
    <kbd>make_account</kbd>
    
    is identical to the original version given in
    Section <REF NAME="sec:local-state-variables"><a class="superscript" id="3.4.2-sec-link-3.1.1" href="49">3.1.1</a></REF>, except that a serializer is
    provided to protect the balance variable, and the serializer is
    exported via message passing:

    <div class="snippet" id="javascript_65_9_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_account_and_serializer(balance) {
    function withdraw(amount) {
        if (balance &gt; amount) {
            balance = balance - amount;
        } else {
            "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;
    }
    const balance_serializer = make_serializer();
    function dispatch(m) {
        if (m === "withdraw") {
            return withdraw;
        } else if (m === "deposit") {
            return deposit;
        } else if (m === "balance") {
            return balance;
        } else if (m === "serializer") {
            return balance_serializer;
        } else {
            return "Unknown request - - MAKE-ACCOUNT";
        }
    }
    return dispatch;
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p17" class="permalink"></a><p>
    We can use this to do serialized deposits and withdrawals.  However,
    unlike our earlier serialized account, it is now the responsibility of
    each user of bank-account objects to explicitly manage the
    serialization, for example as
    follows:<a class="superscript" id="footnote-link-4" href="65#footnote-4">[4]</a>

    <div class="snippet" id="javascript_65_10_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function deposit(account, amount) {
    const s = account("serializer");
    const d = account("deposit");
    s(d(amount));
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p18" class="permalink"></a><p>
    Exporting the serializer in this way gives us enough flexibility to
    implement a serialized exchange program.  We simply
    serialize the original
    <kbd>exchange</kbd>
    
    function
    with the serializers for both accounts:

    <div class="snippet" id="javascript_65_11_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function serialized_exchange(account1, account2) {
    const serializer1 = account1("serializer");
    const serializer2 = account2("serializer");
    serializer1(serializer2(exchange))(account1, account2);
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="ex_3.43" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.43">Exercise 3.43 </a></b>
    Suppose that the balances in three accounts start out as <DOLLAR></DOLLAR>10, <DOLLAR></DOLLAR>20,
    and <DOLLAR></DOLLAR>30, and that multiple processes run, exchanging the balances in
    the accounts.  Argue that if the processes are run sequentially,
    after any number of concurrent exchanges, the account balances should be 
    <DOLLAR></DOLLAR>10, <DOLLAR></DOLLAR>20, and <DOLLAR></DOLLAR>30 in some order.
    Draw a timing diagram like the one in Figure <REF NAME="fig:bank-access"><a class="superscript" id="3.4.2-fig-link-3.29" href="64#fig_3.29">3.29</a></REF> to
    show how this condition can be violated if the exchanges are
    implemented using the first version of the account-exchange program in
    this section.  On the other hand, argue that even with this
    <kbd>exchange</kbd> program, the sum of the balances
    in the accounts will be preserved.  Draw a timing diagram to show how
    even this condition would be violated if we did not serialize the
    transactions on individual accounts.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.44" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.44">Exercise 3.44 </a></b>
    
    Consider the problem of transferring an amount from one account to
    another.  Ben Bitdiddle claims that this can be accomplished with the
    following
    
    function,
    even if there are multiple people concurrently
    transferring money among multiple accounts, using any account
    mechanism that serializes deposit and withdrawal transactions, for
    example, the version of
    
    
      <kbd>make_account</kbd>
    
    
    in the text above.

    <div class="snippet" id="javascript_65_12_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function transfer(from_account, to_account, amount) {
    from_account("withdraw")(amount);
    to_account("deposit")(amount);
}</pre></div></div>

    Louis Reasoner claims that there is a problem here, and that we need
    to use a more sophisticated method, such as the one required for
    dealing with the exchange problem.  Is Louis right?  If not, what is
    the essential difference between the transfer problem and the exchange
    problem?  (You should assume that the balance in
    
      
      <kbd>from_account</kbd>
    
    is at least <kbd>amount</kbd>.)
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.45" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.45">Exercise 3.45 </a></b>
    Louis Reasoner thinks our bank-account system is unnecessarily complex
    and error-prone now that deposits and withdrawals aren't
    automatically serialized. He suggests that
    
      
      
        <kbd>make_account_and_serializer</kbd>
      
    
    should have exported the serializer 
    
      
      
        (for use by such functions as
        <kbd>serialized_exchange</kbd>)        
      
    
    in addition to (rather than instead of) using it to serialize accounts and
    deposits as
    
    <kbd>make_account</kbd>
    
    did. He proposes to redefine accounts as follows:
    <div class="snippet" id="javascript_65_13_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_account_and_serializer(balance) {
    function withdraw(amount) {
        if (balance &gt; amount) {
            balance = balance - amount;
        } else {
            "Insufficient funds";
        }
    }
    function deposit(amount) {
        balance = balance + amount;
        return balance;
    }
    const balance_serializer = make_serializer();
    function dispatch(m) {
        return m === "withdraw"
               ? balance_serializer(withdraw)
               : m === "deposit"
                 ? balance_serializer(deposit)
                 : m === "balance"
                   ? balance
                   : m === "serializer"
                     ? balance_serializer
                     : error("Unknown request in make_account",
                             m);
    }
    return dispatch;
}</pre></div></div>

    Then deposits are handled as with the original
    
    <kbd>make_account</kbd>:
    
    <div class="snippet" id="javascript_65_14_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function deposit(account, amount) {
    account("deposit")(amount);
}</pre></div></div>
    Explain what is wrong with Louis's reasoning.  In particular,
    consider what happens when
    
    <kbd>serialized_exchange</kbd>
    
    is called.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>
  
  

  <div class="permalink">
<a name="h4" class="permalink"></a><h2>
    Implementing serializers
  </h2>
</div>

  

  <div class="permalink">
<a name="p19" class="permalink"></a><p>
    We implement serializers in terms of a more primitive synchronization
    mechanism called a 
    
    <EM>mutex</EM>.  A mutex is an object that supports
    two operations—the mutex can be 
    
    <EM>acquired</EM>, and the mutex can be
    
    <EM>released</EM>.  Once a mutex has been acquired, no other acquire
    operations on that mutex may proceed until the mutex is
    released.<a class="superscript" id="footnote-link-5" href="65#footnote-5">[5]</a>
    In our implementation, each serializer has an associated mutex.  Given a
    
    function
    <kbd>p</kbd>, the serializer returns a
    
    function
    that acquires the mutex, runs <kbd>p</kbd>,
    and then releases the mutex.  This ensures that only one of the
    
    functions
    produced by the serializer can be running at once, which is
    precisely the serialization property that we need to guarantee.

    <div class="snippet" id="javascript_65_15_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_serializer() {
    const mutex = make_mutex();
    return p =&gt; {
        function serialized_p(args) {
            mutex("acquire");
            const val = p(args);
            mutex("release");
            return val;
        }
        return serialized_p;   
    };
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p20" class="permalink"></a><p>
    The mutex is a mutable object (here we'll use a one-element
    list, which we'll refer to as a 
    
    <EM>cell</EM>) that can hold the value
    true or false.  When the value is false, the mutex is available to be
    acquired.  When the value is true, the mutex is unavailable, and any
    process that attempts to acquire the mutex must wait.
  </p>
</div>

  <div class="permalink">
<a name="p21" class="permalink"></a><p>
    Our mutex constructor
    
    <kbd>make_mutex</kbd>
    
    begins by initializing the cell
    contents to false.  To acquire the mutex, we test the cell.  If the
    mutex is available, we set the cell contents to true and proceed.
    Otherwise, we wait in a loop, attempting to acquire over and over
    again, until we find that the mutex is
    available.<a class="superscript" id="footnote-link-6" href="65#footnote-6">[6]</a>
    To release the mutex, we set the cell contents to false.

    <div class="snippet" id="javascript_65_16_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_mutex() {
    const cell = list(false);
    function the_mutex(m) {
        return m === "aquire"
               ? ( test_and_set(cell)
                   ? the_mutex("aquire") // retry
                   : true )
               : m === "release"
                 ? clear(cell)
                 : error("Unknown request in mutex",
                         m);
    }
    return the_mutex;
}
function clear(cell) {
    set_head(cell, false);
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p22" class="permalink"></a><p>
    
      
      The function <kbd>test_and_set</kbd>
      
    
    tests the cell and returns the result of the
    test.  In addition, if the test was false,
    
    <kbd>test_and_set</kbd>
    
    sets the cell contents to true before returning false.  We can express this
    behavior as the following
    
    function:

    <div class="snippet" id="javascript_65_17_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function test_and_set(cell) {
    if (head(cell)) {
        return true;
    } else {
        set_head(cell, true);
        return false;
    }
}</pre></div></div>
  </p>
</div>

  <div class="permalink">
<a name="p23" class="permalink"></a><p>
    However, this implementation of
    
    <kbd>test_and_set</kbd>
    does not suffice as it stands.  There is a crucial subtlety here, which is the
    essential place where concurrency control enters the system: The
    
    <kbd>test_and_set</kbd>
    
    operation must be performed 
    
    <EM>atomically</EM>. That is, we must guarantee that, once a process has tested
    the cell and found it to be false, the cell contents will actually be set to true
    before any other process can test the cell.  If we do not make this
    guarantee, then the mutex can fail in a way similar to the
    bank-account failure in Figure <REF NAME="fig:bank-access"><a class="superscript" id="3.4.2-fig-link-3.29" href="64#fig_3.29">3.29</a></REF>.  (See
    exercise <REF NAME="ex:atomic-test-and-set"><a class="superscript" id="3.4.2-ex-link-3.46" href="65#ex_3.46">3.46</a></REF>.)
  </p>
</div>

  <div class="permalink">
<a name="p24" class="permalink"></a><p>
    The actual implementation of
    
    <kbd>test_and_set</kbd>
    
    depends on the details of how our system runs concurrent processes.
    For example, we might be executing concurrent processes on a sequential
    processor using a 
    
    time-slicing mechanism that cycles through the processes,
    permitting each process to run for a short time before interrupting it
    and moving on to the next process.  In that case,
    
      
      
        <kbd>test_and_set</kbd>
      
    
    can work by disabling time slicing during the testing and
    setting.
    
	
    
  Alternatively, multiprocessing computers provide instructions that
  support atomic operations directly in
  hardware.<a class="superscript" id="footnote-link-7" href="65#footnote-7">[7]</a>
  </p>
</div>

  <div class="permalink">
<a name="ex_3.46" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.46">Exercise 3.46 </a></b>
    Suppose that we implement
    
      
      <kbd>test_and_set</kbd>
    
    using an ordinary
    
    function
    as shown in the text, without attempting to make the operation
    atomic.  Draw a timing diagram like the one in
    figure <REF NAME="fig:bank-access"><a class="superscript" id="3.4.2-fig-link-3.29" href="64#fig_3.29">3.29</a></REF> to demonstrate how the mutex
    implementation can fail by allowing two processes to acquire the mutex
    at the same time.
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.47" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.47">Exercise 3.47 </a></b>
    
    
    A semaphore (of size $n$) is a generalization of a mutex.
    Like a mutex, a semaphore supports acquire and release operations, but it is
    more general in that up to $n$ processes can acquire it
    concurrently.  Additional processes that attempt to acquire the
    semaphore must wait for release operations.  Give implementations of
    semaphores
    <OL>
      <LI>in terms of mutexes
      </LI>
      <LI>
        in terms of atomic
        
          
          <kbd>test_and_set</kbd>
        
        operations.
      </LI>
    </OL>
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>
  

  <div class="permalink">
<a name="h5" class="permalink"></a><h2>
    Deadlock
  </h2>
</div>

  
  

  <div class="permalink">
<a name="p25" class="permalink"></a><p>
    
    Now that we have seen how to implement serializers, we can see
    that account exchanging still has a problem, even with the
    
      
      <kbd>serialized_exchange</kbd>
      
    
    
    function
    above.
    Imagine that Peter attempts to exchange $a_1$
    with $a_2$ while Paul concurrently attempts to
    exchange $a_2$
    with $a_1$.
    Suppose that Peter's process reaches the point where
    it has entered a serialized
    
    function
    protecting $a_1$ and, just
    after that, Paul's process enters a serialized
    
    function
    protecting
    $a_2$.  Now Peter cannot proceed (to
    enter a serialized
    
    function
    protecting $a_2$) until Paul exits
    the serialized
    
    function
    protecting $a_2$.  Similarly, Paul
    cannot proceed until Peter exits the serialized
    
    function
    protecting $a_1$.  Each process is
    stalled forever, waiting for the other.  This situation is
    called a <EM>deadlock</EM>.  Deadlock is always a danger in systems
    that provide concurrent access to multiple shared resources.
  </p>
</div>

  <div class="permalink">
<a name="p26" class="permalink"></a><p>
    
    One way to avoid the deadlock in this situation is to give each
    account a unique identification number and rewrite
    
      
      <kbd>serialized_exchange</kbd>
    
    so that a process will always attempt to enter a
    
    function
    protecting the
    lowest-numbered account first.  Although this method works well for
    the exchange problem, there are other situations that require more
    sophisticated deadlock-avoidance techniques, or where deadlock cannot
    be avoided at all.  (See exercises <REF NAME="ex:deadlock-avoid"><a class="superscript" id="3.4.2-ex-link-3.48" href="65#ex_3.48">3.48</a></REF>
    and <REF NAME="ex:deadlock-cannot-avoid"><a class="superscript" id="3.4.2-ex-link-3.49" href="65#ex_3.49">3.49</a></REF>.)<a class="superscript" id="footnote-link-8" href="65#footnote-8">[8]</a>
  </p>
</div>

  <div class="permalink">
<a name="ex_3.48" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.48">Exercise 3.48 </a></b>
    
    Explain in detail why the deadlock-avoidance method described above,
    (i.e., the accounts are numbered, and each process attempts to acquire
    the smaller-numbered account first) avoids deadlock in the exchange
    problem.  Rewrite
    
      
      <kbd>serialized_exchange</kbd>
      
    
    to incorporate this idea. (You will also need to modify
    
      
      <kbd>make_account</kbd>
      
    
    so that each account is created with a number, which can be accessed by
    sending an appropriate message.)
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>

  <div class="permalink">
<a name="ex_3.49" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_3.49">Exercise 3.49 </a></b>
    Give a scenario where the deadlock-avoidance mechanism described
    above does not work.  (Hint: In the exchange problem, each process
    knows in advance which accounts it will need to get access to.  Consider a
    situation where a process must get access to some shared resources before it
    can know which additional shared resources it will require.)
    
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#no_solution_65_1_div" data-toggle="collapse">Add solution</button></div>
<div class="solution_content collapse" id="no_solution_65_1_div">There is currently no solution available for this exercise. This textbook adaptation is a community effort. Do consider contributing by providing a solution for this exercise, using a Pull Request in <a address="https://github.com/source-academy/sicp" href="https://github.com/source-academy/sicp">Github</a>.</div>
</div></EXERCISE>
</div>
  
  


  <div class="permalink">
<a name="h6" class="permalink"></a><h2>
    Concurrency, time, and communication
  </h2>
</div>

  <div class="permalink">
<a name="p27" class="permalink"></a><p>
    We've seen how programming concurrent systems requires controlling the
    ordering of events when different processes access shared
    state, and we've seen how to achieve this control through judicious
    use of serializers.  But the problems of concurrency
    lie deeper than this, because, from a fundamental point of view, it's
    not always clear what is meant by <QUOTE>shared state.</QUOTE>
  </p>
</div>

  <div class="permalink">
<a name="p28" class="permalink"></a><p>
    Mechanisms such as
    
      
      <kbd>test_and_set</kbd>
      
    
    require processes to examine a
    global shared flag at arbitrary times.  This is problematic and
    inefficient to implement in modern high-speed processors, where
    due to optimization techniques such as pipelining and cached memory,
    the contents of memory
    may not be in a consistent state at every instant.  In contemporary
    multiprocessing systems, therefore, the serializer paradigm is being
    supplanted by new approaches to concurrency
    control.<a class="superscript" id="footnote-link-9" href="65#footnote-9">[9]</a>
  </p>
</div>

  <div class="permalink">
<a name="p29" class="permalink"></a><p>
    The problematic aspects of shared state also arise
    in large, distributed systems.  For
    instance, imagine a
    distributed banking system where individual branch banks maintain
    local values for bank balances and periodically compare these with
    values maintained by other branches.  In such a system the value of
    <QUOTE>the account balance</QUOTE> would be undetermined, except right after
    synchronization.
    If Peter deposits money in an account he holds
    jointly with Paul, when should we say that the account balance has
    changed—when the balance in the local branch changes, or not until
    after the synchronization?  
    And if Paul accesses the account from a
    different branch, what are the reasonable constraints to place on the
    banking system such that the behavior is <QUOTE>correct</QUOTE>?  
    The only thing that might matter for
    correctness is the behavior observed by Peter and Paul individually
    and the <QUOTE>state</QUOTE> of the account immediately after synchronization.
    Questions about the
    <QUOTE>real</QUOTE> account balance or the order of events between
    synchronizations may be irrelevant or meaningless.<a class="superscript" id="footnote-link-10" href="65#footnote-10">[10]</a>
  </p>
</div>

  <div class="permalink">
<a name="p30" class="permalink"></a><p>
    
    The basic phenomenon here is that synchronizing different processes,
    establishing shared state, or imposing an order on events requires
    communication among the processes.  In essence, any notion of time in
    concurrency control must be intimately tied to
    communication.<a class="superscript" id="footnote-link-11" href="65#footnote-11">[11]</a>
    It is intriguing that a similar connection between time and
    communication also arises in the 
    
    Theory of Relativity, where the speed of light (the
    fastest signal that can be used to synchronize events) is a
    fundamental constant relating time and space.  The
    complexities we encounter in dealing with time and state in our
    computational models may in fact mirror a fundamental complexity of
    the physical universe.
    
    
  </p>
</div>

<hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="65#footnote-link-1">[1] </a><FOOTNOTE>
    <SPLIT>
      
      
        The function <kbd>parallel_execute</kbd> is not
        part of the JavaScript standard, but it can be implemented using the
        <kbd>SharedArrayBuffer</kbd> feature mentioned            
        in section <REF NAME="sec:nature-of-time"><a class="superscript" id="3.4.2-sec-link-3.4.1" href="64">3.4.1</a></REF>.
      
    </SPLIT>
  </FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="65#footnote-link-2">[2] </a><FOOTNOTE>We have simplified <kbd>exchange</kbd>
    by exploiting the fact that our <kbd>deposit</kbd>
    message accepts negative amounts.  (This is a serious bug in our banking
    system!)</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="65#footnote-link-3">[3] </a><FOOTNOTE>If the account balances start out as <DOLLAR></DOLLAR>10,
    <DOLLAR></DOLLAR>20, and <DOLLAR></DOLLAR>30, then after any number of concurrent exchanges, the
    balances should still be <DOLLAR></DOLLAR>10, <DOLLAR></DOLLAR>20, and
    <DOLLAR></DOLLAR>30 in some order.  Serializing the deposits to individual accounts is not
    sufficient to guarantee this.
    See exercise <REF NAME="ex:exchange-bug"><a class="superscript" id="3.4.2-ex-link-3.43" href="65#ex_3.43">3.43</a></REF>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="65#footnote-link-4">[4] </a><FOOTNOTE>Exercise <REF NAME="ex:export-serializer"><a class="superscript" id="3.4.2-ex-link-3.45" href="65#ex_3.45">3.45</a></REF>
    investigates why
    deposits and withdrawals are no longer automatically serialized
    by the account.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-5" href="65#footnote-link-5">[5] </a><FOOTNOTE>The term <QUOTE>mutex</QUOTE> is an abbreviation for 
    
    <EM>mutual
    exclusion</EM>.  The general problem of arranging a mechanism that permits
    concurrent processes to safely share resources is called the mutual
    exclusion problem.  Our mutex is a simple variant of the 
    
    <EM>semaphore</EM> mechanism (see exercise <REF NAME="ex:semaphore"><a class="superscript" id="3.4.2-ex-link-3.47" href="65#ex_3.47">3.47</a></REF>),
    which was introduced in the 
    
    <QUOTE>THE</QUOTE> Multiprogramming System developed at the
    
    Technological University of Eindhoven and named for the university's
    initials in Dutch (<CITATION>Dijkstra 1968a</CITATION>).  The acquire and
    release operations were originally called 
    
    
    
    P and V, from the Dutch
    words <EM>passeren</EM> (to pass) and <EM>vrijgeven</EM> (to release), in
    reference to the semaphores used on railroad systems.  Dijkstra's
    classic exposition (1968b) was one of the first to clearly present the
    issues of concurrency control, and showed how to use semaphores to
    handle a variety of concurrency problems.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-6" href="65#footnote-link-6">[6] </a><FOOTNOTE>In most time-shared operating systems,
    processes that are 
    
    blocked by a mutex do
    
    not waste time <QUOTE>busy-waiting</QUOTE> as above.  Instead, the system
    schedules another process to run while the first is waiting, and the blocked
    process is awakened when the mutex becomes available.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-7" href="65#footnote-link-7">[7] </a><FOOTNOTE>There are many variants of such
  
  instructions—including test-and-set, test-and-clear, swap,
  compare-and-exchange, load-reserve, and store-conditional—whose
  design must be carefully matched to the machine's
  processor–memory interface.
  One issue that arises here is to determine what happens
  if two processes attempt to acquire the same resource
  at exactly the same time by using such an instruction.
  This requires some mechanism for making a decision about
  which process gets control. Such a mechanism is called an 
  
  <EM>arbiter</EM>.  Arbiters usually boil down to some sort of hardware
  device. Unfortunately, it is possible to prove that one cannot physically
  construct a fair arbiter that works 100% of the time unless one
  allows the arbiter an arbitrarily long time to make its decision.
  The fundamental phenomenon here was originally observed by the
  fourteenth-century French philosopher 
  
  Jean Buridan in his commentary on
  
  Aristotle's <EM>De caelo</EM>.  Buridan argued that a perfectly
  rational
  
  dog placed between two equally attractive sources of food will starve
  to death, because it is incapable of deciding which to go to first.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-8" href="65#footnote-link-8">[8] </a><FOOTNOTE>The general
    technique for avoiding deadlock by numbering the
    
    shared resources and acquiring them in order is due to 
    
    
    
    Havender
    (1968).  Situations where deadlock cannot be avoided require
    <EM>deadlock-recovery</EM> methods, which entail having processes
    <QUOTE>back out</QUOTE> of the deadlocked state and try again.
    Deadlock-recovery mechanisms are widely used in database management
    systems, a topic that
    is treated in detail in
    <CITATION>Gray and Reuter 1993</CITATION>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-9" href="65#footnote-link-9">[9] </a><FOOTNOTE>One such alternative to serialization is called 
    
    <EM>barrier synchronization</EM>.  The programmer permits concurrent processes
    to execute as they please, but establishes certain synchronization points
    (<QUOTE>barriers</QUOTE>) through which no process can proceed until all the
    processes have reached the barrier.  Modern processors provide machine
    instructions that permit programmers to establish synchronization
    points at places where consistency is required.  The 
    
    PowerPC$^{\textrm{TM}}$, for example,
    includes for this purpose two instructions called
    
    SYNC and 
    
    EIEIO (Enforced In-order Execution of Input/Output).</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-10" href="65#footnote-link-10">[10] </a><FOOTNOTE>This may seem
    like a strange point of view, but there are
    
    systems that work this way.  International charges to credit-card
    accounts, for example, are normally cleared on a per-country basis,
    and the charges made in different countries are periodically
    reconciled.  Thus the account balance may be different in
    different countries.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-11" href="65#footnote-link-11">[11] </a><FOOTNOTE>For distributed
    systems, this perspective was pursued by 
    
    Lamport (1978), who showed how
    to use communication to establish <QUOTE>global clocks</QUOTE> that can be
    used to establish orderings on events in distributed systems.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="64">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="66">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        3.4.2 
    Mechanisms for Controlling Concurrency
  
    </div>
  <script>
//<![CDATA[
var chapter_id = 65;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
