<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="2.3.2 
        Example: Symbolic Differentiation
      " />
    <title>
         2.3.2 
        Example: Symbolic Differentiation
      
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="G15fJwsMCE5siNvvO7S9EKMxImypWvRWxB9fOL/5h/jHCOwcbGe2mYbWZo2VVv23F1FUSEw4z0YCew7VnQG27Q==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-f313219f7bd4d132a6fd02c8f84b86f62781f5d155b9681036fc6390c9f3d06c.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments from Second Edition of SICP, 1996    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">Making of the JavaScript Adaptation</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">2.3.2 
        Example: Symbolic Differentiation
      </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      
      
      

      <div class="permalink">
<a name="p1" class="permalink"></a><p>
      As an illustration of symbol manipulation and a further illustration
      of data abstraction, consider the design of a
      function
      that performs
      symbolic differentiation of algebraic expressions.  We would like the
      function
      to take as arguments an algebraic expression and a variable
      and to return the derivative of the expression with respect to the
      variable.  For example, if the arguments to the
      function
      are $ax^2 + bx +c$ and $x$, the
      function
      should return $2ax+b$.  Symbolic
      differentiation is of special historical significance in Lisp.  It was
      one of the motivating examples behind the development of a computer
      language for symbol manipulation.  Furthermore, it marked the
      beginning of the line of research that led to the development of
      powerful systems for symbolic mathematical work, which are currently
      being used by a growing number of applied mathematicians and
      physicists.
      </p>
</div>
      <div class="permalink">
<a name="p2" class="permalink"></a><p>
      In developing the symbolic-differentiation program, we will follow the
      same strategy of data abstraction that we followed in developing the
      rational-number system of section <REF NAME="sec:rationals"><a class="superscript" id="2.3.2-sec-link-2.1.1" href="25">2.1.1</a></REF>.  That is, we will first
      define a differentiation algorithm that operates on abstract
      objects such as <QUOTE>sums,</QUOTE> <QUOTE>products,</QUOTE> and <QUOTE>variables</QUOTE> without
      worrying about how these are to be represented.  Only afterward will
      we address the representation problem.
      </p>
</div>

      <div class="permalink">
<a name="h1" class="permalink"></a><h2>
        The differentiation program with abstract data
      </h2>
</div>

      
      <div class="permalink">
<a name="p3" class="permalink"></a><p>
      In order to keep things simple, we will consider a very simple
      symbolic-differentiation program that handles expressions that are
      built up using only the operations of addition and multiplication with
      two arguments.  Differentiation of any such expression can be carried
      out by applying the following reduction rules:

      
        \[ \frac{dc}{dx} = 0\text{ for $c$ a constant or a variable different from $x$} \]
      

      
        \[ \frac{dx}{dx} = 1 \]
      

      
        \[ \frac{d(u+v)}{dx} = \frac{du}{dx}+\frac{dv}{dx} \]
      

      
        \[ \frac{d(uv)}{dx} = u\left( \frac{dv}{dx}\right)+v\left(
        \frac{du}{dx}\right)\]
      
      Observe that the latter two rules are recursive in nature.  That is, 
      to obtain the derivative of a sum we first find the derivatives of the
      terms and add them.  Each of the terms may in turn be an
      expression that needs to be decomposed.  Decomposing into smaller and
      smaller pieces will eventually produce pieces that are either
      constants or variables, whose derivatives will be either $0$ or $1$.
      </p>
</div>
      <div class="permalink">
<a name="p4" class="permalink"></a><p>
      To embody these rules in a
      function
      we indulge in a little 
      
      wishful
      thinking, as we did in designing the rational-number implementation.
      If we had a means for representing algebraic expressions, we should be
      able to tell whether an expression is a sum, a product, a constant, or
      a variable.  We should be able to extract the parts of an expression.
      For a sum, for example we want to be able to extract the addend
      (first term) and the augend (second term).  We should also be able to
      construct expressions from parts.  Let us assume that we already have
      functions
      to implement the following selectors, constructors, and
      predicates:
      <TABLE>
        <TR>
          <TD>
            <kbd>is_variable(e)</kbd>
          </TD>
          <TD>
            Is <kbd>e</kbd> a variable?
          </TD>
        </TR>
        <TR>
          <TD>
          <kbd>is_same_variable(v1, v2)</kbd>
          </TD>
          <TD>
            Are <kbd>v1</kbd> and <kbd>v2</kbd> the same variable?
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>is_sum(e)</kbd>
          </TD>
          <TD>
            Is <kbd>e</kbd> a sum?
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>addend(e)</kbd>
          </TD>
          <TD>
            Addend of the sum <kbd>e</kbd>.
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>augend(e)</kbd> 
          </TD>
          <TD>
            Augend of the sum <kbd>e</kbd>.
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>make_sum(a1, a2)</kbd>
          </TD>
          <TD>
            Construct the sum of <kbd>a1</kbd> and <kbd>a2</kbd>.
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>is_product(e)</kbd>
          </TD>
          <TD>
            Is <kbd>e</kbd> a product?
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>multiplier(e)</kbd>
          </TD>
          <TD>
            Multiplier of the product <kbd>e</kbd>.
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>multiplicand(e)</kbd>
          </TD>
          <TD>
            Multiplicand of the product <kbd>e</kbd>.
          </TD>
        </TR>
        <TR>
          <TD>
            <kbd>make_product(m1, m2)</kbd>
          </TD>
          <TD>
            Construct the product of <kbd>m1</kbd> and <kbd>m2</kbd>.
          </TD>
        </TR>
      </TABLE>
      </p>
</div>

      <div class="permalink">
<a name="p5" class="permalink"></a><p>
        Using these, and the primitive predicate <kbd>is_number</kbd>,
      
      
      which identifies numbers,        we can express the differentiation rules as the        following
      function:

      <div class="snippet" id="javascript_36_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            '+'\n'+'function deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)),\n                       make_product(deriv(multiplier(exp), \n                                          variable), \n                           multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;,\n                         exp);\n}'+'\n'+'\nderiv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//           [[&quot;+&quot;, [1, [0, null]]], null]]],\n//    [[&quot;*&quot;,\n//      [[&quot;+&quot;,\n//        [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//         [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]],\n//         [[&quot;+&quot;, [&quot;x&quot;, [3, null]]], null] ] ],\n//     null ]]]\n        '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable)) ? 1 : 0
             : is_sum(exp)
               ? make_sum(deriv(addend(exp), variable), 
                          deriv(augend(exp), variable))
               : is_product(exp)
                 ? make_sum(make_product(multiplier(exp), 
                                deriv(multiplicand(exp), 
                                      variable)),
                       make_product(deriv(multiplier(exp), 
                                          variable), 
                           multiplicand(exp)))
                 : Error("unknown expression type in deriv",
                         exp);
}</pre></div></div>
      </p>
</div>
      <div class="permalink">
<a name="p6" class="permalink"></a><p>
      This <kbd>deriv</kbd>
      function
      incorporates the complete differentiation algorithm.
      Since it is expressed in terms of abstract data, it will work no
      matter how we choose to represent algebraic expressions, as long as we
      design a proper set of selectors and constructors.  This is the issue
      we must address next.
      </p>
</div>

      <div class="permalink">
<a name="h2" class="permalink"></a><h2>
        Representing algebraic expressions
      </h2>
</div>

      
      <div class="permalink">
<a name="p7" class="permalink"></a><p>
      We can imagine many ways to use list structure to represent algebraic
      expressions.  For example, we could use lists of symbols that mirror
      the usual algebraic notation, representing 
      $ax+b$ as 
      <kbd>list( "a", "*", "x", "+", "b")</kbd>.  
      
        
        
          However, it will be more convenient, if we reflect the mathematical structure of the expression in the JavaScript
          value representing it; that is, to represent $ax+b$ as <kbd>list("+", list("*", "a", "x"), "b")</kbd>.
        
      
      Then our data representation for the differentiation problem is as
      follows:

      <UL>
        <LI>The variables are strings.  
          They are identified by the primitive predicate
          
          
          <kbd>is_string</kbd>:
          
          <div class="snippet" id="javascript_36_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function is_variable(x) {\n    return is_string(x);\n}'+'\n'+'\nis_variable(&quot;xyz&quot;);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function is_variable(x) {
    return is_string(x);
}</pre></div></div>
        </LI>
        <LI>Two variables are the same if the 
          
            
            strings representing them are equal:
            
          
          
          <div class="snippet" id="javascript_36_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          '+'\n'+'function is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}'+'\n'+'\nis_same_variable(&quot;xyz&quot;, &quot;xyz&quot;);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function is_same_variable(v1, v2) {
    return is_variable(v1) &amp;&amp; 
           is_variable(v2) &amp;&amp; v1 === v2;
}</pre></div></div>
          </LI>
        <LI>Sums and products are constructed as lists:
          
          <div class="snippet" id="javascript_36_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            '+'\n'+'function make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}'+'\n'+'\nmake_sum(make_product(&quot;x&quot;, 3), make_product(&quot;y&quot;, &quot;z&quot;));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_sum(a1, a2) {
    return list("+", a1, a2);
}</pre></div></div>
          <div class="snippet" id="javascript_36_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            '+'\n'+'function make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}'+'\n'+'\nmake_sum(make_product(&quot;x&quot;, 3), make_product(&quot;y&quot;, &quot;z&quot;));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_product(m1, m2) {
    return list("*", m1, m2);
}</pre></div></div>
        </LI>
        <LI>A sum is a list whose first element is the 
          
            
            string <kbd>"+"</kbd>:
          

          

          <div class="snippet" id="javascript_36_5_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            '+'\n'+'function is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}'+'\n'+'\nis_sum(make_sum(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function is_sum(x) {
    return is_pair(x) &amp;&amp; head(x) === "+";
}</pre></div></div>


        </LI>
        <LI>The addend is the second item of the sum list:

          
          <div class="snippet" id="javascript_36_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            '+'\n'+'function addend(s) {\n    return head(tail(s));\n}'+'\n'+'\naddend(make_sum(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function addend(s) {
    return head(tail(s));
}</pre></div></div>


        </LI>
        <LI>The augend is the third item of the sum list:

          
          <div class="snippet" id="javascript_36_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            '+'\n'+'function augend(s) {\n    return head(tail(tail(s)));\n}'+'\n'+'\naugend(make_sum(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function augend(s) {
    return head(tail(tail(s)));
}</pre></div></div>
        </LI>
        <LI>A product is a list whose first element is the 
          
            
            string <kbd>"*"</kbd>:
          

          

          <div class="snippet" id="javascript_36_8_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            '+'\n'+'function is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}'+'\n'+'\nis_product(make_product(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function is_product(x) {
    return is_pair(x) &amp;&amp; head(x) === "*";
}</pre></div></div>
        </LI>
        <LI>The multiplier is the second item of the product list:

          

          <div class="snippet" id="javascript_36_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            '+'\n'+'function multiplier(s) {\n    return head(tail(s));\n}'+'\n'+'\nmultiplier(make_product(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function multiplier(s) {
    return head(tail(s));
}</pre></div></div>

        </LI>
        <LI>The multiplicand is the third item of the product list:

          

          <div class="snippet" id="javascript_36_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            '+'\n'+'function multiplicand(s) {\n    return head(tail(tail(s)));\n}'+'\n'+'\nmultiplicand(make_product(&quot;x&quot;, 3));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function multiplicand(s) {
    return head(tail(tail(s)));
}</pre></div></div>
        </LI>

      </UL>
      </p>
</div>

      <div class="permalink">
<a name="p8" class="permalink"></a><p>
      Thus, we need only combine these with the algorithm as embodied by
      <kbd>deriv</kbd> in order to have a working symbolic-differentiation
      program.  Let us look at some examples of its behavior:

      <div class="snippet" id="javascript_36_11_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)),\n                       make_product(deriv(multiplier(exp), \n                                          variable), \n                           multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;,\n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;+&quot;, &quot;x&quot;, 3), &quot;x&quot;);\n// [&quot;+&quot;, [1, [0, null]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("+", "x", 3), "x");
// ["+", [1, [0, null]]]</pre></div></div>

      <div class="snippet" id="javascript_36_12_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)),\n                       make_product(deriv(multiplier(exp), \n                                          variable), \n                           multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;,\n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), &quot;x&quot;);\n// [&quot;+&quot;, [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//        [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", "x", "y"), "x");
// ["+", [["*", ["x", [0, null]]], 
//        [["*", [1, ["y", null]]], null]]]</pre></div></div>

      <div class="snippet" id="javascript_36_13_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)),\n                       make_product(deriv(multiplier(exp), \n                                          variable), \n                           multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;,\n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//           [[&quot;+&quot;, [1, [0, null]]], null]]],\n//    [[&quot;*&quot;,\n//      [[&quot;+&quot;,\n//        [[&quot;*&quot;, [&quot;x&quot;, [0, null]]], \n//         [[&quot;*&quot;, [1, [&quot;y&quot;, null]]], null]]],\n//         [[&quot;+&quot;, [&quot;x&quot;, [3, null]]], null] ] ],\n//     null ]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", list("*", "x", "y"), list("+", "x", 3)), "x");
// [ "+",
//   [["*", [["*", ["x", ["y", null]]], 
//           [["+", [1, [0, null]]], null]]],
//    [["*",
//      [["+",
//        [["*", ["x", [0, null]]], 
//         [["*", [1, ["y", null]]], null]]],
//         [["+", ["x", [3, null]]], null] ] ],
//     null ]]]</pre></div></div>
      </p>
</div>
      <div class="permalink">
<a name="p9" class="permalink"></a><p>
      The program produces answers that are correct; however, they are
      unsimplified.  It is true that
      
        \[ \frac{d(xy)}{dx} = x\cdot 0+1\cdot y \]
      
      but we would like the program to know that $x\cdot 0 = 0$, $1\cdot y =
        y$, and $0+y = y$.  The answer for the second example should have been
      simply <kbd>y</kbd>.  As the third example shows, this becomes a serious
      issue when the expressions are complex.
      </p>
</div>
      <div class="permalink">
<a name="p10" class="permalink"></a><p>
      
      
      Our difficulty is much like the one we encountered with the
      rational-number implementation: we haven't reduced answers to simplest
      form.  To accomplish the rational-number reduction, we needed to
      change only the constructors and the selectors of the implementation.
      We can adopt a similar strategy here.  We won't change <kbd>deriv</kbd> at
      all.  Instead, we will change <kbd>make_sum</kbd> so that if both summands
      are numbers, <kbd>make_sum</kbd> will add them and return their sum.  Also,
      if one of the summands is 0, then <kbd>make_sum</kbd> will return the other
      summand.

          

      <div class="snippet" id="javascript_36_14_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        '+'\n'+'function make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ? a1\n	     : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(&quot;+&quot;, a1, a2);\n}'+'\n'+'\nmake_sum(2, 3);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_sum(a1, a2) {
    return number_equal(a1, 0)
           ? a2
           : number_equal(a2, 0)
             ? a1
	     : is_number(a1) &amp;&amp; is_number(a2)
               ? a1 + a2
               : list("+", a1, a2);
}</pre></div></div>

      This uses the
      function
      <kbd>number_equal</kbd>, which checks whether an
      expression is equal to a given number:

          

      <div class="snippet" id="javascript_36_15_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}'+'\n'+'\nnumber_equal(3, 3);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function number_equal(exp, num) {
    return is_number(exp) &amp;&amp; exp === num;
}</pre></div></div>

        Similarly, we will change <kbd>make_product</kbd> to build in the rules that 0
      times anything is 0 and 1 times anything is the thing itself:


          

      <div class="snippet" id="javascript_36_16_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        '+'\n'+'function make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ? 0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n             ? m1\n             : is_number(m1) &amp;&amp; is_number(m2)\n               ? m1 * m2\n               : list(&quot;*&quot;, m1, m2);\n}'+'\n'+'\nmake_product(2, 3);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_product(m1, m2) {
    return number_equal(m1, 0) || number_equal(m2, 0)
           ? 0
           : number_equal(m1, 1)
             ? m2
             : number_equal(m2, 1)
             ? m1
             : is_number(m1) &amp;&amp; is_number(m2)
               ? m1 * m2
               : list("*", m1, m2);
}</pre></div></div>

      


      Here is how this version works on our three examples:

      <div class="snippet" id="javascript_36_17_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        \nfunction make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ? a1\n	     : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(&quot;+&quot;, a1, a2);\n}\n      \nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ? 0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n             ? m1\n             : is_number(m1) &amp;&amp; is_number(m2)\n               ? m1 * m2\n               : list(&quot;*&quot;, m1, m2);\n}\n        \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(deriv(multiplier(exp), \n                                            variable), \n                                         multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;, \n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;+&quot;, &quot;x&quot;, 3), &quot;x&quot;);\n// 1'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("+", "x", 3), "x");
// 1</pre></div></div>

      <div class="snippet" id="javascript_36_18_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        \nfunction make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ? a1\n	     : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(&quot;+&quot;, a1, a2);\n}\n      \nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ? 0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n             ? m1\n             : is_number(m1) &amp;&amp; is_number(m2)\n               ? m1 * m2\n               : list(&quot;*&quot;, m1, m2);\n}\n        \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(deriv(multiplier(exp), \n                                            variable), \n                                         multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;, \n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), &quot;x&quot;);\n// &quot;y&quot;'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", "x", "y"), "x");
// "y"</pre></div></div>

      <div class="snippet" id="javascript_36_19_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        \nfunction make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ? a1\n	     : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(&quot;+&quot;, a1, a2);\n}\n      \nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ? 0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n             ? m1\n             : is_number(m1) &amp;&amp; is_number(m2)\n               ? m1 * m2\n               : list(&quot;*&quot;, m1, m2);\n}\n        \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable)) ? 1 : 0\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(deriv(multiplier(exp), \n                                            variable), \n                                         multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;, \n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;), list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);\n// [ &quot;+&quot;,\n//   [[&quot;*&quot;, [&quot;x&quot;, [&quot;y&quot;, null]]], \n//    [[&quot;*&quot;, [&quot;y&quot;, [[&quot;+&quot;, [&quot;x&quot;, [3, null]]], null]]], null]] ]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", list("*", "x", "y"), list("+", "x", 3)), "x");
// [ "+",
//   [["*", ["x", ["y", null]]], 
//    [["*", ["y", [["+", ["x", [3, null]]], null]]], null]] ]</pre></div></div>

      Although this is quite an improvement, the third example shows that
      there is still a long way to go before we get a program that puts
      expressions into a form that we might agree is <QUOTE>simplest.</QUOTE>  The
      problem of algebraic simplification is complex because, among other
      reasons, a form that may be simplest for one purpose may not be for
      another.
      
      </p>
</div>

      <div class="permalink">
<a name="ex_2.56" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.56">Exercise 2.56 </a></b> 
        
        Show how to extend the basic differentiator to handle more kinds of
        expressions.  For instance, implement the differentiation rule
	for exponentiation

        
          \[ \frac {d(u^{n})}{dx} = nu^{n-1}\left( \frac{du}{dx}\right) \]
        

        by adding a new clause to the
	
	<kbd>deriv</kbd>
	
	program and defining appropriate
        
	functions
        <kbd>is_exp</kbd>, <kbd>base</kbd>, <kbd>exponent</kbd>,
        and <kbd>make_exp</kbd>.  (You may use the string <kbd>"**"</kbd> to denote
        exponentiation.)
        Build in the rules that anything raised to the power 0 is 1 and
        anything raised to the power 1 is the thing itself.
        
   <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_36_1_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_36_1_div"><SOLUTION>
     <div class="snippet" id="javascript_36_20_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction augend(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        '+'\n'+'function base(e) {\n    return head(tail(e));\n}\nfunction exponent(e) {\n    return head(tail(tail(e)));\n}\nfunction make_exp(base, exp) {\n    return number_equal(exp, 0)\n           ? 1\n           : number_equal(exp, 1)\n             ? base\n             : list(&quot;**&quot;, base, exp);\n}\nfunction is_exp(x) {\n    return is_pair(x) &amp;&amp; head(x) ===&quot;**&quot;;\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(deriv(multiplier(exp), \n                                               variable), \n                                multiplicand(exp)))\n                 : is_exp(exp)\n                   ? make_product(make_product(exponent(exp), \n                                      make_exp(\n                                          base(exp),\n                                          exponent(exp) - 1)),\n			          deriv(base(exp), variable))\n                   : Error(&quot;unknown expression type in deriv&quot;, \n		           exp);\n}'+'\n'+'\nderiv(list(&quot;**&quot;, &quot;x&quot;, 4), &quot;x&quot;);\n    '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function base(e) {
    return head(tail(e));
}
function exponent(e) {
    return head(tail(tail(e)));
}
function make_exp(base, exp) {
    return number_equal(exp, 0)
           ? 1
           : number_equal(exp, 1)
             ? base
             : list("**", base, exp);
}
function is_exp(x) {
    return is_pair(x) &amp;&amp; head(x) ==="**";
}
function deriv(exp, variable) {
    return is_number(exp)
           ? 0
           : is_variable(exp)
             ? (is_same_variable(exp, variable) ? 1 : 0)
             : is_sum(exp)
               ? make_sum(deriv(addend(exp), variable), 
                          deriv(augend(exp), variable))
               : is_product(exp)
                 ? make_sum(make_product(multiplier(exp), 
                                deriv(multiplicand(exp), 
                                      variable)), 
                            make_product(deriv(multiplier(exp), 
                                               variable), 
                                multiplicand(exp)))
                 : is_exp(exp)
                   ? make_product(make_product(exponent(exp), 
                                      make_exp(
                                          base(exp),
                                          exponent(exp) - 1)),
			          deriv(base(exp), variable))
                   : Error("unknown expression type in deriv", 
		           exp);
}</pre></div></div></SOLUTION></div>
</div>
    
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.57" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.57">Exercise 2.57 </a></b>
        Extend the differentiation program to handle sums and products of
        arbitrary numbers of (two or more) terms.
        Then the last example above could be expressed as
      

      <div class="snippet" id="javascript_36_21_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \n// change the representation of terms\n// by defining augend and multiplicand\n\nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(\n                                deriv(multiplier(exp), \n                                      variable), \n                                multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;, \n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;, list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", "x", "y", list("+", "x", 3)), "x");</pre></div></div>

        Try to do this by changing only the
          representation for sums and products, without changing the <kbd>deriv</kbd>
        function
        at all.  For example, the <kbd>addend</kbd> of a sum would
        be the first term, and the <kbd>augend</kbd> would be the sum of the rest
        of the terms.

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_36_2_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_36_2_div"><SOLUTION>


      
      
      

      <div class="snippet" id="javascript_36_22_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;+&quot;;\n}\n            \nfunction make_sum(a1, a2) {\n    return list(&quot;+&quot;, a1, a2);\n}\n            \nfunction make_product(m1, m2) {\n    return list(&quot;*&quot;, m1, m2);\n}\n            \nfunction addend(s) {\n    return head(tail(s));\n}\n            \nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(x) === &quot;*&quot;;\n}\n            \nfunction multiplier(s) {\n    return head(tail(s));\n}\n            \n// change the representation of terms\n// by defining augend and multiplicand\n\nfunction deriv(exp, variable) {\n    return is_number(exp)\n           ? 0\n           : is_variable(exp)\n             ? (is_same_variable(exp, variable) ? 1 : 0)\n             : is_sum(exp)\n               ? make_sum(deriv(addend(exp), variable), \n                          deriv(augend(exp), variable))\n               : is_product(exp)\n                 ? make_sum(make_product(multiplier(exp), \n                                deriv(multiplicand(exp), \n                                      variable)), \n                            make_product(deriv(multiplier(exp),\n                                               variable),\n                                         multiplicand(exp)))\n                 : Error(&quot;unknown expression type in deriv&quot;,\n                         exp);\n}\n      '+'\n'+'deriv(list(&quot;*&quot;, &quot;x&quot;, &quot;y&quot;, list(&quot;+&quot;, &quot;x&quot;, 3)), &quot;x&quot;);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">deriv(list("*", "x", "y", list("+", "x", 3)), "x");</pre></div></div>

	</SOLUTION></div>
</div>
	  
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.58" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.58">Exercise 2.58 </a></b>
        
        
        Suppose we want to modify the differentiation program so that it works
        with ordinary mathematical notation, in which <kbd>"+"</kbd> and <kbd>"*"</kbd> are
        infix rather than prefix operators.  Since the differentiation program
        is defined in terms of abstract data, we can modify it to work with
        different representations of expressions solely by changing the
        predicates, selectors, and constructors that define the representation
        of the algebraic expressions on which the differentiator is to
        operate.
        <OL>
          <LI>
            Show how to do this in order to differentiate algebraic
            expressions presented in infix form, 
	    
	    as in this example:
	    <div class="snippet" id="javascript_36_23_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">list("x", "+", 
     list(3, "*", 
          list("x", "+", 
               list("y", "+", 2))))</pre></div></div>
	    
	    
            To simplify the task, assume that <kbd>"+"</kbd> and <kbd>"*"</kbd> always
            take two arguments and that expressions are fully parenthesized.
          </LI>
          <LI>
            The problem becomes substantially harder if we 
            allow 
            
              
              
		provide for avoiding unnecessary lists by assuming that multiplication is done before addition, as in this example:
		<div class="snippet" id="javascript_36_24_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">list("x", "+", "3", "*", list("x", "+", "y", "+", 2))</pre></div></div>
	      
	    
            Can you design appropriate predicates, selectors, and
            constructors for this notation such that our derivative 
            program still works?
          </LI>
        </OL>
	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_36_3_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_36_3_div"><SOLUTION>
	  <OL>
	    <LI>
    <div class="snippet" id="javascript_36_25_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        '+'\n'+'function make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ?  a1\n             : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(a1, &quot;+&quot;, a2);\n}\nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; head(tail(x)) === &quot;+&quot;;\n}\nfunction addend(s) {\n    return head(s);\n}\nfunction augend(s) {\n    return head(tail(tail(s)));\n}\nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ?  0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n               ?  m1\n               : is_number(m1) &amp;&amp; is_number(m2)\n                 ? m1 * m2\n                 : list(m1, &quot;*&quot;, m2);\n}\nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; head(tail(x)) === &quot;*&quot;;\n}\nfunction multiplier(s) {\n    return head(s);\n}\nfunction multiplicand(s) {\n    return head(tail(tail(s)));\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n        ? 0\n        : is_variable(exp)\n          ? (is_same_variable(exp, variable) ? 1 : 0)\n          : is_sum(exp)\n            ? make_sum(deriv(addend(exp), variable), \n                       deriv(augend(exp), variable))\n            : is_product(exp)\n              ? make_sum(make_product(multiplier(exp), \n                             deriv(multiplicand(exp), \n                                   variable)), \n                         make_product(deriv(multiplier(\n                                                    exp), \n                                            variable), \n                                      multiplicand(exp)))\n              : Error(&quot;unknown expression type in deriv&quot;,\n                      exp);\n}'+'\n'+'\nderiv(list(&quot;x&quot;, &quot;*&quot;, 4), &quot;x&quot;);\n    '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_sum(a1, a2) {
    return number_equal(a1, 0)
           ? a2
           : number_equal(a2, 0)
             ?  a1
             : is_number(a1) &amp;&amp; is_number(a2)
               ? a1 + a2
               : list(a1, "+", a2);
}
function is_sum(x) {
    return is_pair(x) &amp;&amp; head(tail(x)) === "+";
}
function addend(s) {
    return head(s);
}
function augend(s) {
    return head(tail(tail(s)));
}
function make_product(m1, m2) {
    return number_equal(m1, 0) || number_equal(m2, 0)
           ?  0
           : number_equal(m1, 1)
             ? m2
             : number_equal(m2, 1)
               ?  m1
               : is_number(m1) &amp;&amp; is_number(m2)
                 ? m1 * m2
                 : list(m1, "*", m2);
}
function is_product(x) {
    return is_pair(x) &amp;&amp; head(tail(x)) === "*";
}
function multiplier(s) {
    return head(s);
}
function multiplicand(s) {
    return head(tail(tail(s)));
}
function deriv(exp, variable) {
    return is_number(exp)
        ? 0
        : is_variable(exp)
          ? (is_same_variable(exp, variable) ? 1 : 0)
          : is_sum(exp)
            ? make_sum(deriv(addend(exp), variable), 
                       deriv(augend(exp), variable))
            : is_product(exp)
              ? make_sum(make_product(multiplier(exp), 
                             deriv(multiplicand(exp), 
                                   variable)), 
                         make_product(deriv(multiplier(
                                                    exp), 
                                            variable), 
                                      multiplicand(exp)))
              : Error("unknown expression type in deriv",
                      exp);
}</pre></div></div>

    
    
	    </LI>
	    <LI>
    <div class="snippet" id="javascript_36_26_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction is_variable(x) {\n    return is_string(x);\n}\n          \nfunction is_same_variable(v1, v2) {\n    return is_variable(v1) &amp;&amp; \n           is_variable(v2) &amp;&amp; v1 === v2;\n}              \n            \nfunction number_equal(exp, num) {\n    return is_number(exp) &amp;&amp; exp === num;\n}\n        '+'\n'+'function items_before_first(op, s) {\n    return head(s) === op\n           ? null\n           : pair(head(s), \n                  items_before_first(op, tail(s)));\n}\nfunction items_after_first(op, s) {\n    return head(s) === op\n           ? tail(s)\n           : items_after_first(op, tail(s);\n}\nfunction make_sum(a1, a2) {\n    return number_equal(a1, 0)\n           ? a2\n           : number_equal(a2, 0)\n             ?  a1\n             : is_number(a1) &amp;&amp; is_number(a2)\n               ? a1 + a2\n               : list(a1, &quot;+&quot;, a2);\n}\n// a sequence of terms and operators is a sum\n// if and only if at least one + operator occurs\nfunction is_sum(x) {\n    return is_pair(x) &amp;&amp; \n           ! (is_null(member(&quot;+&quot;, x));\n}\nfunction addend(s) {\n    return items_before_first(&quot;+&quot;, s);\n}\nfunction augend(s) {\n    return items_after_first(&quot;+&quot;, s);\n}\nfunction make_product(m1, m2) {\n    return number_equal(m1, 0) || number_equal(m2, 0)\n           ?  0\n           : number_equal(m1, 1)\n             ? m2\n             : number_equal(m2, 1)\n               ?  m1\n               : is_number(m1) &amp;&amp; is_number(m2)\n                 ? m1 * m2\n                 : list(m1, &quot;*&quot;, m2);\n}\n// a sequence of terms and operators is a product\n// if and only if no + operator occurs\nfunction is_product(x) {\n    return is_pair(x) &amp;&amp; is_null(member(&quot;+&quot;, x); \n}\nfunction multiplier(s) {\n    return items_before_first(&quot;*&quot;, s);\n}\nfunction multiplicand(s) {\n    return items_after_first(&quot;*&quot;, s);\n}\nfunction deriv(exp, variable) {\n    return is_number(exp)\n        ? 0\n        : is_variable(exp)\n          ? (is_same_variable(exp, variable) ? 1 : 0)\n          : is_sum(exp)\n            ? make_sum(deriv(addend(exp), variable), \n                       deriv(augend(exp), variable))\n            : is_product(exp)\n              ? make_sum(make_product(multiplier(exp), \n                             deriv(multiplicand(exp), \n                                   variable)), \n                         make_product(deriv(multiplier(exp), \n                                            variable), \n                             multiplicand(exp)))\n              : Error(&quot;unknown expression type in deriv&quot;,\n                      exp);\n}'+'\n'+'\nderiv(list(&quot;x&quot;, &quot;*&quot;, 4), &quot;x&quot;);\n    '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function items_before_first(op, s) {
    return head(s) === op
           ? null
           : pair(head(s), 
                  items_before_first(op, tail(s)));
}
function items_after_first(op, s) {
    return head(s) === op
           ? tail(s)
           : items_after_first(op, tail(s);
}
function make_sum(a1, a2) {
    return number_equal(a1, 0)
           ? a2
           : number_equal(a2, 0)
             ?  a1
             : is_number(a1) &amp;&amp; is_number(a2)
               ? a1 + a2
               : list(a1, "+", a2);
}
// a sequence of terms and operators is a sum
// if and only if at least one + operator occurs
function is_sum(x) {
    return is_pair(x) &amp;&amp; 
           ! (is_null(member("+", x));
}
function addend(s) {
    return items_before_first("+", s);
}
function augend(s) {
    return items_after_first("+", s);
}
function make_product(m1, m2) {
    return number_equal(m1, 0) || number_equal(m2, 0)
           ?  0
           : number_equal(m1, 1)
             ? m2
             : number_equal(m2, 1)
               ?  m1
               : is_number(m1) &amp;&amp; is_number(m2)
                 ? m1 * m2
                 : list(m1, "*", m2);
}
// a sequence of terms and operators is a product
// if and only if no + operator occurs
function is_product(x) {
    return is_pair(x) &amp;&amp; is_null(member("+", x); 
}
function multiplier(s) {
    return items_before_first("*", s);
}
function multiplicand(s) {
    return items_after_first("*", s);
}
function deriv(exp, variable) {
    return is_number(exp)
        ? 0
        : is_variable(exp)
          ? (is_same_variable(exp, variable) ? 1 : 0)
          : is_sum(exp)
            ? make_sum(deriv(addend(exp), variable), 
                       deriv(augend(exp), variable))
            : is_product(exp)
              ? make_sum(make_product(multiplier(exp), 
                             deriv(multiplicand(exp), 
                                   variable)), 
                         make_product(deriv(multiplier(exp), 
                                            variable), 
                             multiplicand(exp)))
              : Error("unknown expression type in deriv",
                      exp);
}</pre></div></div>

    
    
	    </LI>
	  </OL>
	  
   </SOLUTION></div>
</div>
      </EXERCISE>
</div>
      
      
      
      

    </SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="35">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="37">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        2.3.2 
        Example: Symbolic Differentiation
      
    </div>
  <script>
//<![CDATA[
var chapter_id = 36;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
