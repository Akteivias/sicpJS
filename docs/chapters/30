<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="2.2.1 
        Representing Sequences
      " />
    <title>
         2.2.1 
        Representing Sequences
      
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="/zeaa1FJLsAQB1tQKUAD3z5jxwF+4idyuGd2jPJ9LfsjYSlQNiKQF/pZ5jKHokN4igOxJZuAHGJ+Aydh0IUc7g==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-f313219f7bd4d132a6fd02c8f84b86f62781f5d155b9681036fc6390c9f3d06c.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments from Second Edition of SICP, 1996    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">Making of the JavaScript Adaptation</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">2.2.1 
        Representing Sequences
      </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      <div class="permalink">
<a name="p1" class="permalink"></a><p>

        <SPLIT>
	        
	        
            <FIGURE>
              <img src="img_javascript/ch2-Z-G-13.svg">
              <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.4" href="30#fig_2.4">Figure 2.4 </a></b>The sequence 1, 2, 3, 4 represented as a chain of pairs. </div>
              
            </FIGURE>
	        
        </SPLIT>
      
        One of the useful structures we can build with pairs is a 
        
        
        
        <EM>
          sequence</EM>—an ordered collection of data objects.  There are, of
        course, many ways to represent sequences in terms of pairs.  One
        particularly straightforward representation is illustrated in
        figure <REF NAME="fig:sequence-of-pairs"><a class="superscript" id="2.2.1-fig-link-2.4" href="30#fig_2.4">2.4</a></REF>, where the sequence 1, 2, 3, 4 is
        represented as a chain of pairs.  The <kbd>head</kbd> of each pair is the
        corresponding item in the chain, and the <kbd>tail</kbd> of the pair is
        the next pair in the chain.  The <kbd>tail</kbd> of the final pair
        signals the end of the sequence by pointing to a distinguished
        value that is not a pair, 
        represented in box-and-pointer diagrams as a diagonal line
        
        and in programs as the value of 
        
        
        
	  
	  JavaScript's value <kbd>null</kbd>
	  
	  .
        The entire sequence is constructed by nested <kbd>pair</kbd> operations:

        <div class="snippet" id="javascript_30_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'pair(1, \n     pair(2, \n          pair(3, \n               pair(4, null))));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">pair(1, 
     pair(2, 
          pair(3, 
               pair(4, null))));</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="p2" class="permalink"></a><p>
        Such a sequence of pairs is called a
        
        <EM>list</EM>, and our JavaScript environment provides a
        primitive called 
        
        
        <kbd>list</kbd> to help in constructing 
        lists.<a class="superscript" id="footnote-link-1" href="30#footnote-1">[1]</a>
      </p>
</div>

      <div class="permalink">
<a name="p3" class="permalink"></a><p>
        The above sequence could be produced by <kbd>list(1, 2, 3, 4)</kbd>.  In
        general, 

        <kbd EVAL="no" LATEX="yes" class="snippet">list(a$_{1}$, a$_{2}$, $\ldots$, a$_{n}$)</kbd>

        is equivalent to

        <kbd EVAL="no" LATEX="yes" class="snippet">pair(a$_{1}$, pair(a$_{2}$, pair($\ldots$, pair(a$_{n}$, null)$\ldots$)))</kbd>
      </p>
</div>

      <SPLIT>
        
        
          <div class="permalink">
<a name="p4" class="permalink"></a><p>
            Our interpreter prints pairs using a textual representation of
	    box-and-pointer diagrams. The result of
	    <kbd>pair(1, 2)</kbd>
            is printed as <kbd>[1, 2]</kbd>, and
	    the data object in
          figure <REF NAME="fig:sequence-of-pairs"><a class="superscript" id="2.2.1-fig-link-2.4" href="30#fig_2.4">2.4</a></REF> 
          is printed as 
          <kbd>[1, [2, [3, [4, null]]]]</kbd>:
          </p>
</div>
        
      </SPLIT>

      <div class="permalink">
<a name="p5" class="permalink"></a><p>
        <div class="snippet" id="javascript_30_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const one_through_four = list(1, 2, 3, 4);'+'\n'+'\none_through_four;\n// displays: [1, [2, [3, [4, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const one_through_four = list(1, 2, 3, 4);</pre></div></div>
	
        

      </p>
</div>



<SPLIT>
  
</SPLIT>

      <div class="permalink">
<a name="p6" class="permalink"></a><p>
        We can think of 
        
        
        <kbd>head</kbd> as selecting the first item in the list, and
        of 
        
        <kbd>tail</kbd> as selecting the sublist consisting of all but the first
        item.  Nested applications of <kbd>head</kbd> and <kbd>tail</kbd> can be used to
        extract the second, third, and subsequent items in the
        list.
        The constructor 
        
        <kbd>pair</kbd> makes a list like the original one, 
        but with an additional item at the beginning.

        <div class="snippet" id="javascript_30_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst one_through_four = list(1, 2, 3, 4);\n          '+'\n'+'head(one_through_four);\n// result: 1'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">head(one_through_four);
// result: 1</pre></div></div>



        <div class="snippet" id="javascript_30_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst one_through_four = list(1, 2, 3, 4);\n          '+'\n'+'tail(one_through_four);\n// result: [2, [3, [4, null]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">tail(one_through_four);
// result: [2, [3, [4, null]]]</pre></div></div>

        <div class="snippet" id="javascript_30_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst one_through_four = list(1, 2, 3, 4);\n          '+'\n'+'head(tail(one_through_four));\n// result: 2'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">head(tail(one_through_four));
// result: 2</pre></div></div>

        <div class="snippet" id="javascript_30_5_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst one_through_four = list(1, 2, 3, 4);\n          '+'\n'+'pair(10, one_through_four);\n// result: [10, [1, [2, [3, [4, null]]]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">pair(10, one_through_four);
// result: [10, [1, [2, [3, [4, null]]]]]</pre></div></div>




        <div class="snippet" id="javascript_30_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst one_through_four = list(1, 2, 3, 4);\n          '+'\n'+'pair(5, one_through_four);\n// result: [5, [1, [2, [3, [4, null]]]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">pair(5, one_through_four);
// result: [5, [1, [2, [3, [4, null]]]]]</pre></div></div>

      </p>
</div>

      <SPLIT>
         
        
      <div class="permalink">
<a name="p7" class="permalink"></a><p>
        The value <kbd>null</kbd>, 
        used to terminate the chain of pairs, can be
        thought of as a sequence of no elements, the 
        
        
        <EM>empty list</EM>.
      </p>
</div>
        
      </SPLIT>

      <div class="permalink">
<a name="h1" class="permalink"></a><h2>
        List operations
      </h2>
</div>

      
      
      <div class="permalink">
<a name="p8" class="permalink"></a><p>
        The use of pairs to represent sequences of elements as lists is
        accompanied by conventional programming techniques for manipulating
        lists by successively 
        
        
        <QUOTE><kbd>tail</kbd>ing down</QUOTE> the lists.  For example, 
        the
        function
        
        <kbd>list_ref</kbd> takes as arguments a list and a number
        $n$ and returns the $n$th item of the list.  It is customary to
        number the elements of the list beginning with 0.  The method for
        computing <kbd>list_ref</kbd> is the following:

        <UL>
          <LI>For $n=0$, <kbd>list_ref</kbd> should return the <kbd>head</kbd> of the list.
          </LI>n
          <LI>Otherwise, <kbd>list_ref</kbd> should return  the $(n-1)$st item of the
            <kbd>tail</kbd> of the list.
          </LI>
        </UL>

        <div class="snippet" id="javascript_30_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// we avoid overriding the predeclared list_ref\n// function by using the name list_ref_ here\nfunction list_ref_(items, n) {\n    return n === 0\n           ? head(items)\n           : list_ref_(tail(items), n - 1);\n}'+'\n'+'\nconst squares = list(1, 4, 9, 16, 25);\nlist_ref_(squares, 3);\n// result: 16\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function list_ref(items, n) {
    return n === 0
           ? head(items)
           : list_ref(tail(items), n - 1);
}</pre></div></div>

        <div class="snippet" id="javascript_30_8_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const squares = list(1, 4, 9, 16, 25);\nlist_ref_(squares, 3);\n// result: 16'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const squares = list(1, 4, 9, 16, 25);
list_ref(squares, 3);
// result: 16</pre></div></div>

        

        

      </p>
</div>

      <div class="permalink">
<a name="p9" class="permalink"></a><p>
        Often we <kbd>tail</kbd> down the whole list.  To aid in this, our JavaScript environment includes
          a predicate
        
        
        <kbd>is_null</kbd>, which tests whether its argument is
        the empty list.  The
        function
        
        
        <kbd>length</kbd>, which
        returns the number of items in a list, illustrates this typical
        pattern of use:

        <div class="snippet" id="javascript_30_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// we avoid overriding the predeclared length\n// function by using the name length_ here\nfunction length_(items) {\n    return is_null(items)\n           ? 0\n           : 1 + length_(tail(items));\n}'+'\n'+'\nconst odds = list(1, 3, 5, 7);\nlength_(odds);\n// returns: 4\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function length(items) {
    return is_null(items)
           ? 0
           : 1 + length(tail(items));
}</pre></div></div>

        
      </p>
</div>

      <div class="permalink">
<a name="p10" class="permalink"></a><p>
        The <kbd>length</kbd>
        function
        implements a simple recursive plan. The
        reduction step is:

        <UL>
          <LI>The <kbd>length</kbd> of any list is 1 plus the <kbd>length</kbd> of the
            <kbd>tail</kbd> of the list.
          </LI>
        </UL>
      </p>
</div>

      <div class="permalink">
<a name="p11" class="permalink"></a><p>
        This is applied successively until we reach the base case:

        <UL>
          <LI>The <kbd>length</kbd> of the empty list is 0.
          </LI>
        </UL>
      </p>
</div>

      <div class="permalink">
<a name="p12" class="permalink"></a><p>
        We could also compute <kbd>length</kbd> in an iterative style:

        <div class="snippet" id="javascript_30_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// we avoid overriding the predeclared length\n// function by using the name length_ here\nfunction length_(items) {\n    function length_iter(a, count) {\n        return is_null(a)\n               ? count\n               : length_iter(tail(a), count + 1);\n    }\n    return length_iter(items, 0);\n}'+'\n'+'\nconst odds = list(1, 3, 5, 7);\nlength_(odds);\n// returns: 4\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function length(items) {
    function length_iter(a, count) {
        return is_null(a)
               ? count
               : length_iter(tail(a), count + 1);
    }
    return length_iter(items, 0);
}</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="p13" class="permalink"></a><p>
        Another conventional programming technique is to 
        
        
        <QUOTE><kbd>pair</kbd> up</QUOTE> an
        answer list while <kbd>tail</kbd>ing down a list, as in the
        function
        
        
        <kbd>append</kbd>, which takes two lists as arguments and combines their
        elements to make a new list:

        <div class="snippet" id="javascript_30_11_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// we avoid overriding the predeclared append\n// function by using the name append_ here\nfunction append_(list1, list2) {\n    return is_null(list1)\n           ? list2\n           : pair(head(list1), append_(tail(list1), list2));\n}\n          \nconst squares = list(1, 4, 9, 16, 25);\n          \nconst squares = list(1, 3, 5, 7);\n          '+'\n'+'append_(squares, odds);'+'\n'+'\n// returns: [1, [4, [9, [16, [25, [1, [3, [5, [7, null]]]]]]]]]\n	  '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">append(squares, odds);</pre></div></div>

        <div class="snippet" id="javascript_30_12_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// returns: [1, [4, [9, [16, [25, [1, [3, [5, [7, null]]]]]]]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">// returns: [1, [4, [9, [16, [25, [1, [3, [5, [7, null]]]]]]]]]</pre></div></div>

        <div class="snippet" id="javascript_30_13_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// we avoid overriding the predeclared append\n// function by using the name append_ here\nfunction append_(list1, list2) {\n    return is_null(list1)\n           ? list2\n           : pair(head(list1), append_(tail(list1), list2));\n}\n          \nconst squares = list(1, 4, 9, 16, 25);\n          \nconst squares = list(1, 3, 5, 7);\n          '+'\n'+'append_(odds, squares);'+'\n'+'\n// returns: [1, [3, [5, [7, [1, [4, [9, [16, [25, null]]]]]]]]]\n	  '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">append(odds, squares);</pre></div></div>

        

	
      </p>
</div>

      <div class="permalink">
<a name="p14" class="permalink"></a><p>
        
	The function <kbd>append</kbd>
	
	is also implemented using a recursive plan.
	To <kbd>append</kbd>
        lists <kbd>list1</kbd> and <kbd>list2</kbd>,
	do the following:
        <UL>
          <LI>If <kbd>list1</kbd> is the empty list, then the result is just <kbd>list2</kbd>.
          </LI>
          <LI>Otherwise, <kbd>append</kbd> the <kbd>tail</kbd> of <kbd>list1</kbd> and 
            <kbd>list2</kbd>, and <kbd>pair</kbd> the <kbd>head</kbd> of <kbd>list1</kbd> onto the result:
          </LI>
        </UL>

        <div class="snippet" id="javascript_30_14_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// we avoid overriding the predeclared append\n// function by using the name append_ here\nfunction append_(list1, list2) {\n    return is_null(list1)\n           ? list2\n           : pair(head(list1), append_(tail(list1), list2));\n}'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function append(list1, list2) {
    return is_null(list1)
           ? list2
           : pair(head(list1), append(tail(list1), list2));
}</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="ex_2.17" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.17">Exercise 2.17 </a></b> 
        Define a
        function

        
        
        <kbd>last_pair</kbd> that returns the list that contains only
        the last element of a given (nonempty) list:

        

	
        <div class="snippet" id="javascript_30_15_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// last_pair to be given by student\n          '+'\n'+'last_pair(list(23, 72, 149, 34));\n// result: [34, null]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">last_pair(list(23, 72, 149, 34));
// result: [34, null]</pre></div></div>
<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_1_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_1_div"><SOLUTION>
    <div class="snippet" id="javascript_30_16_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// last_pair to be given by student\n          '+'\n'+'function last_pair(items) {\n    return is_null(tail(items))\n           ? items\n           : last_pair(tail(items));\n}'+'\n'+'\nlast_pair(list(23, 72, 149, 34));\n// result: [34, null]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function last_pair(items) {
    return is_null(tail(items))
           ? items
           : last_pair(tail(items));
}</pre></div></div>
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.18" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.18">Exercise 2.18 </a></b>
        Define a
        function

        
        
        <kbd>reverse</kbd> that takes a list as argument and
        returns a list of the same elements in reverse order:

        <div class="snippet" id="javascript_30_17_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'reverse_(list(1, 4, 9, 16, 25));\n// result: [25, [16, [9, [4, [1, null]]]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">reverse(list(1, 4, 9, 16, 25));
// result: [25, [16, [9, [4, [1, null]]]]]</pre></div></div>
<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_2_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_2_div"><SOLUTION>
	<div class="snippet" id="javascript_30_18_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// to avoid overriding of builtin reverse function\n// use function name reverse_\n\n// naive reverse (what is the runtime?)\nfunction reverse_(items) {\n    return is_null(items)\n           ? null\n           : append(reverse_(tail(items)),\n	            pair(head(items), null));\n}'+'\n'+'\nreverse_(list(1, 4, 9, 16, 25));\n// result: [25, [16, [9, [4, [1, null]]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">// naive reverse (what is the runtime?)
function reverse(items) {
    return is_null(items)
           ? null
           : append(reverse(tail(items)),
	            pair(head(items), null));
}</pre></div></div>

 <div class="snippet" id="javascript_30_19_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'// to avoid overriding of builtin reverse function\n// use function name reverse_\n\n// a better version\nfunction reverse_(items) {\n    function reverse_iter(items, result) {\n        return is_null(items)\n               ? result\n               : reverse_iter(tail(items),\n	                      pair(head(items), result));\n    }\n    return reverse_iter(items, null);\n}'+'\n'+'\nreverse_(list(1, 4, 9, 16, 25));\n// result: [25, [16, [9, [4, [1, null]]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">// a better version
function reverse(items) {
    function reverse_iter(items, result) {
        return is_null(items)
               ? result
               : reverse_iter(tail(items),
	                      pair(head(items), result));
    }
    return reverse_iter(items, null);
}</pre></div></div>
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.19" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.19">Exercise 2.19 </a></b> 
        <p>
          Consider the 
          
          change-counting program of
          section <REF NAME="sec:tree-recursion"><a class="superscript" id="2.2.1-sec-link-1.2.2" href="13">1.2.2</a></REF>.  It would be nice to be able to
          easily change the currency used by the program, so that we could
          compute the number of ways to change a British pound, for example.  As
          the program is written, the knowledge of the currency is distributed
          partly into the
          function
          <kbd>first_denomination</kbd> and partly into the
          function
          <kbd>count_change</kbd> (which knows that there are five
          kinds of U.S. coins).  It would be nicer to be able to
          supply a list of coins to be used for making change.
        </p>
        <p>
          We want to rewrite the
          function
          <kbd>cc</kbd> so that its
          second argument is a list of the values of the
          coins to use rather than an integer specifying which coins to use.  We
          could then have lists that defined each kind of currency:
        <div class="snippet" id="javascript_30_20_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const us_coins = list(50, 25, 10, 5, 1);\nconst uk_coins = list(100, 50, 20, 10, 5, 2, 1, 0.5);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const us_coins = list(50, 25, 10, 5, 1);
const uk_coins = list(100, 50, 20, 10, 5, 2, 1, 0.5);</pre></div></div>

          We could then call <kbd>cc</kbd> as follows:

        <div class="snippet" id="javascript_30_21_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// first_denomination, except_first_denomination\n// and no_more to be given by student\n          \nfunction cc(amount, coin_values) {\n    return amount === 0\n           ? 1\n           : amount &lt; 0 || no_more(coin_values)\n             ? 0\n             : cc(amount,\n	          except_first_denomination(coin_values))\n               +\n               cc(amount - first_denomination(coin_values), \n                  coin_values);\n}\n          \nconst us_coins = list(50, 25, 10, 5, 1);\nconst uk_coins = list(100, 50, 20, 10, 5, 2, 1, 0.5);\n          '+'\n'+'cc(100, us_coins);'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">cc(100, us_coins);</pre></div></div>

          To do this will require changing the program <kbd>cc</kbd> somewhat.  It will
          still have the same form, but it will access its second argument
          differently, as follows:

        

        <div class="snippet" id="javascript_30_22_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// first_denomination, except_first_denomination\n// and no_more to be given by student\n          \nconst us_coins = list(50, 25, 10, 5, 1);\nconst uk_coins = list(100, 50, 20, 10, 5, 2, 1, 0.5);\n          '+'\n'+'function cc(amount, coin_values) {\n    return amount === 0\n           ? 1\n           : amount &lt; 0 || no_more(coin_values)\n             ? 0\n             : cc(amount,\n	          except_first_denomination(coin_values))\n               +\n               cc(amount - first_denomination(coin_values), \n                  coin_values);\n}'+'\n'+'\ncc(100, us_coins);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function cc(amount, coin_values) {
    return amount === 0
           ? 1
           : amount &lt; 0 || no_more(coin_values)
             ? 0
             : cc(amount,
	          except_first_denomination(coin_values))
               +
               cc(amount - first_denomination(coin_values), 
                  coin_values);
}</pre></div></div>

        </p>
        <p>
          Define the
          functions
          <kbd>first_denomination</kbd>, <kbd>except_first_denomination</kbd>, and <kbd>no_more</kbd> in terms of primitive
          operations on list structures.  Does the order of the list <kbd>coin_values</kbd> affect the answer produced by <kbd>cc</kbd>?  Why or why not?
        </p>
<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_3_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_3_div"><SOLUTION>
    <div class="snippet" id="javascript_30_23_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// first_denomination, except_first_denomination\n// and no_more to be given by student\n          \nfunction cc(amount, coin_values) {\n    return amount === 0\n           ? 1\n           : amount &lt; 0 || no_more(coin_values)\n             ? 0\n             : cc(amount,\n	          except_first_denomination(coin_values))\n               +\n               cc(amount - first_denomination(coin_values), \n                  coin_values);\n}\n          \nconst us_coins = list(50, 25, 10, 5, 1);\nconst uk_coins = list(100, 50, 20, 10, 5, 2, 1, 0.5);\n          '+'\n'+'function first_denomination(coin_values) {\n    return head(coin_values);\n}\nfunction except_first_denomination(coin_values) {\n    return tail(coin_values);\n}\nfunction no_more(coin_values) {\n    return is_null(coin_values);\n}'+'\n'+'\ncc(100, us_coins);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function first_denomination(coin_values) {
    return head(coin_values);
}
function except_first_denomination(coin_values) {
    return tail(coin_values);
}
function no_more(coin_values) {
    return is_null(coin_values);
}</pre></div></div>
    The order of the list <kbd>coin_values</kbd>
    does not affect the answer given by any correct solution of the problem,
    because the given list represents an unordered collection of denominations.
</SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <SPLIT>
        
      
    

      <div class="permalink">
<a name="ex_2.20" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.20">Exercise 2.20 </a></b>
	In the presence of higher-order functions, it is not strictly necessary
	for functions to have multiple parameters; one would
	suffice.<a class="superscript" id="footnote-link-2" href="30#footnote-2">[2]</a>
	If we have
	a function such as <kbd>plus</kbd> that
	naturally requires two parameters, we could write a variant of the function
	to which we pass the arguments one at
	at time. An application of the variant to the first argument could return a
	function that we can then apply to the second argument, and so on. This
	practice—called
	<EM>currying</EM> and named after the American mathematician and
	logician Haskell Brooks Curry—is quite common
	in programming languages such as Haskell (the reader might venture a guess 
	after whom this programming language is named) and Ocaml. In JavaScript, a curried
	version of <kbd>plus</kbd> looks as follows.
	<div class="snippet" id="javascript_30_24_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function plus_curried(x) {	    \n    return y =&gt; x + y;\n}'+'\n'+'\nplus_curried(3)(4);\n	  '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function plus_curried(x) {	    
    return y =&gt; x + y;
}</pre></div></div>
	
	Write a function <kbd>brooks</kbd>, that
	takes a curried function as first argument and as second argument a list
	of arguments to which the curried function is then applied, one by one,
	in the given order. For example, the following application of
	<kbd>brooks</kbd> should have the
	same effect as the call <kbd>plus_curried(3)(4)</kbd> above.


	

	<div class="snippet" id="javascript_30_25_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \n// brooks to be written by the student\n	  '+'\n'+'brooks(plus_curried, list(3, 4));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks(plus_curried, list(3, 4));</pre></div></div>

	While we are at it, we might as well curry the function
	<kbd>brooks</kbd>! Write
	a function 
	<kbd>brooks_curried</kbd> that
	can be applied as follows, to yield the same result 7:

	

	<div class="snippet" id="javascript_30_26_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \n// brooks_curried to be written by the student\n	  '+'\n'+'brooks_curried(list(plus_curried, 3, 4));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks_curried(list(plus_curried, 3, 4));</pre></div></div>

	With this function 
	<kbd>brooks_curried</kbd>
	what are the results of evaluating the following two statements?

	<div class="snippet" id="javascript_30_27_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \n// brooks_curried to be written by the student\n	  '+'\n'+'brooks_curried(list(brooks_curried,\n                    list(plus_curried, 3, 4)));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks_curried(list(brooks_curried,
                    list(plus_curried, 3, 4)));</pre></div></div>

	<div class="snippet" id="javascript_30_28_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \n// brooks_curried to be written by the student\n	  '+'\n'+'brooks_curried(list(brooks_curried,\n                    list(brooks_curried, \n                         list(plus_curried, 3, 4))));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks_curried(list(brooks_curried,
                    list(brooks_curried, 
                         list(plus_curried, 3, 4))));</pre></div></div>
		
	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_4_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_4_div"><SOLUTION>
	  <OL>
	    <LI>
	      <div class="snippet" id="javascript_30_29_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \n// brooks to be written by the student\n	  '+'\n'+'function brooks(f, items) {\n    return is_null(items)\n           ? f\n           : brooks(f(head(items)), tail(items));\n}'+'\n'+'\nbrooks(plus_curried, list(3, 4));\n	  '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function brooks(f, items) {
    return is_null(items)
           ? f
           : brooks(f(head(items)), tail(items));
}</pre></div></div>
	    </LI>
	    <LI>
	<div class="snippet" id="javascript_30_30_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \nfunction brooks(f, items) {\n    return is_null(items)\n           ? f\n           : brooks(f(head(items)), tail(items));\n}	   \n	  \n// brooks_curried to be written by the student\n	  '+'\n'+'function brooks_curried(items) {\n    return brooks(head(items), tail(items));\n}'+'\n'+'\nbrooks_curried(list(plus_curried, 3, 4));\n	  '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function brooks_curried(items) {
    return brooks(head(items), tail(items));
}</pre></div></div>
	    </LI>
	    <LI>
The statement 
	<div class="snippet" id="javascript_30_31_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \nfunction brooks(f, items) {\n    return is_null(items)\n           ? f\n           : brooks(f(head(items)), tail(items));\n}	   \n	  \nfunction brooks_curried(items) {\n    return brooks(head(items), tail(items));\n}	   \n	  '+'\n'+'brooks_curried(list(brooks_curried,\n                    list(plus_curried, 3, 4)));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks_curried(list(brooks_curried,
                    list(plus_curried, 3, 4)));</pre></div></div>
	of course evaluates to 7, as does
	    </LI>
	    <LI>
	<div class="snippet" id="javascript_30_32_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction plus_curried(x) {	    \n    return y =&gt; x + y;\n}\n	  \nfunction brooks(f, items) {\n    return is_null(items)\n           ? f\n           : brooks(f(head(items)), tail(items));\n}	   \n	  \nfunction brooks_curried(items) {\n    return brooks(head(items), tail(items));\n}	   \n	  '+'\n'+'brooks_curried(list(brooks_curried,\n                    list(brooks_curried, \n                         list(plus_curried, 3, 4))));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">brooks_curried(list(brooks_curried,
                    list(brooks_curried, 
                         list(plus_curried, 3, 4))));</pre></div></div>
	    </LI>
	  </OL>
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>
      
    
      
      </SPLIT>

      <div class="permalink">
<a name="h2" class="permalink"></a><h2>
        Mapping over lists
      </h2>
</div>

      
      
      <div class="permalink">
<a name="p15" class="permalink"></a><p>
        One extremely useful operation is to apply some transformation
        to each element in a list and generate the list of results.
        For instance, the following
        function
        scales each number in a list by
        a given factor:

        <div class="snippet" id="javascript_30_33_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function scale_list(items, factor) {\n    return is_null(items)\n           ? null\n           : pair(head(items) * factor, \n                  scale_list(tail(items), factor));\n}'+'\n'+'\nscale_list(list(1, 2, 3, 4, 5), 10);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function scale_list(items, factor) {
    return is_null(items)
           ? null
           : pair(head(items) * factor, 
                  scale_list(tail(items), factor));
}</pre></div></div>

        
      </p>
</div>

      <div class="permalink">
<a name="p16" class="permalink"></a><p>
        We can abstract this general idea and capture it as a common pattern
        expressed as a higher-order
        function, just as in
        section <REF NAME="sec:higher-order-procedures"><a class="superscript" id="2.2.1-sec-link-1.3" href="18">1.3</a></REF>.  The higher-order
        function
        here is called <kbd>map</kbd>.  The function <kbd>map</kbd> takes as arguments a
        function
        of one argument
        and a list, and returns a list of the results produced by
        applying the
        function
        to each element in the list:
	
      

        
        <div class="snippet" id="javascript_30_34_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction abs(x) {\n    return x &gt;= 0 ? x : -x;\n}\n                '+'\n'+'// we avoid overriding the predeclared map\n// function by using the name map_ here\nfunction map_(fun, items) {\n    return is_null(items)\n           ? null\n           : pair(fun(head(items)), \n                  map_(fun, tail(items)));\n}'+'\n'+'\nmap_(abs, list(-10, 2.5, -11.6, 17));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function map(fun, items) {
    return is_null(items)
           ? null
           : pair(fun(head(items)), 
                  map(fun, tail(items)));
}</pre></div></div>

        <div class="snippet" id="javascript_30_35_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction abs(x) {\n    return x &gt;= 0 ? x : -x;\n}\n                \n// we avoid overriding the predeclared map\n// function by using the name map_ here\nfunction map_(fun, items) {\n    return is_null(items)\n           ? null\n           : pair(fun(head(items)), \n                  map_(fun, tail(items)));\n}\n          '+'\n'+'map_(abs, list(-10, 2.5, -11.6, 17));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">map(abs, list(-10, 2.5, -11.6, 17));</pre></div></div>

        <div class="snippet" id="javascript_30_36_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// we avoid overriding the predeclared map\n// function by using the name map_ here\nfunction map_(fun, items) {\n    return is_null(items)\n           ? null\n           : pair(fun(head(items)), \n                  map_(fun, tail(items)));\n}\n          '+'\n'+'map_(x =&gt; x * x, list(1, 2, 3, 4));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">map(x =&gt; x * x, list(1, 2, 3, 4));</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="p17" class="permalink"></a><p>
        Now we can give a new definition of <kbd>scale_list</kbd> in terms of <kbd>map</kbd>:
        <div class="snippet" id="javascript_30_37_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function scale_list(items, factor) {\n    return map(x =&gt; x * factor, items);\n}'+'\n'+'\nscale_list(list(1, 2, 3, 4, 5), 10);\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function scale_list(items, factor) {
    return map(x =&gt; x * factor, items);
}</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="p18" class="permalink"></a><p>
        
	The function <kbd>map</kbd>
	
	is an important construct, not only because it captures a
        common pattern, but because it establishes a higher level of
        abstraction in dealing with lists.  In the original definition of <kbd>scale_list</kbd>, the recursive structure of the program draws attention to
        the element-by-element processing of the list.  Defining <kbd>scale_list</kbd> in terms of <kbd>map</kbd> suppresses that level of detail and
        emphasizes that scaling transforms a list of elements to a list of
        results.  The difference between the two definitions is not that the
        computer is performing a different process (it isn't) but that we
        think about the process differently.  In effect, <kbd>map</kbd> helps
        establish an abstraction barrier that isolates the implementation of
        functions
        that transform lists from the details of how the
        elements of the list are extracted and combined.  Like the barriers
        shown in figure <REF NAME="fig:abstraction-barriers"><a class="superscript" id="2.2.1-fig-link-2.1" href="26#fig_2.1">2.1</a></REF>, this abstraction gives
        us the flexibility to change the low-level details of how sequences
        are implemented, while preserving the conceptual framework of
        operations that transform sequences to sequences.
        section <REF NAME="sec:sequences-conventional-interfaces"><a class="superscript" id="2.2.1-sec-link-2.2.3" href="32">2.2.3</a></REF> expands on this use
        of sequences as a framework for organizing programs.
      </p>
</div>

      <div class="permalink">
<a name="ex_2.21" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.21">Exercise 2.21 </a></b>
        The
        function
        <kbd>square_list</kbd> takes a list of
        numbers as argument and returns a list of the squares of those
        numbers.


        <div class="snippet" id="javascript_30_38_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'square_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">square_list(list(1, 2, 3, 4));
// returns: [1, [4, [9, [16, null]]]]</pre></div></div>

        Here are two different definitions of <kbd>square_list</kbd>.  Complete
        both of them by filling in the missing expressions:

        <div class="snippet" id="javascript_30_39_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function square_list(items) {\n    return is_null(items) \n           ? null\n           : pair(??, ??);\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
    return is_null(items) 
           ? null
           : pair(??, ??);
}</pre></div></div>

        <div class="snippet" id="javascript_30_40_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function square_list(items) {\n   return map(??, ??);\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
   return map(??, ??);
}</pre></div></div>

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_5_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_5_div"><SOLUTION>
    <div class="snippet" id="javascript_30_41_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                '+'\n'+'function square_list(items) {\n    return is_null(items)\n           ? null\n           : pair(square(head(items)),\n	          square_list(tail(items)));\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
    return is_null(items)
           ? null
           : pair(square(head(items)),
	          square_list(tail(items)));
}</pre></div></div>
  <div class="snippet" id="javascript_30_42_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                '+'\n'+'function square_list(items) {\n    return map(square, items);\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
    return map(square, items);
}</pre></div></div>


  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.22" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.22">Exercise 2.22 </a></b> 
        Louis Reasoner tries to rewrite the first <kbd>square_list</kbd>
        function
        of
        exercise <REF NAME="ex:square-list"><a class="superscript" id="2.2.1-ex-link-2.21" href="30#ex_2.21">2.21</a></REF> so that it evolves an iterative
        process:

        
	
        <div class="snippet" id="javascript_30_43_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \n// THIS IS NOT A CORRECT SOLUTION	    \n	  '+'\n'+'function square_list(items) {\n    function iter(things, answer) {\n        return is_null(things) \n               ? answer\n               : iter(tail(things), \n                      pair(square(head(things)), \n                           answer));\n    }\n    return iter(items, null);\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
    function iter(things, answer) {
        return is_null(things) 
               ? answer
               : iter(tail(things), 
                      pair(square(head(things)), 
                           answer));
    }
    return iter(items, null);
}</pre></div></div>

        Unfortunately, defining <kbd>square_list</kbd> this way produces the answer
        list in the reverse order of the one desired.  Why?

        Louis then tries to fix his bug by interchanging the arguments to
        <kbd>pair</kbd>:

        <div class="snippet" id="javascript_30_44_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square(x) {\n    return x * x;\n}\n                \n// THIS IS NOT A CORRECT SOLUTION	    \n	  '+'\n'+'function square_list(items) {\n   function iter(things, answer) {\n       return is_null(things)\n              ? answer\n              : iter(tail(things), \n                     pair(answer, \n                          square(head(things))));\n   }\n   return iter(items, null);\n}'+'\n'+'\nsquare_list(list(1, 2, 3, 4));\n// returns: [1, [4, [9, [16, null]]]]\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function square_list(items) {
   function iter(things, answer) {
       return is_null(things)
              ? answer
              : iter(tail(things), 
                     pair(answer, 
                          square(head(things))));
   }
   return iter(items, null);
}</pre></div></div>

        This doesn't work either.  Explain.
        
<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_6_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_6_div"><SOLUTION>
  <OL>
    <LI>
      The result list is reversed in the first program
      because the argument list is traversed in the
      given order, from first to last, but squares are added successively to the
      front of the answer list via
      
      <kbd>pair</kbd>.
      The last element of the list is the last one to be added to the answer
      and thus ends up as the first element of the result list.
    </LI>
    <LI>
      The second program makes things worse! The result is not even a list any longer,
      because the elements occupy the tail position of the result list and not the
      head position.
    </LI>
  </OL>
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.23" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.23">Exercise 2.23 </a></b>
        The
        function

        
        
	<kbd>for_each</kbd>
	is similar to <kbd>map</kbd>.  It takes as arguments a
        
	function
        and a list of elements.  However, rather than forming a list of the  results,
	
	<kbd>for_each</kbd>
	just applies the
	
	function
        to each of the elements in turn, from left to right.
	The values returned by applying the
        
	function
        to the elements are not used at
        all—<kbd>for_each</kbd> is used with
        
	functions
        that perform an action, such as printing.  For example, 

        

	

        <div class="snippet" id="javascript_30_45_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// for_each_ to be given by student\n	  '+'\n'+'for_each_(x =&gt; display(x), \n         list(57, 321, 88));'+'\n'+''+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">for_each(x =&gt; display(x), 
         list(57, 321, 88));</pre></div></div>

        The value returned by the call to
	
	<kbd>for_each</kbd>
	
	(not illustrated above)
        can be something arbitrary, such as true.  Give an
        implementation of
	
	<kbd>for_each</kbd>.
        
 <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_30_7_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_30_7_div"><SOLUTION>
    <div class="snippet" id="javascript_30_46_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// for_each_ to be given by student\n	  '+'\n'+'// we avoid overriding the predeclared for_each\n// function by using the name for_each_ here\nfunction for_each_(fun, items) {\n    if (is_null(items)) {\n        return undefined;\n    } else {\n        fun(head(items));\n        for_each_(fun, tail(items));\n    }\n}'+'\n'+'\nfor_each_(x =&gt; display(x), \n         list(57, 321, 88));\n          '+'\n'); var url = 'https://source-academy.github.io/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function for_each(fun, items) {
    if (is_null(items)){
        return undefined;
    } else {
        fun(head(items));
        for_each(fun, tail(items));
    }
}</pre></div></div>
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>
      
      

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="30#footnote-link-1">[1] </a><FOOTNOTE>In this book, we use <EM>list</EM> to mean a chain of
          pairs terminated by the end-of-list marker.  In contrast, the term
          
          
          <EM>list structure</EM> refers to any data structure made out of pairs, 
          not just to lists.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="30#footnote-link-2">[2] </a><FOOTNOTE>Exercise 2.20 of the original textbook deals with Scheme
	operators that take variable numbers of arguments. This concept exists
	in JavaScript, but plays a less prominent role. The textbook adaptors
	decided to sneak in currying on this occasion.
      </FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="29">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="31">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        2.2.1 
        Representing Sequences
      
    </div>
  <script>
//<![CDATA[
var chapter_id = 30;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
