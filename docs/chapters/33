<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="2.2.4 
        Example: A Picture Language
      " />
    <title>
         2.2.4 
        Example: A Picture Language
      
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="lxIfjqBGWP+ajBbrh3jyKdKemhjEw4WIRs7ttNhsZiQqZfU8Rns8job83Ftr45pJiR35dg3LjsCO/ZQa5plXgA==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-646697584dca3e04ba2ffbdf497816ce21a735eef61eccd54a0f8bf08a4e82e9.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">JavaScript Adaptation Making-of</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">2.2.4 
        Example: A Picture Language
      </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      

      <div class="permalink">
<a name="p1" class="permalink"></a><p>
        This section presents a simple language for drawing
        pictures that illustrates the
        power of data abstraction and closure,
        and also exploits higher-order
        functions
        in
        an essential way.  The language
        is designed to make it easy to experiment with patterns
        such as the ones in figure <REF NAME="fig:sqlimit-designs"><a class="superscript" id="2.2.4-fig-link-2.9" href="33#fig_2.9">2.9</a></REF>, which are
        composed of repeated elements that are shifted and
        scaled.<a class="superscript" id="footnote-link-1" href="33#footnote-1">[1]</a> In this language,
        the data objects being combined
        are represented as
        functions
        rather than as list structure.
        Just as <kbd>pair</kbd>, which satisfies the
        
        closure property,
        allowed us to easily build arbitrarily complicated
        list structure, the operations in this language, which also
        satisfy the closure property, allow us to easily build
        arbitrarily complicated patterns.

              <FIGURE>
                <IMAGE src="img_javascript/cross-carpet.png"></IMAGE>
                   
                <IMAGE src="img_javascript/heart-carpet.png"></IMAGE>
                
                <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.9" href="33#fig_2.9">Figure 2.9 </a></b>Designs generated with the picture language.
                </div>
              </FIGURE>
	      
      </p>
</div>

      <div class="permalink">
<a name="h1" class="permalink"></a><h2>
        The picture language
      </h2>
</div>

      <div class="permalink">
<a name="p2" class="permalink"></a><p>
        When we began our study of programming in
        section <REF NAME="sec:elements-of-programming"><a class="superscript" id="2.2.4-sec-link-1.1" href="2">1.1</a></REF>, we emphasized the
        importance of describing a language by focusing on the language's
        primitives, its means of combination, and its means of abstraction.
        We'll follow that framework here.
      </p>
</div>

      <div class="permalink">
<a name="p3" class="permalink"></a><p>
        Part of the elegance of this picture language is that there is
        only one kind of element, called a
        
        <EM>painter</EM>.  A painter
        draws an image that is shifted and scaled to fit within a designated
        
        parallelogram-shaped frame.  For example, there's a primitive painter
        we'll call <kbd>heart</kbd> that makes a heart shape, as
        shown in figure <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF>.

	<SPLIT>
	  
	  
            <FIGURE>
	      <IMAGE src="img_javascript/heart_shapes.png"></IMAGE>
                
                <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.10" href="33#fig_2.10">Figure 2.10 </a></b>Images produced by the <kbd>heart</kbd>
		painter, with respect
        to four different frames.  The frames, shown with thin lines, are not
        part of the images.
                </div>
              </FIGURE>
	  
	</SPLIT>
	    
        The actual shape of the drawing depends on the frame—all
        four images in figure <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF> are produced by the same <kbd>heart</kbd> painter, but with respect to four different frames.

        <SPLIT>
	  
	  
      

	In the following, we shall use a function
	<kbd>show</kbd>
	to display a painter in a default frame.

            <div class="snippet" id="javascript_33_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'show(heart);'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">show(heart);</pre></div></div>

          
        </SPLIT>

      </p>
</div>


      <div class="permalink">
<a name="p4" class="permalink"></a><p>
        
        To combine images,
        we use various operations that construct new painters
        from given painters.
        For example, the
        
        <kbd>beside</kbd> operation takes two painters and produces a new,
        compound painter that draws the first painter's image in the left half
        of the frame and the second painter's image in the right half of the frame.
        Similarly,
        
        <kbd>stack</kbd> takes two painters and produces a compound
        painter that draws the first painter's image below the second
        painter's image.
        Some operations transform a single painter to produce
        a new painter.  For example,
        
        <kbd>flip_vert</kbd> takes a painter and
        produces a painter that draws its image upside-down, and
        
        <kbd>flip_horiz</kbd> produces a painter that draws the original
        painter's image left-to-right reversed.
      </p>
</div>

	<SPLIT>
	  
	  

            <FIGURE>
	      <IMAGE src="img_javascript/heart2.png"></IMAGE>	      
              <IMAGE src="img_javascript/heart4.png"></IMAGE>
        <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.11" href="33#fig_2.11">Figure 2.11 </a></b>Creating a complex figure,
        starting from the <kbd>heart</kbd> painter of Figure <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF>.
        </div>
        
        </FIGURE>
	    
          
	</SPLIT>

      
      <div class="permalink">
<a name="p5" class="permalink"></a><p>
        Figure <REF NAME="fig:build-up-wave"><a class="superscript" id="2.2.4-fig-link-2.11" href="33#fig_2.11">2.11</a></REF> shows the drawing of a painter called
        <kbd>heart4</kbd> that is built up in two stages starting from <kbd>heart</kbd>:


	  <div class="snippet" id="javascript_33_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'const heart2 = beside(heart, flip_vert(heart)); // (a)'+'\n'+'\nshow(heart2);\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const heart2 = beside(heart, flip_vert(heart)); // (a)</pre></div></div>

        

        <div class="snippet" id="javascript_33_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nconst heart2 = beside(heart, flip_vert(heart)); // (a)\n        '+'\n'+'const heart4 = stack(heart2, heart2);           // (b)'+'\n'+'\nshow(heart4);\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const heart4 = stack(heart2, heart2);           // (b)</pre></div></div>

        


      </p>
</div>

      <div class="permalink">
<a name="p6" class="permalink"></a><p>
        
        In building up a complex image in this manner we are exploiting the
        fact that painters are closed under the language's means of
        combination.  The <kbd>beside</kbd> or <kbd>stack</kbd> of two painters is
        itself a painter; therefore, we can use it as an element in making
        more complex painters.  As with building up list structure using <kbd>pair</kbd>, the closure of our data under the means of combination is
        crucial to the ability to create complex structures while using only a
        few operations.
      </p>
</div>

      <div class="permalink">
<a name="p7" class="permalink"></a><p>
        Once we can combine painters, we would like to be able to abstract
        typical patterns of combining painters.
        We will implement the painter operations as 
        
	JavaScript functions.
        This means that we don't need a special abstraction mechanism
        in the picture language:
        Since the means of combination
        are ordinary 
        
	JavaScript functions,
	we automatically have the capability
        to do anything with painter operations that we can do with
        functions.
        For example, we can abstract the pattern in <kbd>wave4</kbd> as

        <div class="snippet" id="javascript_33_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function flipped_pairs(painter) {\n    const painter2 = beside(painter, flip_vert(painter));\n    return stack(painter2, painter2);\n}'+'\n'+'\nconst heart4 = flipped_pairs(heart);\nshow(heart4);\n        '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function flipped_pairs(painter) {
    const painter2 = beside(painter, flip_vert(painter));
    return stack(painter2, painter2);
}</pre></div></div>

        and define <kbd>heart4</kbd> as an instance of this pattern:

        <div class="snippet" id="javascript_33_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction flipped_pairs(painter) {\n    const painter2 = beside(painter, flip_vert(painter));\n    return stack(painter2, painter2);\n}\n          '+'\n'+'const heart4 = flipped_pairs(heart);\nshow(heart4);'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const heart4 = flipped_pairs(heart);</pre></div></div>

      </p>
</div>

      <div class="permalink">
<a name="p8" class="permalink"></a><p>
        <FIGURE>
          <IMAGE src="img_original/ch2-Z-G-37.svg"></IMAGE>
          <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.12" href="33#fig_2.12">Figure 2.12 </a></b>Recursive plans for (a) <kbd>right_split(n)</kbd> and (b) <kbd>corner_split(n)</kbd>.</div>
        
        </FIGURE>

        We can also define recursive operations.
        Here's one that makes painters split and branch
        towards the right as shown in
	figures <REF NAME="fig:split-plans"><a class="superscript" id="2.2.4-fig-link-2.12" href="33#fig_2.12">2.12</a></REF>,
	<REF NAME="fig:split-plans-2"><a class="superscript" id="2.2.4-fig-link-2.13" href="33#fig_2.13">2.13</a></REF> and
	<REF NAME="fig:split-plans-3"><a class="superscript" id="2.2.4-fig-link-2.14" href="33#fig_2.14">2.14</a></REF>:	
        <div class="snippet" id="javascript_33_5_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}'+'\n'+'\nshow(right_split(heart, 4));\n            '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function right_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const smaller = right_split(painter, n - 1);
        return beside(painter, stack(smaller, smaller));
    }
}</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="p9" class="permalink"></a><p>
        We can produce balanced patterns by branching upwards
        as well as towards the right (see exercise <REF NAME="ex:up-split"><a class="superscript" id="2.2.4-ex-link-2.44" href="33#ex_2.44">2.44</a></REF>
        and Figure <REF NAME="fig:split-plans"><a class="superscript" id="2.2.4-fig-link-2.12" href="33#fig_2.12">2.12</a></REF>).

        <div class="snippet" id="javascript_33_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          \nfunction up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}\n'+'\n'+'function corner_split(painter, n) {\n    if (n === 0) {\n       return painter;\n    } else {\n       const up = up_split(painter, n - 1);\n       const right = right_split(painter, n - 1);\n       const top_left = beside(up, up);\n       const bottom_right = stack(right, right);\n       const corner = corner_split(painter, n - 1);\n       return stack(beside(top_left, corner),\n                    beside(painter, bottom_right));\n    }\n}'+'\n'+'\nshow(corner_split(heart, 4));\n            '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function corner_split(painter, n) {
    if (n === 0) {
       return painter;
    } else {
       const up = up_split(painter, n - 1);
       const right = right_split(painter, n - 1);
       const top_left = beside(up, up);
       const bottom_right = stack(right, right);
       const corner = corner_split(painter, n - 1);
       return stack(beside(top_left, corner),
                    beside(painter, bottom_right));
    }
}</pre></div></div>

      </p>
</div>

      <div class="permalink">
<a name="p10" class="permalink"></a><p>

          <div class="snippet" id="javascript_33_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          '+'\n'+'show(right_split(heart, 4));'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">show(right_split(heart, 4));</pre></div></div>

          <FIGURE>
	    <IMAGE src="img_javascript/right_split_heart.png"></IMAGE>
        <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.13" href="33#fig_2.13">Figure 2.13 </a></b>The recursive operation <kbd>right_split</kbd> applied to the painter <kbd>heart</kbd>.</div>
        
	</FIGURE>
	
          <div class="snippet" id="javascript_33_8_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          \nfunction up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}\n\nfunction corner_split(painter, n) {\n    if (n === 0) {\n       return painter;\n    } else {\n       const up = up_split(painter, n - 1);\n       const right = right_split(painter, n - 1);\n       const top_left = beside(up, up);\n       const bottom_right = stack(right, right);\n       const corner = corner_split(painter, n - 1);\n       return stack(beside(top_left, corner),\n                    beside(painter, bottom_right));\n    }\n}\n        '+'\n'+'show(corner_split(heart, 4));'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">show(corner_split(heart, 4));</pre></div></div>

          <FIGURE>
	    <IMAGE src="img_javascript/corner_split_heart.png"></IMAGE>
        <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.14" href="33#fig_2.14">Figure 2.14 </a></b>The recursive operation <kbd>corner_split</kbd> applied to the painter <kbd>heart</kbd>. Combining four <kbd>corner_split</kbd> figures produces symmetric <kbd>square_limit</kbd> as shown in figure <REF NAME="fig:sqlimit-designs"><a class="superscript" id="2.2.4-fig-link-2.9" href="33#fig_2.9">2.9</a></REF>.</div>
        
	</FIGURE>
      </p>
</div>

      <div class="permalink">
<a name="p11" class="permalink"></a><p>
        By placing four copies of a <kbd>corner_split</kbd>
        appropriately, we obtain a pattern called <kbd>square_limit</kbd>, whose
        application to
	
	  
	  
	    two painters
	  
	   is shown in
        figure <REF NAME="fig:sqlimit-designs"><a class="superscript" id="2.2.4-fig-link-2.9" href="33#fig_2.9">2.9</a></REF>:
        <div class="snippet" id="javascript_33_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          \nfunction up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}\n\nfunction corner_split(painter, n) {\n    if (n === 0) {\n       return painter;\n    } else {\n       const up = up_split(painter, n - 1);\n       const right = right_split(painter, n - 1);\n       const top_left = beside(up, up);\n       const bottom_right = stack(right, right);\n       const corner = corner_split(painter, n - 1);\n       return stack(beside(top_left, corner),\n                    beside(painter, bottom_right));\n    }\n}\n        '+'\n'+'function square_limit(painter, n) {\n    const quarter = corner_split(painter, n);\n    const upper_half = beside(flip_horiz(quarter), quarter);\n    const lower_half = beside(turn_upside_down(quarter),\n                              flip_vert(quarter));\n    return stack(upper_half, lower_half);\n}'+'\n'+'\nshow(square_limit(heart, 5));\n            '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function square_limit(painter, n) {
    const quarter = corner_split(painter, n);
    const upper_half = beside(flip_horiz(quarter), quarter);
    const lower_half = beside(turn_upside_down(quarter),
                              flip_vert(quarter));
    return stack(upper_half, lower_half);
}</pre></div></div>

        

      </p>
</div>

      <div class="permalink">
<a name="ex_2.44" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.44">Exercise 2.44 </a></b>
        Define the
        function

        
        <kbd>up_split</kbd> used by <kbd>corner_split</kbd>.
        It is similar to <kbd>right_split</kbd>, except that it switches the
        roles of <kbd>stack</kbd> and <kbd>beside</kbd>.
        

<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_1_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_1_div"><SOLUTION>

  <div class="snippet" id="javascript_33_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}'+'\n'+'\nshow(up_split(heart, 4));\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function up_split(painter, n) {
    if (n === 0) {
        return painter;
    } else {
        const smaller = up_split(painter, n - 1);
        return stack(beside(smaller, smaller), painter);
    }
}</pre></div></div>

        

</SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="h2" class="permalink"></a><h2>
        Higher-order operations
      </h2>
</div>

      

      <div class="permalink">
<a name="p12" class="permalink"></a><p>
        In addition to abstracting patterns of combining painters, we can work
        at a higher level, abstracting patterns of combining painter operations.
        That is, we can view the painter operations as elements to manipulate
        and can write means of combination for these elements—functions
        that
        take painter operations as arguments and create new painter operations.
      </p>
</div>

      <div class="permalink">
<a name="p13" class="permalink"></a><p>
        For example, <kbd>flipped_pairs</kbd> and <kbd>square_limit</kbd> each
        arrange four copies of a painter's image in a square pattern; they differ
        only in how they orient the copies.
        One way to abstract this pattern of painter combination is with
        the following
        function, which takes four one-argument painter operations
        and produces a painter operation that transforms a given
        painter with those four operations and arranges the results in a square.
        The functions <kbd>tl</kbd>, <kbd>tr</kbd>, <kbd>bl</kbd>, and <kbd>br</kbd> are the
        transformations to apply to the top left copy, the top right copy,
        the bottom left copy, and the bottom right copy, respectively.

        <div class="snippet" id="javascript_33_11_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction identity(x) {\n    return x;\n}\n          '+'\n'+'function square_of_four(tl, tr, bl, br) {\n    return painter =&gt; stack(beside(tl(painter), tr(painter)),\n                            beside(bl(painter), br(painter)));\n}'+'\n'+'\nshow(square_of_four(turn_upside_down, identity, \n                    quarter_turn_right, quarter_turn_left)\n     (heart)\n    );\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function square_of_four(tl, tr, bl, br) {
    return painter =&gt; stack(beside(tl(painter), tr(painter)),
                            beside(bl(painter), br(painter)));
}</pre></div></div>

        

        Then <kbd>flipped_pairs</kbd> can be defined in terms
        of <kbd>square_of_four</kbd> as follows:<a class="superscript" id="footnote-link-2" href="33#footnote-2">[2]</a>

        <div class="snippet" id="javascript_33_12_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square_of_four(tl, tr, bl, br) {\n    return painter =&gt; stack(beside(tl(painter), tr(painter)),\n                            beside(bl(painter), br(painter)));\n}\n          \nfunction identity(x) {\n    return x;\n}\n          '+'\n'+'function flipped_pairs(painter) {\n    const combine4 = square_of_four(turn_upside_down, flip_vert, \n                                    flip_horiz, identity);\n    return combine4(painter);\n}'+'\n'+'\nshow(flipped_pairs(heart));\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function flipped_pairs(painter) {
    const combine4 = square_of_four(turn_upside_down, flip_vert, 
                                    flip_horiz, identity);
    return combine4(painter);
}</pre></div></div>

        

        and <kbd>square_limit</kbd> can be expressed as<a class="superscript" id="footnote-link-3" href="33#footnote-3">[3]</a>

        <div class="snippet" id="javascript_33_13_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square_of_four(tl, tr, bl, br) {\n    return painter =&gt; stack(beside(tl(painter), tr(painter)),\n                            beside(bl(painter), br(painter)));\n}\n          \nfunction identity(x) {\n    return x;\n}\n          \nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          \nfunction up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}\n\nfunction corner_split(painter, n) {\n    if (n === 0) {\n       return painter;\n    } else {\n       const up = up_split(painter, n - 1);\n       const right = right_split(painter, n - 1);\n       const top_left = beside(up, up);\n       const bottom_right = stack(right, right);\n       const corner = corner_split(painter, n - 1);\n       return stack(beside(top_left, corner),\n                    beside(painter, bottom_right));\n    }\n}\n        '+'\n'+'function square_limit(painter, n) {\n    const combine4 = square_of_four(flip_horiz, identity, \n                                    turn_upside_down, flip_vert);\n    return combine4(corner_split(painter, n));\n}'+'\n'+'\nshow(square_limit(heart, 4));\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function square_limit(painter, n) {
    const combine4 = square_of_four(flip_horiz, identity, 
                                    turn_upside_down, flip_vert);
    return combine4(corner_split(painter, n));
}</pre></div></div>

        

      </p>
</div>

      <div class="permalink">
<a name="ex_2.45" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.45">Exercise 2.45 </a></b>
        The functions <kbd>right_split</kbd> and <kbd>up_split</kbd> can be expressed as
        instances of a general splitting operation.
        Define a
        function

        
        <kbd>split</kbd> with the property that evaluating

	
	
	<div class="snippet" id="javascript_33_14_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// function split to be written by student	    \n	  '+'\n'+'const right_split = split(beside, below);\nconst up_split = split(below, beside);'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const right_split = split(beside, below);
const up_split = split(below, beside);</pre></div></div>

        produces
        functions
        <kbd>right_split</kbd> and <kbd>up_split</kbd> with the same
        behaviors as the ones already defined.
        
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_2_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_2_div"><SOLUTION>
    <div class="snippet" id="javascript_33_15_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// function split to be written by student	    \n	  '+'\n'+'function split(identity_op, smaller_op) {\n    function rec_split(painter, n) {\n        if (n===0) {\n            return painter;\n        } else {\n            const smaller = rec_split(painter, n - 1);\n            return identity_op(painter, \n                        smaller_op(smaller, smaller));\n        }\n    }\n    return rec_split;\n}'+'\n'+'\nconst right_split = split(beside, stack);\n\nshow(right_split(heart, 4));\n            '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">function split(identity_op, smaller_op) {
    function rec_split(painter, n) {
        if (n===0) {
            return painter;
        } else {
            const smaller = rec_split(painter, n - 1);
            return identity_op(painter, 
                        smaller_op(smaller, smaller));
        }
    }
    return rec_split;
}</pre></div></div>

          <div class="snippet" id="javascript_33_16_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// function split to be written by student	    \n	  '+'\n'+'const right_split = split(beside, stack);\n\nshow(right_split(heart, 4));'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const right_split = split(beside, stack);

show(right_split(heart, 4));</pre></div></div>

  </SOLUTION></div>
</div>
      </EXERCISE>
</div>


      
      <div class="permalink">
<a name="h3" class="permalink"></a><h2>
        Frames
      </h2>
</div>

      
      <div class="permalink">
<a name="p14" class="permalink"></a><p>
        Before we can show how to implement painters and their
        means of combination, we must first consider
        
        frames.  A frame can be described by three vectors—an origin vector
        and two edge vectors.  The origin vector specifies the offset of the
        frame's origin from some absolute origin in the plane, and the edge
        vectors specify the offsets of the frame's corners from its origin.
        If the edges are perpendicular, the frame will be rectangular.
        Otherwise the frame will be a more general parallelogram.
      </p>
</div>

      <div class="permalink">
<a name="p15" class="permalink"></a><p>
        Figure <REF NAME="fig:frame"><a class="superscript" id="2.2.4-fig-link-2.15" href="33#fig_2.15">2.15</a></REF> shows a frame and its associated vectors.  In
        accordance with data abstraction, we need not be
        specific yet about how frames are represented, other than to say that
        there is a constructor
        
        <kbd>make_frame</kbd>, which takes three vectors and
        produces a frame, and three corresponding selectors
        
        <kbd>origin_frame</kbd>, 
        
        <kbd>edge1_frame</kbd>, and
        
        <kbd>edge2_frame</kbd> (see
        exercise <REF NAME="ex:implement-frames"><a class="superscript" id="2.2.4-ex-link-2.47" href="33#ex_2.47">2.47</a></REF>).

        <FIGURE>
	  <IMAGE src="img_original/ch2-Z-G-42.svg"></IMAGE>
        <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.15" href="33#fig_2.15">Figure 2.15 </a></b>A frame is described by three vectors—an origin and two edges.
        </div>
        
        </FIGURE>
      </p>
</div>

      <div class="permalink">
<a name="p16" class="permalink"></a><p>
        
        We will use coordinates in the unit square ($0\leq x, y\leq 1$)
        to specify images.
        With each frame, we associate a
        
        <EM>frame coordinate map</EM>, which
        will be used to shift and scale images to fit the frame.  The map
        transforms the unit square into the frame by
        mapping the vector $\mathbf{v}=(x, y)$ to the vector sum
        
        \[
        \text{Origin(Frame)} + x\cdot \text{ Edge}_1\text{ (Frame)}
        + y\cdot \text{ Edge}_2\text{ (Frame)}
        \]
        
        For example, $(0, 0)$ is mapped to the origin of the frame, $(1, 1)$ to
        the vertex diagonally opposite the origin, and $(0.5, 0.5)$ to the
        center of the frame.  We can create a frame's coordinate map with the
        following
        function:<a class="superscript" id="footnote-link-4" href="33#footnote-4">[4]</a>

        <div class="snippet" id="javascript_33_17_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            '+'\n'+'function frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}'+'\n'+'\nconst my_origin = make_vect(1.0, 2.0);\nconst my_edge_1 = make_vect(3.0, 4.0);\nconst my_edge_2 = make_vect(5.0, 6.0);\nconst my_frame = make_frame(my_origin, my_edge_1, my_edge_2);\nconst my_coord_map = frame_coord_map(my_frame);\nconst my_vector = make_vect(1.0, 2.0);\nconst my_mapped_vector = my_coord_map(my_vector);\nmy_mapped_vector;\n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function frame_coord_map(frame) {
    return v =&gt; add_vect(origin_frame(frame), 
                         add_vect(scale_vect(xcor_vect(v), 
                                             edge1_frame(frame)), 
                                  scale_vect(ycor_vect(v), 
                                             edge2_frame(frame))));
}</pre></div></div>

        
	
      </p>
</div>

      <div class="permalink">
<a name="p17" class="permalink"></a><p>
        Observe that applying <kbd>frame_coord_map</kbd> to a frame returns
        a
        function
        that, given a vector, returns a vector.
        If the argument vector is in the unit square, the result vector
        will be in the frame.  For example, 
        <div class="snippet" id="javascript_33_18_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          '+'\n'+'const a_frame = make_frame(make_vect(1.0, 2.0), \n                           make_vect(3.0, 4.0),\n                           make_vect(5.0, 5.0));\nframe_coord_map(a_frame)(make_vect(0, 0));'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">frame_coord_map(a_frame)(make_vect(0, 0));</pre></div></div>
        returns the same vector as
        <div class="snippet" id="javascript_33_19_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            '+'\n'+'const a_frame = make_frame(make_vect(1.0, 2.0), \n                           make_vect(3.0, 4.0),\n                           make_vect(5.0, 5.0));\norigin_frame(a_frame);'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">origin_frame(a_frame);</pre></div></div>
      </p>
</div>

      <div class="permalink">
<a name="ex_2.46" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.46">Exercise 2.46 </a></b>
        
        
        A two-dimensional vector $v$ running from the origin to a point
        can be represented as a pair
        consisting of an $x$-coordinate and a $y$-coordinate.  Implement a data
        abstraction for vectors by giving a constructor
        
        <kbd>make_vect</kbd> and
        corresponding selectors
        
        <kbd>xcor_vect</kbd> and
        
        <kbd>ycor_vect</kbd>.  In
        terms of your selectors and constructor, implement
        functions

        
        <kbd>add_vect</kbd>, 
        
        <kbd>sub_vect</kbd>, and
        
        <kbd>scale_vect</kbd> that perform
        the operations vector addition, vector subtraction, and multiplying a
        vector by a scalar:
        
        \begin{eqnarray*}
        (x_1, y_1)+(x_2, y_2) &amp;=&amp;(x_1+x_2, y_1+y_2)\\
        (x_1, y_1)-(x_2, y_2)&amp;=&amp; (x_1-x_2, y_1-y_2)\\
        s\cdot(x, y)&amp;=&amp;(sx, sy)
        \end{eqnarray*}
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_3_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_3_div"><SOLUTION>

          <div class="snippet" id="javascript_33_20_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}'+'\n'+'\nconst my_vector_1 = make_vect(1.0, 2.0);\nconst my_vector_2 = make_vect(3.0, 4.0);\nadd_vect(my_vector_1, my_vector_2);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_vect(x, y) {
    return pair(x, y);
}
function xcor_vect(vector) {
    return head(vector);
}
function ycor_vect(vector) {
    return tail(vector);
}
function scale_vect(factor, vector) {
    return make_vect(factor * xcor_vect(vector), 
                     factor * ycor_vect(vector));
}
function add_vect(vector1, vector2) {
    return make_vect(xcor_vect(vector1)  
                     + xcor_vect(vector2), 
                     ycor_vect(vector1)  
                     + ycor_vect(vector2));
}
function sub_vect(vector1, vector2) {
    return make_vect(xcor_vect(vector1)  
                     - xcor_vect(vector2), 
                     ycor_vect(vector1)  
                     - ycor_vect(vector2));
}</pre></div></div>

          
	  
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.47" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.47">Exercise 2.47 </a></b>
        Here are two possible constructors for frames:
        <div class="snippet" id="javascript_33_21_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">function make_frame(origin, edge1, edge2) {
    return list(origin, edge1, edge2);
}

function make_frame(origin, edge1, edge2) {
    return pair(origin, pair(edge1, edge2));
}</pre></div></div>

        For each constructor supply the appropriate selectors to produce an
        implementation for frames.
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_4_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_4_div"><SOLUTION>

	  <OL>

	    <LI>
	  <div class="snippet" id="javascript_33_22_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            '+'\n'+'function make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}'+'\n'+'\nconst my_origin = make_vect(1.0, 2.0);\nconst my_edge_1 = make_vect(3.0, 4.0);\nconst my_edge_2 = make_vect(5.0, 6.0);\nconst my_frame = make_frame(my_origin, my_edge_1, my_edge_2);\nedge2_frame(my_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_frame(origin, edge1, edge2) {
    return list(origin, edge1, edge2);
}
function origin_frame(frame) {
    return list_ref(frame, 0);
}
function edge1_frame(frame) {
    return list_ref(frame, 1);
}
function edge2_frame(frame) {
    return list_ref(frame, 2);
}</pre></div></div>

          
	    </LI>
	    
	    <LI>
	  <div class="snippet" id="javascript_33_23_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            '+'\n'+'function make_frame(origin, edge1, edge2) {\n    return pair(origin, pair(edge1, edge2));\n}\nfunction origin_frame(frame) {\n    return head(frame);\n}\nfunction edge1_frame(frame) {\n    return head(tail(frame));\n}\nfunction edge2_frame(frame) {\n    return tail(tail(frame));\n}'+'\n'+'\nconst my_origin = make_vect(1.0, 2.0);\nconst my_edge_1 = make_vect(3.0, 4.0);\nconst my_edge_2 = make_vect(5.0, 6.0);\nconst my_frame = make_frame(my_origin, my_edge_1, my_edge_2);\nedge2_frame(my_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_frame(origin, edge1, edge2) {
    return pair(origin, pair(edge1, edge2));
}
function origin_frame(frame) {
    return head(frame);
}
function edge1_frame(frame) {
    return head(tail(frame));
}
function edge2_frame(frame) {
    return tail(tail(frame));
}</pre></div></div>
	    </LI>

	  </OL>

	</SOLUTION></div>
</div>

	
      </EXERCISE>
</div>


      <div class="permalink">
<a name="h4" class="permalink"></a><h2>
        Painters
      </h2>
</div>

      
      <div class="permalink">
<a name="p18" class="permalink"></a><p>
        A painter is represented as a
        function
        that, given a frame
        as argument, draws a particular image shifted and scaled to fit the frame.
        That is to say, if <kbd>p</kbd> is a painter and <kbd>f</kbd> is a frame, then we
        produce <kbd>p</kbd>'s image in <kbd>f</kbd> by calling <kbd>p</kbd> with <kbd>f</kbd> as
        argument.
      </p>
</div>

      <div class="permalink">
<a name="p19" class="permalink"></a><p>
        The details of how primitive painters are implemented depend on the
        particular characteristics of the graphics system and the type of
        image to be drawn.  For instance, suppose we have a
        function

        
        <kbd>draw_line</kbd> that draws a line on the screen between two specified
        points.  Then we can create painters for line drawings, such as the
        <kbd>wave</kbd> painter in figure <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF>, from lists of line
        segments as follows:<a class="superscript" id="footnote-link-5" href="33#footnote-5">[5]</a>



        

	<div class="snippet" id="javascript_33_24_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    '+'\n'+'function segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}'+'\n'+'\nconst my_origin = make_vect(1.0, 2.0);\nconst my_edge_1 = make_vect(3.0, 4.0);\nconst my_edge_2 = make_vect(5.0, 6.0);\nconst my_frame = make_frame(my_origin, my_edge_1, my_edge_2);\n\nconst my_start_1 = make_vect(0.0, 1.0);\nconst my_end_1 = make_vect(1.0, 1.0);\nconst my_segment_1 = make_segment(my_start_1, my_end_1);	      \n\nconst my_start_2 = make_vect(0.0, 2.0);\nconst my_end_2 = make_vect(2.0, 2.0);\nconst my_segment_2 = make_segment(my_start_2, my_end_2);	      \n\nconst my_painter = segments_to_painter(\n                       list(my_segment_1, my_segment_2));\n\nmy_painter(my_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function segments_to_painter(segment_list) {
    return frame =&gt; 
               for_each(segment =&gt; 
                            draw_line(frame_coord_map(frame)
                                      (start_segment(segment)), 
                                      frame_coord_map(frame)
                                      (end_segment(segment))), 
                        segment_list);
}</pre></div></div>

	
	
      </p>
</div>

      <div class="permalink">
<a name="p20" class="permalink"></a><p>
        The segments are given using coordinates with respect to the unit
        square.  For each segment in the list, the painter transforms the
        segment endpoints with the frame coordinate map and draws a line
        between the transformed points.
      </p>
</div>

      <div class="permalink">
<a name="p21" class="permalink"></a><p>
        Representing painters as
        functions
        erects a powerful abstraction
        barrier in the picture language.  We can create and intermix
        all sorts of primitive painters, based on a variety of graphics
        capabilities. The details of their implementation do not matter.  Any
        function
        can serve as a painter, provided that it takes a frame as
        argument and draws something scaled to fit the
        frame.<a class="superscript" id="footnote-link-6" href="33#footnote-6">[6]</a>
      </p>
</div>

      <div class="permalink">
<a name="ex_2.48" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.48">Exercise 2.48 </a></b>
        
        A directed line segment in the
        plane can be represented as a pair of vectors—the
        vector running from the origin to the start-point of the segment, and
        the vector running from the origin to the end-point of the segment.
        Use your vector representation from exercise <REF NAME="ex:vectors"><a class="superscript" id="2.2.4-ex-link-2.46" href="33#ex_2.46">2.46</a></REF> to
        define a representation for segments with a constructor
        
        <kbd>make_segment</kbd> and selectors
        
        <kbd>start_segment</kbd> and
        
        <kbd>end_segment</kbd>.
        
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_5_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_5_div"><SOLUTION>
    <div class="snippet" id="javascript_33_25_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            '+'\n'+'function make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}'+'\n'+'\nconst my_start = make_vect(0.0, 1.0);\nconst my_end = make_vect(1.0, 1.0);\nconst my_segment = make_segment(my_start, my_end);\n\nmy_segment;\n      '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_segment(v_start, v_end) {
    return pair(v_start, v_end);
}
function start_segment(v) {
    return head(v);
}
function end_segment(v) {
    return tail(v);
}</pre></div></div>

    
    
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.49" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.49">Exercise 2.49 </a></b>
        Use
	
	  
	  <kbd>segments_to_painter</kbd>
	   to define the following primitive painters:

        <OL>
          <LI>
            The painter that draws the outline of the designated frame.
          </LI>

          <LI>
            The painter that draws an <QUOTE>X</QUOTE> by connecting opposite corners of
            the frame.
          </LI>

          <LI>
            The painter that draws a diamond shape by connecting the midpoints of
            the sides of the frame.
          </LI>

	  
        </OL>
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_6_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_6_div"><SOLUTION>
	          <OL>
          <LI>
            The painter that draws the outline of the designated frame.

	
	    
	<div class="snippet" id="javascript_33_26_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'const outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));'+'\n'+'\noutline_painter(unit_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const outline_start_1 = make_vect(0.0, 0.0);
const outline_end_1 = make_vect(1.0, 0.0);
const outline_segment_1 = make_segment(outline_start_1, 
                                       outline_end_1);
const outline_start_2 = make_vect(1.0, 0.0);
const outline_end_2 = make_vect(1.0, 1.0);
const outline_segment_2 = make_segment(outline_start_2, 
                                       outline_end_2);
const outline_start_3 = make_vect(1.0, 1.0);
const outline_end_3 = make_vect(0.0, 1.0);
const outline_segment_3 = make_segment(outline_start_3, 
                                       outline_end_3);
const outline_start_4 = make_vect(0.0, 1.0);
const outline_end_4 = make_vect(0.0, 0.0);
const outline_segment_4 = make_segment(outline_start_4, 
                                       outline_end_4);
const outline_painter = segments_to_painter(
                              list(outline_segment_1, 
                                   outline_segment_2,
				   outline_segment_3,
				   outline_segment_4));</pre></div></div>

	
          </LI>

          <LI>
            The painter that draws an <QUOTE>X</QUOTE> by connecting opposite corners of
            the frame.

	<div class="snippet" id="javascript_33_27_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'const x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));'+'\n'+'\nx_painter(unit_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const x_start_1 = make_vect(0.0, 0.0);
const x_end_1 = make_vect(1.0, 1.0);
const x_segment_1 = make_segment(x_start_1, 
                                 x_end_1);
const x_start_2 = make_vect(1.0, 0.0);
const x_end_2 = make_vect(0.0, 1.0);
const x_segment_2 = make_segment(x_start_2, 
                                 x_end_2);
const x_painter = segments_to_painter(
                              list(x_segment_1, 
                                   x_segment_2));</pre></div></div>

	

	    
          </LI>

          <LI>
            The painter that draws a diamond shape by connecting the midpoints of
            the sides of the frame.

	<div class="snippet" id="javascript_33_28_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'const diamond_start_1 = make_vect(0.5, 0.0);\nconst diamond_end_1 = make_vect(1.0, 0.5);\nconst diamond_segment_1 = make_segment(diamond_start_1, \n                                       diamond_end_1);\nconst diamond_start_2 = make_vect(1.0, 0.5);\nconst diamond_end_2 = make_vect(0.5, 1.0);\nconst diamond_segment_2 = make_segment(diamond_start_2, \n                                       diamond_end_2);\nconst diamond_start_3 = make_vect(0.5, 1.0);\nconst diamond_end_3 = make_vect(0.0, 0.5);\nconst diamond_segment_3 = make_segment(diamond_start_3, \n                                       diamond_end_3);\nconst diamond_start_4 = make_vect(0.0, 0.5);\nconst diamond_end_4 = make_vect(0.5, 0.0);\nconst diamond_segment_4 = make_segment(diamond_start_4, \n                                       diamond_end_4);\nconst diamond_painter = segments_to_painter(\n                              list(diamond_segment_1, \n                                   diamond_segment_2,\n				   diamond_segment_3,\n				   diamond_segment_4));'+'\n'+'\ndiamond_painter(unit_frame);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const diamond_start_1 = make_vect(0.5, 0.0);
const diamond_end_1 = make_vect(1.0, 0.5);
const diamond_segment_1 = make_segment(diamond_start_1, 
                                       diamond_end_1);
const diamond_start_2 = make_vect(1.0, 0.5);
const diamond_end_2 = make_vect(0.5, 1.0);
const diamond_segment_2 = make_segment(diamond_start_2, 
                                       diamond_end_2);
const diamond_start_3 = make_vect(0.5, 1.0);
const diamond_end_3 = make_vect(0.0, 0.5);
const diamond_segment_3 = make_segment(diamond_start_3, 
                                       diamond_end_3);
const diamond_start_4 = make_vect(0.0, 0.5);
const diamond_end_4 = make_vect(0.5, 0.0);
const diamond_segment_4 = make_segment(diamond_start_4, 
                                       diamond_end_4);
const diamond_painter = segments_to_painter(
                              list(diamond_segment_1, 
                                   diamond_segment_2,
				   diamond_segment_3,
				   diamond_segment_4));</pre></div></div>

	
 	    
	    
          </LI>
		  </OL>
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="h5" class="permalink"></a><h2>
        Transforming and combining painters
      </h2>
</div>

      

      <div class="permalink">
<a name="p22" class="permalink"></a><p>
        An operation on painters (such as <kbd>flip_vert</kbd> or <kbd>beside</kbd>)
        works by creating a painter that invokes the original painters
        with respect to frames derived from the argument frame.
        Thus, for example, <kbd>flip_vert</kbd> doesn't have to know how a painter
        works in order to flip it—it just has to know how to turn a frame
        upside down:
        The flipped painter just uses the original painter, 
        but in the inverted frame.
      </p>
</div>

      <div class="permalink">
<a name="p23" class="permalink"></a><p>
        Painter operations are based on the
        function
        <kbd>transform_painter</kbd>, which takes as arguments a painter and
        information on how to transform a frame and
        produces a new painter.  The transformed painter, when called on a frame, 
        transforms the frame and
        calls the original painter on the transformed frame.
        The arguments to <kbd>transform_painter</kbd> are points (represented as vectors)
        that specify the corners of the new frame:
        When mapped into
        the frame,<a class="superscript" id="footnote-link-7" href="33#footnote-7">[7]</a> the first point specifies the new frame's origin
        and the other two specify the ends of its edge vectors.
        Thus, arguments within the
        unit square specify a frame contained within the original frame.

        <div class="snippet" id="javascript_33_29_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));\n	    \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction flip_vert(painter) {\n    return transform_painter(painter, \n                make_vect(0.0, 1.0),  // new origin\n                make_vect(1.0, 1.0),  // new end of edge1\n                make_vect(0.0, 0.0)); // new end of edge2\n}\n        '+'\n'+'function transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}'+'\n'+'\nconst flipped_outline_painter =\n          flip_vert(outline_painter);\n\nflipped_outline_painter(unit_frame);	  \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function transform_painter(painter, origin,
                           corner1, corner2) {
    return frame =&gt; {
             const m = frame_coord_map(frame);
             const new_origin = m(origin);
             return painter(make_frame(
                              new_origin, 
                              sub_vect(m(corner1), 
                                       new_origin), 
                              sub_vect(m(corner2), 
                                       new_origin)));
           };
}</pre></div></div>

        Here's how to flip painter images vertically:
        <div class="snippet" id="javascript_33_30_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));\n	    \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'function flip_vert(painter) {\n    return transform_painter(painter, \n                make_vect(0.0, 1.0),  // new origin\n                make_vect(1.0, 1.0),  // new end of edge1\n                make_vect(0.0, 0.0)); // new end of edge2\n}'+'\n'+'\nconst flipped_outline_painter =\n          flip_vert(outline_painter);\n\nflipped_outline_painter(unit_frame);	  \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function flip_vert(painter) {
    return transform_painter(painter, 
                make_vect(0.0, 1.0),  // new origin
                make_vect(1.0, 1.0),  // new end of edge1
                make_vect(0.0, 0.0)); // new end of edge2
}</pre></div></div>

        
      </p>
</div>

      <div class="permalink">
<a name="p24" class="permalink"></a><p>
        Using <kbd>transform_painter</kbd>, we can easily define new transformations.
        For example, we can define a painter that shrinks its image to the
        upper-right quarter of the frame it is given:
        <div class="snippet" id="javascript_33_31_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));\n	    \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'function shrink_to_upper_right(painter) {\n    return transform_painter(painter, \n                             make_vect(0.5, 0.5), \n                             make_vect(1.0, 0.5), \n                             make_vect(0.5, 1.0));\n}'+'\n'+'\nconst shrunk_outline_painter =\n          shrink_to_upper_right(outline_painter);\n\nshrunk_outline_painter(unit_frame);	  \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function shrink_to_upper_right(painter) {
    return transform_painter(painter, 
                             make_vect(0.5, 0.5), 
                             make_vect(1.0, 0.5), 
                             make_vect(0.5, 1.0));
}</pre></div></div>

        
      </p>
</div>


      <div class="permalink">
<a name="p25" class="permalink"></a><p>
        Other transformations rotate images counterclockwise by 90 degrees<a class="superscript" id="footnote-link-8" href="33#footnote-8">[8]</a>

        <div class="snippet" id="javascript_33_32_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));\n	    \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'function rotate90(painter) {\n    return transform_painter(painter, \n                             make_vect(1.0, 0.0), \n                             make_vect(1.0, 1.0), \n                             make_vect(0.0, 0.0));\n}'+'\n'+'\nconst rotated_outline_painter =\n          rotate90(outline_painter);\n\nrotated_outline_painter(unit_frame);	  \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function rotate90(painter) {
    return transform_painter(painter, 
                             make_vect(1.0, 0.0), 
                             make_vect(1.0, 1.0), 
                             make_vect(0.0, 0.0));
}</pre></div></div>
        
	
        or squash images towards the center of the frame:<a class="superscript" id="footnote-link-9" href="33#footnote-9">[9]</a>

        <div class="snippet" id="javascript_33_33_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst outline_start_1 = make_vect(0.0, 0.0);\nconst outline_end_1 = make_vect(1.0, 0.0);\nconst outline_segment_1 = make_segment(outline_start_1, \n                                       outline_end_1);\nconst outline_start_2 = make_vect(1.0, 0.0);\nconst outline_end_2 = make_vect(1.0, 1.0);\nconst outline_segment_2 = make_segment(outline_start_2, \n                                       outline_end_2);\nconst outline_start_3 = make_vect(1.0, 1.0);\nconst outline_end_3 = make_vect(0.0, 1.0);\nconst outline_segment_3 = make_segment(outline_start_3, \n                                       outline_end_3);\nconst outline_start_4 = make_vect(0.0, 1.0);\nconst outline_end_4 = make_vect(0.0, 0.0);\nconst outline_segment_4 = make_segment(outline_start_4, \n                                       outline_end_4);\nconst outline_painter = segments_to_painter(\n                              list(outline_segment_1, \n                                   outline_segment_2,\n				   outline_segment_3,\n				   outline_segment_4));\n	    \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    '+'\n'+'function squash_inwards(painter) {\n    return transform_painter(painter, \n                             make_vect(0.0, 0.0), \n                             make_vect(0.65, 0.35), \n                             make_vect(0.35, 0.65));\n}'+'\n'+'\nconst squashed_outline_painter =\n          squash_inwards(outline_painter);\n\nsquashed_outline_painter(unit_frame);	  \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function squash_inwards(painter) {
    return transform_painter(painter, 
                             make_vect(0.0, 0.0), 
                             make_vect(0.65, 0.35), 
                             make_vect(0.35, 0.65));
}</pre></div></div>

        

      </p>
</div>

      <div class="permalink">
<a name="p26" class="permalink"></a><p>
        Frame transformation is also the key to
        defining means of combining two or more painters.
        The <kbd>beside</kbd>
        function, 
        for example, takes two painters, transforms them
        to paint in the left and right halves of an argument frame respectively, 
        and produces a new, compound painter.
        When the compound painter is given a frame, it
        calls the first transformed painter to paint in the left half of
        the frame and calls the second transformed painter to paint in the
        right half of the frame:
        <div class="snippet" id="javascript_33_34_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function beside(painter1, painter2) {\n    const split_point = make_vect(0.5, 0.0);\n    const paint_left = transform_painter(painter1, \n                            make_vect(0.0, 0.0), \n                            split_point, \n                            make_vect(0.0, 1.0));\n    const paint_right = transform_painter(painter2, \n                            split_point, \n                            make_vect(1.0, 0.0), \n                            make_vect(0.5, 1.0));\n    return frame =&gt; {\n               paint_left(frame);\n               paint_right(frame);\n           };\n}'+'\n'+'\nbeside(x_painter, x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function beside(painter1, painter2) {
    const split_point = make_vect(0.5, 0.0);
    const paint_left = transform_painter(painter1, 
                            make_vect(0.0, 0.0), 
                            split_point, 
                            make_vect(0.0, 1.0));
    const paint_right = transform_painter(painter2, 
                            split_point, 
                            make_vect(1.0, 0.0), 
                            make_vect(0.5, 1.0));
    return frame =&gt; {
               paint_left(frame);
               paint_right(frame);
           };
}</pre></div></div>

        
	
      </p>
</div>

      <div class="permalink">
<a name="p27" class="permalink"></a><p>
        Observe how the painter data abstraction, and in particular the
        representation of painters as
        functions, makes <kbd>beside</kbd> easy to
        implement.  The <kbd>beside</kbd>
        function
        need not know anything
        about the details of the component painters other than that each
        painter will draw something in its designated frame.
      </p>
</div>

      <div class="permalink">
<a name="ex_2.50" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.50">Exercise 2.50 </a></b>
        Define the transformation
        
        <kbd>flip_horiz</kbd>, which flips
        painters horizontally, and transformations that rotate
        painters counterclockwise by 180 degrees and 270 degrees.
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_7_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_7_div"><SOLUTION>
	  <OL>
	    <LI>
	      The transformation 
              
	      <kbd>flip_horiz</kbd>
	      :
        <div class="snippet" id="javascript_33_35_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function flip_horiz(painter) {\n    return transform_painter(painter, \n               make_vect(1.0, 0.0),  // new origin\n               make_vect(0.0, 0.0),  // new end of edge1\n               make_vect(1.0, 1.0)); // new end of edge2\n}'+'\n'+'\nflip_horiz(x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function flip_horiz(painter) {
    return transform_painter(painter, 
               make_vect(1.0, 0.0),  // new origin
               make_vect(0.0, 0.0),  // new end of edge1
               make_vect(1.0, 1.0)); // new end of edge2
}</pre></div></div>

        
	    </LI>

	    <LI>
	      The transformation 
              
	      <kbd>rotate180</kbd>
	      :
        <div class="snippet" id="javascript_33_36_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function rotate180(painter) {\n    return transform_painter(\n               painter, \n               make_vect(1.0, 1.0),  // new origin\n               make_vect(0.0, 1.0),  // new end of edge1\n               make_vect(1.0, 0.0)); // new end of edge2\n}'+'\n'+'\nrotate180(x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function rotate180(painter) {
    return transform_painter(
               painter, 
               make_vect(1.0, 1.0),  // new origin
               make_vect(0.0, 1.0),  // new end of edge1
               make_vect(1.0, 0.0)); // new end of edge2
}</pre></div></div>

        
	    </LI>


	    <LI>
	      The transformation 
              
	      <kbd>rotate270</kbd>
	      :
        <div class="snippet" id="javascript_33_37_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function rotate270(painter) {\n    return transform_painter(\n               painter, \n               make_vect(0.0, 1.0),  // new origin\n               make_vect(0.0, 0.0),  // new end of edge1\n               make_vect(1.0, 0.0)); // new end of edge2\n}'+'\n'+'\nrotate270(x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function rotate270(painter) {
    return transform_painter(
               painter, 
               make_vect(0.0, 1.0),  // new origin
               make_vect(0.0, 0.0),  // new end of edge1
               make_vect(1.0, 0.0)); // new end of edge2
}</pre></div></div>

        
	    </LI>
	    
	  </OL>
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.51" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.51">Exercise 2.51 </a></b>
        Define the
        
        <kbd>stack</kbd> operation for painters.  The function <kbd>stack</kbd> takes two
        painters as arguments.  The resulting painter, given a frame, 
        draws with the first painter in the
        bottom of the frame and with the second painter in the top.  Define <kbd>stack</kbd> in two different ways—first by writing a
        function
        that is
        analogous to the <kbd>beside</kbd>
        function
        given above, and
        again in terms of <kbd>beside</kbd> and suitable
        rotation operations (from exercise <REF NAME="ex:rotate"><a class="superscript" id="2.2.4-ex-link-2.50" href="33#ex_2.50">2.50</a></REF>).
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_8_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_8_div"><SOLUTION>

	  <OL>
	    <LI>
	    First the direct method:
        <div class="snippet" id="javascript_33_38_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function stack(painter1, painter2) {\n    const split_point = make_vect(0.0, 0.5);\n    const paint_upper =\n        transform_painter(painter1, \n                          split_point, \n                          make_vect(1.0, 0.5), \n                          make_vect(0.0, 1.0));\n    const paint_lower =\n        transform_painter(painter2, \n                          make_vect(0.0, 0.0), \n                          make_vect(1.0, 0.0), \n                          split_point);\n    return frame =&gt; {\n               paint_upper(frame);\n               paint_lower(frame);\n           };\n}'+'\n'+'\nstack(x_painter, x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function stack(painter1, painter2) {
    const split_point = make_vect(0.0, 0.5);
    const paint_upper =
        transform_painter(painter1, 
                          split_point, 
                          make_vect(1.0, 0.5), 
                          make_vect(0.0, 1.0));
    const paint_lower =
        transform_painter(painter2, 
                          make_vect(0.0, 0.0), 
                          make_vect(1.0, 0.0), 
                          split_point);
    return frame =&gt; {
               paint_upper(frame);
               paint_lower(frame);
           };
}</pre></div></div>

        
	
	  </LI>

	    <LI>
	    Now the version with rotation and <kbd>beside</kbd>:
        <div class="snippet" id="javascript_33_39_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_vect(x, y) {\n    return pair(x, y);\n}\nfunction xcor_vect(vector) {\n    return head(vector);\n}\nfunction ycor_vect(vector) {\n    return tail(vector);\n}\nfunction scale_vect(factor, vector) {\n    return make_vect(factor * xcor_vect(vector), \n                     factor * ycor_vect(vector));\n}\nfunction add_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     + xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     + ycor_vect(vector2));\n}\nfunction sub_vect(vector1, vector2) {\n    return make_vect(xcor_vect(vector1)  \n                     - xcor_vect(vector2), \n                     ycor_vect(vector1)  \n                     - ycor_vect(vector2));\n}\n            \nfunction make_frame(origin, edge1, edge2) {\n    return list(origin, edge1, edge2);\n}\nfunction origin_frame(frame) {\n    return list_ref(frame, 0);\n}\nfunction edge1_frame(frame) {\n    return list_ref(frame, 1);\n}\nfunction edge2_frame(frame) {\n    return list_ref(frame, 2);\n}\n            \nfunction frame_coord_map(frame) {\n    return v =&gt; add_vect(origin_frame(frame), \n                         add_vect(scale_vect(xcor_vect(v), \n                                             edge1_frame(frame)), \n                                  scale_vect(ycor_vect(v), \n                                             edge2_frame(frame))));\n}\n          \nfunction transform_painter(painter, origin,\n                           corner1, corner2) {\n    return frame =&gt; {\n             const m = frame_coord_map(frame);\n             const new_origin = m(origin);\n             return painter(make_frame(\n                              new_origin, \n                              sub_vect(m(corner1), \n                                       new_origin), \n                              sub_vect(m(corner2), \n                                       new_origin)));\n           };\n}\n          \nfunction beside(painter1, painter2) {\n    const split_point = make_vect(0.5, 0.0);\n    const paint_left = transform_painter(painter1, \n                            make_vect(0.0, 0.0), \n                            split_point, \n                            make_vect(0.0, 1.0));\n    const paint_right = transform_painter(painter2, \n                            split_point, \n                            make_vect(1.0, 0.0), \n                            make_vect(0.5, 1.0));\n    return frame =&gt; {\n               paint_left(frame);\n               paint_right(frame);\n           };\n}\n          \nfunction rotate90(painter) {\n    return transform_painter(painter, \n                             make_vect(1.0, 0.0), \n                             make_vect(1.0, 1.0), \n                             make_vect(0.0, 0.0));\n}\n          \nfunction rotate270(painter) {\n    return transform_painter(\n               painter, \n               make_vect(0.0, 1.0),  // new origin\n               make_vect(0.0, 0.0),  // new end of edge1\n               make_vect(1.0, 0.0)); // new end of edge2\n}\n        \nconst unit_origin = make_vect(0.0, 0.0);\nconst unit_edge_1 = make_vect(1.0, 0.0);\nconst unit_edge_2 = make_vect(0.0, 1.0);\nconst unit_frame = make_frame(unit_origin, \n                              unit_edge_1,\n                              unit_edge_2);\n	    \nfunction make_segment(v_start, v_end) {\n    return pair(v_start, v_end);\n}\nfunction start_segment(v) {\n    return head(v);\n}\nfunction end_segment(v) {\n    return tail(v);\n}\n    \n// &quot;drawing a line&quot; here simulated\n// by printing the coordinates of\n// the start and end of the line\nfunction draw_line(v_start, v_end) {\n    display(&quot;line starting at&quot;);\n    display(v_start);\n    display(&quot;line ending at&quot;);\n    display(v_end);\n}\n	    \nfunction segments_to_painter(segment_list) {\n    return frame =&gt; \n               for_each(segment =&gt; \n                            draw_line(frame_coord_map(frame)\n                                      (start_segment(segment)), \n                                      frame_coord_map(frame)\n                                      (end_segment(segment))), \n                        segment_list);\n}\n        \nconst x_start_1 = make_vect(0.0, 0.0);\nconst x_end_1 = make_vect(1.0, 1.0);\nconst x_segment_1 = make_segment(x_start_1, \n                                 x_end_1);\nconst x_start_2 = make_vect(1.0, 0.0);\nconst x_end_2 = make_vect(0.0, 1.0);\nconst x_segment_2 = make_segment(x_start_2, \n                                 x_end_2);\nconst x_painter = segments_to_painter(\n                              list(x_segment_1, \n                                   x_segment_2));\n	    \nx_painter(unit_frame);\n	    '+'\n'+'function stack(painter1, painter2) {\n    return rotate270(beside(rotate90(painter1),\n                            rotate90(painter2)));\n}'+'\n'+'\nstack(x_painter, x_painter)(unit_frame);	    \n	  '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function stack(painter1, painter2) {
    return rotate270(beside(rotate90(painter1),
                            rotate90(painter2)));
}</pre></div></div>

	  </LI>

	  
	  </OL>
	</SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="h6" class="permalink"></a><h2>
        Levels of language for robust design
      </h2>
</div>

      <div class="permalink">
<a name="p28" class="permalink"></a><p>
      The picture language exercises some of the critical ideas
      we've introduced about abstraction with
      functions
      and data.  The
      fundamental data abstractions, painters, are implemented using
        
          
          
            functional
          
        
      representations, which enables the language to
      handle different basic drawing capabilities in a uniform way.  The
      means of combination satisfy the closure property, which permits us to
      easily build up complex designs.  Finally, all the tools for
      abstracting
      functions
      are available to us for abstracting means of
      combination for painters.
      </p>
</div>

      <div class="permalink">
<a name="p29" class="permalink"></a><p>
      We have also obtained a glimpse of another crucial idea about
      languages and program design.  This is the approach of
      
      
      <EM>stratified
        design</EM>, the notion that a complex system should be structured as a
      sequence of levels that are described using a sequence of languages.
      Each level is constructed by combining parts that are regarded as
      primitive at that level, and the parts constructed at each level are
      used as primitives at the next level.  The language used at each level
      of a stratified design has primitives, means of combination, and means
      of abstraction appropriate to that level of detail.
      </p>
</div>

      <div class="permalink">
<a name="p30" class="permalink"></a><p>
      Stratified design pervades the engineering of complex systems.  For
      example, in computer engineering, resistors and transistors are
      combined (and described using a language of analog circuits) to
      produce parts such as and-gates and or-gates, which form the
      primitives of a language for digital-circuit design.<a class="superscript" id="footnote-link-10" href="33#footnote-10">[10]</a>
      These parts are combined to build
      processors, bus structures, and memory systems, which are in turn
      combined to form computers, using languages appropriate to computer
      architecture.  Computers are combined to form distributed systems,
      using languages appropriate for describing network interconnections,
      and so on.
      </p>
</div>

      <div class="permalink">
<a name="p31" class="permalink"></a><p>
      As a tiny example of stratification, our picture language uses
      primitive elements (primitive painters) that 
      specify points and lines to provide the
      shapes of a painter like <kbd>heart</kbd>.
      The bulk of our
      description of the picture language focused on combining these
      primitives, using geometric combiners such as <kbd>beside</kbd> and <kbd>stack</kbd>.  We also worked at a higher level, regarding <kbd>beside</kbd> and
      <kbd>stack</kbd> as primitives to be manipulated in a language whose
      operations, such as <kbd>square_of_four</kbd>, capture common patterns of
      combining geometric combiners.
      </p>
</div>

      <div class="permalink">
<a name="p32" class="permalink"></a><p>
      
      Stratified design helps make programs <EM>robust</EM>, that is, it makes
      it likely that small changes in a specification will require
      correspondingly small changes in the program.  For instance, suppose
      we wanted to change the image based on <kbd>heart</kbd> shown in
      Figure <REF NAME="fig:sqlimit-designs"><a class="superscript" id="2.2.4-fig-link-2.9" href="33#fig_2.9">2.9</a></REF>.  We could work at the lowest level
      to change the detailed appearance of the <kbd>heart</kbd> element; we could
      work at the middle level to change the way <kbd>corner_split</kbd>
      replicates the <kbd>wave</kbd>; we could work at the highest level to
      change how <kbd>square_limit</kbd> arranges the four copies of the corner.
      In general, each level of a stratified design provides a different
      vocabulary for expressing the characteristics of the system, and a
      different kind of ability to change it.
      </p>
</div>

      <div class="permalink">
<a name="ex_2.52" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.52">Exercise 2.52 </a></b>
        Make changes to the square limit of <kbd>heart</kbd> shown in
        Figure <REF NAME="fig:sqlimit-designs"><a class="superscript" id="2.2.4-fig-link-2.9" href="33#fig_2.9">2.9</a></REF> by working at each of the levels
        described above.  In particular:

        <OL>
	  
          <LI>
            Change the pattern constructed by <kbd>corner_split</kbd>
            (for example, by using only one copy of the
            <kbd>up_split</kbd> and <kbd>right_split</kbd> images instead of two).
          </LI>
          <LI>
            Modify the version of <kbd>square_limit</kbd> that uses
            <kbd>square_of_four</kbd>
            so as to assemble the corners in a different pattern.
	    
          </LI>
        </OL>

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_33_9_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_33_9_div"><SOLUTION>

        <div class="snippet" id="javascript_33_40_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square_of_four(tl, tr, bl, br) {\n    return painter =&gt; stack(beside(tl(painter), tr(painter)),\n                            beside(bl(painter), br(painter)));\n}\n          \nfunction identity(x) {\n    return x;\n}\n          \nfunction right_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = right_split(painter, n - 1);\n        return beside(painter, stack(smaller, smaller));\n    }\n}\n          \nfunction up_split(painter, n) {\n    if (n === 0) {\n        return painter;\n    } else {\n        const smaller = up_split(painter, n - 1);\n        return stack(beside(smaller, smaller), painter);\n    }\n}\n\nfunction corner_split(painter, n) {\n    if (n === 0) {\n       return painter;\n    } else {\n       const up = up_split(painter, n - 1);\n       const right = right_split(painter, n - 1);\n       const top_left = beside(up, up);\n       const bottom_right = stack(right, right);\n       const corner = corner_split(painter, n - 1);\n       return stack(beside(top_left, corner),\n                    beside(painter, bottom_right));\n    }\n}\n        \nfunction square_limit(painter, n) {\n    const combine4 = square_of_four(flip_horiz, identity, \n                                    turn_upside_down, flip_vert);\n    return combine4(corner_split(painter, n));\n}\n        '+'\n'+'// Click here to play with any abstraction\n// used for square_limit'+'\n'+'\nshow(square_limit(heart, 4));\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">// Click here to play with any abstraction
// used for square_limit</pre></div></div>
	  
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>
      

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="33#footnote-link-1">[1] </a><FOOTNOTE>The picture language is based on the language
          
          Peter Henderson created to construct
          images like
          
          M.C. Escher's <QUOTE>Square Limit</QUOTE> woodcut (see <CITATION>Henderson 1982</CITATION>).
          The woodcut incorporates a
          repeated scaled pattern, similar to the arrangements drawn using
          the <kbd>square_limit</kbd>
          function
          in this section.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-2" href="33#footnote-link-2">[2] </a><FOOTNOTE>Equivalently, we could
          write
          <div class="snippet" id="javascript_33_41_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction square_of_four(tl, tr, bl, br) {\n    return painter =&gt; stack(beside(tl(painter), tr(painter)),\n                            beside(bl(painter), br(painter)));\n}\n          \nfunction identity(x) {\n    return x;\n}\n          '+'\n'+'const flipped_pairs =\n    square_of_four(turn_upside_down, flip_vert, \n                   flip_horiz, identity);'+'\n'+'\nshow(flipped_pairs(heart));\n          '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;ext=RUNES&amp;prgrm='+compressed; window.open(url); ">const flipped_pairs =
    square_of_four(turn_upside_down, flip_vert, 
                   flip_horiz, identity);</pre></div></div>
        </FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-3" href="33#footnote-link-3">[3] </a><FOOTNOTE>The function <kbd>turn_upside_down</kbd>
          rotates a painter by 180 degrees.
          Instead of <kbd>turn_upside_down</kbd> we could say <kbd>compose(flip_vert, flip_horiz)</kbd>, using
          the <kbd>compose</kbd>
          function
          from exercise <REF NAME="ex:compose"><a class="superscript" id="2.2.4-ex-link-1.42" href="22#ex_1.42">1.42</a></REF>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-4" href="33#footnote-link-4">[4] </a><FOOTNOTE>The function <kbd>frame_coord_map</kbd> uses
          the vector operations described in exercise <REF NAME="ex:vectors"><a class="superscript" id="2.2.4-ex-link-2.46" href="33#ex_2.46">2.46</a></REF> below, which we
          assume have been implemented using some representation for vectors.
          Because of data abstraction, it doesn't matter what this vector
          representation is, so long as the vector operations behave correctly.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-5" href="33#footnote-link-5">[5] </a><FOOTNOTE>The function <kbd>segments_to_painter</kbd> uses the representation for line
          segments described in exercise <REF NAME="ex:segments2"><a class="superscript" id="2.2.4-ex-link-2.48" href="33#ex_2.48">2.48</a></REF> below.
          It also uses the <kbd>for_each</kbd>
          function
          described in exercise <REF NAME="ex:for-each"><a class="superscript" id="2.2.4-ex-link-2.23" href="30#ex_2.23">2.23</a></REF>.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-6" href="33#footnote-link-6">[6] </a><FOOTNOTE>
	<SPLIT>
	  
	  
	  For example, the <kbd>heart</kbd> painter of
          figure <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF> was constructed from a
	  gray-level image.
          For each point in a given frame, 
          the <kbd>rogers</kbd> painter determines the
	  point in the image that is mapped to it
          under the frame coordinate map, and shades it
          accordingly.
	  
	</SPLIT>
	  By allowing different types of painters, we are capitalizing on the
          abstract data idea discussed in section <REF NAME="sec:data?"><a class="superscript" id="2.2.4-sec-link-2.1.3" href="27">2.1.3</a></REF>, where we
          argued that a rational-number representation could be anything at all that
          satisfies an appropriate condition.  Here we're using the fact that a
          painter can be implemented in any way at all, so long as it draws
          something in the designated frame.  Section <REF NAME="sec:data?"><a class="superscript" id="2.2.4-sec-link-2.1.3" href="27">2.1.3</a></REF> also
          showed how pairs could be implemented as
          functions.  Painters are our
          second example of a
        
          
          
            functional
          
        
          representation for data.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-7" href="33#footnote-link-7">[7] </a><FOOTNOTE>In <kbd>transform_painter</kbd>, we make use of a slight extension of the syntax of function definition expressions, compared to section <REF NAME="sec:lambda"><a class="superscript" id="2.2.4-sec-link-1.3.2" href="20">1.3.2</a></REF>: The body of a function definition can be a block, not just a single return expression. Such function definition expressions have the following shape:
              
\[ \texttt{(} \ \textit{parameters}\ \texttt{) =&gt; \{}\ \textit{statements}\ \texttt{\}} \]
	      
	</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-8" href="33#footnote-link-8">[8] </a><FOOTNOTE>The function <kbd>rotate90</kbd> is a pure rotation only for square
          frames, because it also stretches and shrinks the image to fit into
          the rotated frame.</FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-9" href="33#footnote-link-9">[9] </a><FOOTNOTE>
	<SPLIT>
	  
	  
	    The diamond-shaped images in figures <REF NAME="fig:wave"><a class="superscript" id="2.2.4-fig-link-2.10" href="33#fig_2.10">2.10</a></REF>
	    were created with
	    <kbd>squash_inwards</kbd>
	    applied to
            <kbd>heart</kbd>.
	  
	</SPLIT>
      </FOOTNOTE>
</div>
<div class="footnote">
<a class="footnote-number" id="footnote-10" href="33#footnote-link-10">[10] </a><FOOTNOTE>Section <REF NAME="sec:circuit-simulator"><a class="superscript" id="2.2.4-sec-link-3.3.4" href="61">3.3.4</a></REF> describes one such language.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="32">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="34">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        2.2.4 
        Example: A Picture Language
      
    </div>
  <script>
//<![CDATA[
var chapter_id = 33;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
