<!DOCTYPE html>
<html lang="en">
  <head>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-156801664-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-156801664-1');
</script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="2.3.4 
        Example: Huffman Encoding Trees
      " />
    <title>
         2.3.4 
        Example: Huffman Encoding Trees
      
    </title>

    <meta name="csrf-param" content="authenticity_token" />
<meta name="csrf-token" content="xBcFKo2J59VioTMTSzF9ALBDmC8XQV6n10xrMbHiwnKzfnIsScfnT1O8eRsk7t5wlsG1dgni5NZJjPw6v1ldWw==" />

    <!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    -->
    <link href="https://fonts.googleapis.com/css?family=Inconsolata&display?swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Droid+Sans|Droid+Serif" rel="stylesheet">
    <link rel="stylesheet" media="all" href="../assets/application-646697584dca3e04ba2ffbdf497816ce21a735eef61eccd54a0f8bf08a4e82e9.css" />

   <link rel="shortcut icon" type="image/x-icon" href="../assets/favicon-17dbf972938cc63d48794e3be2c66977e723014f9a9518097da971fb34202187.ico" />

<!--    <link rel="shortcut icon" type="image/png" href="/images/lambda.png" /> -->

    <!-- for support of progressive web app, see github README -->
    <link rel="manifest" href="../static/manifest.json">

    <script src="https://code.jquery.com/jquery-3.2.1.min.js" 
		     	  integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
	          crossorigin="anonymous">
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
    
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script> -->
    <script type="text/javascript" 
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/latest.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script>
   <!--  <script type="text/javascript" 
      src="../MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML-full">
    </script> -->

    <script src="../assets/application-77eef7aa2695bed514b473158fa8f35a6ae4cb10c6e0f2ae8e2b485af0611d43.js"></script>

    <!-- Rendering inline LaTeX -->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {
          inlineMath: [ ['$','$'], ["\\(","\\)"] ],
          processEscapes: true,
          jax: ["input/TeX","output/HTML-CSS"]
        }
      });
    </script>
    <!--<script src="/mathjax/MathJax.js?config=TeX-AMS_HTML-full.js" type="text/javascript"></script>-->
    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js" type="text/javascript"></script>
    <![endif]-->
  </head>
  <body>

    
    <!-- support for progressive web app, see README -->
    <script>
      if ('serviceWorker' in navigator && !navigator.serviceWorker.controller) {
          navigator.serviceWorker.register("/sw.js").then(function(reg) {
              console.log("Service worker has been registered for scope: " + reg.scope);
          });
      }
    </script>

     <nav class="navbar navbar-expand-sm navbar-dark bg-dark fixed-top justify-content-between">
       <button id="btn" class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#nav-sidebar" aria-controls="nav-sidebar" aria-expanded="false" aria-label="Toggle navigation" title="navigation">
         <span class="navbar-toggler-icon"></span>
       </button>
       <span class="navbar-brand-short"><a title="Go back to front page" href="../index.html" class="gray">SICP &mdash; JS</a></span>
       <span class="navbar-brand-long" ><a title="Go back to front page" href="../index.html" class="gray">Structure and Interpretation
            of Computer Programs &mdash; JavaScript Adaptation</a></span>

       <!-- edit the search engine by visiting: 
	    https://cse.google.com/cse/setup/basic?cx=015760785273492757659:nc_tznrzlsg 
	       -->
       <form class="form-inline ml-auto" id="xxx">
         <div id="search-box">
	         <script>
	           (function() {
	               var cx = "015760785273492757659:nc_tznrzlsg";
	               var gcse = document.createElement("script");
	               gcse.type = "text/javascript";
	               gcse.async = true;
	               gcse.src = "https://cse.google.com/cse.js?cx=" + cx;
	               var s = document.getElementsByTagName("script")[0];
	               s.parentNode.insertBefore(gcse, s);
	           })();
	           window.onload = function()
	           { 
	               var searchBox =  document.getElementById("gsc-i-id1");
	               searchBox.placeholder="search web edition";
	               searchBox.title="search web edition"; 
	           }
	         </script>
	         <gcse:search></gcse:search>
         </div>
       </form>
       <span class="navbar-brand-short">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">S</a>
       </span>
       <span class="navbar-brand-long">
         &nbsp;
         &nbsp;
         <a href="https://sicp.comp.nus.edu.sg/source/" title="Go to the Source language(s) definition(s)" class="gray">Source</a>
       </span>
     </nav>
     
     <div class="container scroll">

       <div class="collapse" id="nav-sidebar" role="tablist" aria-multiselectable="true">
	 <!-- insert a dummy entry, to give one extra line of space -->
         <a class="navbar-brand" href="index.html">&nbsp;</a>
                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-122">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-122" aria-expanded="false" aria-controls="sidebar-collapse-122">
                    <a href="122">        Foreword    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-123">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-123" aria-expanded="false" aria-controls="sidebar-collapse-123">
                    <a href="123">        Prefaces    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-124">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-124" aria-expanded="false" aria-controls="sidebar-collapse-124">
                    <a href="124">Acknowledgments    </a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-1">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-1" aria-expanded="true" aria-controls="sidebar-collapse-1">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="1">1        Building Abstractions with       Functions    </a>
                </h5>
              </div>
              <div id="sidebar-collapse-1" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-2">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-2" aria-expanded="true" aria-controls="sidebar-collapse-2">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="2">1.1  The Elements of Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-2" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-3">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-3" aria-expanded="false" aria-controls="sidebar-collapse-3">
                    <a href="3">1.1.1  Expressions</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-4">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-4" aria-expanded="false" aria-controls="sidebar-collapse-4">
                    <a href="4">1.1.2  Naming and the Environment</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-5">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-5" aria-expanded="false" aria-controls="sidebar-collapse-5">
                    <a href="5">1.1.3            Evaluating          Operator Combinations        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-6">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-6" aria-expanded="false" aria-controls="sidebar-collapse-6">
                    <a href="6">1.1.4            Functions        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-7">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-7" aria-expanded="false" aria-controls="sidebar-collapse-7">
                    <a href="7">1.1.5            The Substitution Model for                                                 Function                              Application        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-8">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-8" aria-expanded="false" aria-controls="sidebar-collapse-8">
                    <a href="8">1.1.6            Conditional Expressions and Predicates        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-9">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-9" aria-expanded="false" aria-controls="sidebar-collapse-9">
                    <a href="9">1.1.7  Example: Square Roots by Newtons Method</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-10">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-10" aria-expanded="false" aria-controls="sidebar-collapse-10">
                    <a href="10">1.1.8                                                  Functions                                as Black-Box Abstractions        </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-11">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-11" aria-expanded="true" aria-controls="sidebar-collapse-11">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="11">1.2              Functions            and the Processes They Generate      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-11" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-12">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-12" aria-expanded="false" aria-controls="sidebar-collapse-12">
                    <a href="12">1.2.1  Linear Recursion and Iteration</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-13">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-13" aria-expanded="false" aria-controls="sidebar-collapse-13">
                    <a href="13">1.2.2  Tree Recursion</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-14">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-14" aria-expanded="false" aria-controls="sidebar-collapse-14">
                    <a href="14">1.2.3  Orders of Growth</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-15">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-15" aria-expanded="false" aria-controls="sidebar-collapse-15">
                    <a href="15">1.2.4  Exponentiation</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-16">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-16" aria-expanded="false" aria-controls="sidebar-collapse-16">
                    <a href="16">1.2.5  Greatest Common Divisors</a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-17">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-17" aria-expanded="false" aria-controls="sidebar-collapse-17">
                    <a href="17">1.2.6  Example: Testing for Primality</a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-18">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-18" aria-expanded="true" aria-controls="sidebar-collapse-18">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="18">1.3          Formulating Abstractions with Higher-Order         Functions      </a>
                </h5>
              </div>
              <div id="sidebar-collapse-18" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-19">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-19" aria-expanded="false" aria-controls="sidebar-collapse-19">
                    <a href="19">1.3.1            Functions          as Arguments        </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-20">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-20" aria-expanded="false" aria-controls="sidebar-collapse-20">
                    <a href="20">1.3.2            Function Definition Expressions          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-21">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-21" aria-expanded="false" aria-controls="sidebar-collapse-21">
                    <a href="21">1.3.3              Functions            as General Methods          </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-22">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-22" aria-expanded="false" aria-controls="sidebar-collapse-22">
                    <a href="22">1.3.4      Functions    as Returned Values  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-23">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-23" aria-expanded="true" aria-controls="sidebar-collapse-23">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="23">2  Building Abstractions with Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-23" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-24">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-24" aria-expanded="true" aria-controls="sidebar-collapse-24">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="24">2.1  Introduction to Data Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-24" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-25">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-25" aria-expanded="false" aria-controls="sidebar-collapse-25">
                    <a href="25">2.1.1      Example: Arithmetic Operations for Rational Numbers  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-26">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-26" aria-expanded="false" aria-controls="sidebar-collapse-26">
                    <a href="26">2.1.2          Abstraction Barriers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-27">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-27" aria-expanded="false" aria-controls="sidebar-collapse-27">
                    <a href="27">2.1.3          What Is Meant by Data?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-28">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-28" aria-expanded="false" aria-controls="sidebar-collapse-28">
                    <a href="28">2.1.4          Extended Exercise: Interval Arithmetic      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-29">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-29" aria-expanded="true" aria-controls="sidebar-collapse-29">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="29">2.2  Hierarchical Data and the Closure Property</a>
                </h5>
              </div>
              <div id="sidebar-collapse-29" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-30">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-30" aria-expanded="false" aria-controls="sidebar-collapse-30">
                    <a href="30">2.2.1          Representing Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-31">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-31" aria-expanded="false" aria-controls="sidebar-collapse-31">
                    <a href="31">2.2.2          Hierarchical Structures      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-32">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-32" aria-expanded="false" aria-controls="sidebar-collapse-32">
                    <a href="32">2.2.3          Sequences as Conventional Interfaces      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-33">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-33" aria-expanded="false" aria-controls="sidebar-collapse-33">
                    <a href="33">2.2.4          Example: A Picture Language      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-34">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-34" aria-expanded="true" aria-controls="sidebar-collapse-34">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="34">2.3  Symbolic Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-34" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-35">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-35" aria-expanded="false" aria-controls="sidebar-collapse-35">
                    <a href="35">2.3.1          Strings      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-36">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-36" aria-expanded="false" aria-controls="sidebar-collapse-36">
                    <a href="36">2.3.2          Example: Symbolic Differentiation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-37">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-37" aria-expanded="false" aria-controls="sidebar-collapse-37">
                    <a href="37">2.3.3          Example: Representing Sets      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-38">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-38" aria-expanded="false" aria-controls="sidebar-collapse-38">
                    <a href="38">2.3.4          Example: Huffman Encoding Trees      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-39">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-39" aria-expanded="true" aria-controls="sidebar-collapse-39">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="39">2.4  Multiple Representations for Abstract Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-39" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-40">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-40" aria-expanded="false" aria-controls="sidebar-collapse-40">
                    <a href="40">2.4.1          Representations for Complex Numbers      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-41">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-41" aria-expanded="false" aria-controls="sidebar-collapse-41">
                    <a href="41">2.4.2          Tagged data      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-42">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-42" aria-expanded="false" aria-controls="sidebar-collapse-42">
                    <a href="42">2.4.3          Data-Directed Programming and Additivity      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-43">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-43" aria-expanded="true" aria-controls="sidebar-collapse-43">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="43">2.5  Systems with Generic Operations</a>
                </h5>
              </div>
              <div id="sidebar-collapse-43" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-44">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-44" aria-expanded="false" aria-controls="sidebar-collapse-44">
                    <a href="44">2.5.1          Generic Arithmetic Operations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-45">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-45" aria-expanded="false" aria-controls="sidebar-collapse-45">
                    <a href="45">2.5.2          Combining Data of Different Types      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-46">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-46" aria-expanded="false" aria-controls="sidebar-collapse-46">
                    <a href="46">2.5.3          Example: Symbolic Algebra      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-47">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-47" aria-expanded="true" aria-controls="sidebar-collapse-47">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="47">3  Modularity, Objects, and State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-47" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-48">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-48" aria-expanded="true" aria-controls="sidebar-collapse-48">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="48">3.1  Assignment and Local State</a>
                </h5>
              </div>
              <div id="sidebar-collapse-48" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-49">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-49" aria-expanded="false" aria-controls="sidebar-collapse-49">
                    <a href="49">3.1.1          Local State Variables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-50">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-50" aria-expanded="false" aria-controls="sidebar-collapse-50">
                    <a href="50">3.1.2          The Benefits of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-51">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-51" aria-expanded="false" aria-controls="sidebar-collapse-51">
                    <a href="51">3.1.3          The Costs of Introducing Assignment      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-52">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-52" aria-expanded="true" aria-controls="sidebar-collapse-52">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="52">3.2  The Environment Model of Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-52" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-53">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-53" aria-expanded="false" aria-controls="sidebar-collapse-53">
                    <a href="53">3.2.1          The Rules for Evaluation      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-54">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-54" aria-expanded="false" aria-controls="sidebar-collapse-54">
                    <a href="54">3.2.2          Applying Simple        Functions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-55">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-55" aria-expanded="false" aria-controls="sidebar-collapse-55">
                    <a href="55">3.2.3          Frames as the Repository of Local State      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-56">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-56" aria-expanded="false" aria-controls="sidebar-collapse-56">
                    <a href="56">3.2.4          Internal Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-57">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-57" aria-expanded="true" aria-controls="sidebar-collapse-57">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="57">3.3  Modeling with Mutable Data</a>
                </h5>
              </div>
              <div id="sidebar-collapse-57" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-58">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-58" aria-expanded="false" aria-controls="sidebar-collapse-58">
                    <a href="58">3.3.1          Mutable List Structure      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-59">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-59" aria-expanded="false" aria-controls="sidebar-collapse-59">
                    <a href="59">3.3.2          Representing Queues      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-60">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-60" aria-expanded="false" aria-controls="sidebar-collapse-60">
                    <a href="60">3.3.3          Representing Tables      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-61">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-61" aria-expanded="false" aria-controls="sidebar-collapse-61">
                    <a href="61">3.3.4          A Simulator for Digital Circuits      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-62">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-62" aria-expanded="false" aria-controls="sidebar-collapse-62">
                    <a href="62">3.3.5          Propagation of Constraints      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-63">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-63" aria-expanded="true" aria-controls="sidebar-collapse-63">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="63">3.4  Concurrency: Time Is of the Essence</a>
                </h5>
              </div>
              <div id="sidebar-collapse-63" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-64">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-64" aria-expanded="false" aria-controls="sidebar-collapse-64">
                    <a href="64">3.4.1      The Nature of Time in Concurrent Systems  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-65">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-65" aria-expanded="false" aria-controls="sidebar-collapse-65">
                    <a href="65">3.4.2      Mechanisms for Controlling Concurrency  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-66">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-66" aria-expanded="true" aria-controls="sidebar-collapse-66">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="66">3.5  Streams</a>
                </h5>
              </div>
              <div id="sidebar-collapse-66" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-67">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-67" aria-expanded="false" aria-controls="sidebar-collapse-67">
                    <a href="67">3.5.1      Streams Are Delayed Lists  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-68">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-68" aria-expanded="false" aria-controls="sidebar-collapse-68">
                    <a href="68">3.5.2      Infinite Streams  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-69">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-69" aria-expanded="false" aria-controls="sidebar-collapse-69">
                    <a href="69">3.5.3      Exploiting the Stream Paradigm  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-70">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-70" aria-expanded="false" aria-controls="sidebar-collapse-70">
                    <a href="70">3.5.4      Streams and Delayed Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-71">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-71" aria-expanded="false" aria-controls="sidebar-collapse-71">
                    <a href="71">3.5.5      Modularity of Functional Programs and Modularity of Objects  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-72">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-72" aria-expanded="true" aria-controls="sidebar-collapse-72">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="72">4  Metalinguistic Abstraction</a>
                </h5>
              </div>
              <div id="sidebar-collapse-72" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-73">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-73" aria-expanded="true" aria-controls="sidebar-collapse-73">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="73">4.1  The Metacircular Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-73" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-74">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-74" aria-expanded="false" aria-controls="sidebar-collapse-74">
                    <a href="74">4.1.1      The Core of the Evaluator  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-75">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-75" aria-expanded="false" aria-controls="sidebar-collapse-75">
                    <a href="75">4.1.2      Representing                Statements and Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-76">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-76" aria-expanded="false" aria-controls="sidebar-collapse-76">
                    <a href="76">4.1.3      Evaluator Data Structures  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-77">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-77" aria-expanded="false" aria-controls="sidebar-collapse-77">
                    <a href="77">4.1.4      Running the Evaluator as a Program  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-78">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-78" aria-expanded="false" aria-controls="sidebar-collapse-78">
                    <a href="78">4.1.5    Data as Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-79">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-79" aria-expanded="false" aria-controls="sidebar-collapse-79">
                    <a href="79">4.1.6      Internal Declarations  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-80">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-80" aria-expanded="false" aria-controls="sidebar-collapse-80">
                    <a href="80">4.1.7      Separating Syntactic Analysis from Execution  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-81">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-81" aria-expanded="true" aria-controls="sidebar-collapse-81">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="81">4.2    Lazy Evaluation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-81" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-82">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-82" aria-expanded="false" aria-controls="sidebar-collapse-82">
                    <a href="82">4.2.1      Normal Order and Applicative Order  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-83">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-83" aria-expanded="false" aria-controls="sidebar-collapse-83">
                    <a href="83">4.2.2      An Interpreter with Lazy Evaluation  </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-84">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-84" aria-expanded="false" aria-controls="sidebar-collapse-84">
                    <a href="84">4.2.3      Streams as Lazy Lists  </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-85">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-85" aria-expanded="true" aria-controls="sidebar-collapse-85">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="85">4.3   Nondeterministic Computing</a>
                </h5>
              </div>
              <div id="sidebar-collapse-85" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-86">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-86" aria-expanded="false" aria-controls="sidebar-collapse-86">
                    <a href="86">4.3.1    Amb and Search      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-87">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-87" aria-expanded="false" aria-controls="sidebar-collapse-87">
                    <a href="87">4.3.2    Examples of Nondeterministic Programs      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-88">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-88" aria-expanded="false" aria-controls="sidebar-collapse-88">
                    <a href="88">4.3.3    Implementing the amb Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-89">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-89" aria-expanded="true" aria-controls="sidebar-collapse-89">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="89">4.4  Logic Programming</a>
                </h5>
              </div>
              <div id="sidebar-collapse-89" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-90">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-90" aria-expanded="false" aria-controls="sidebar-collapse-90">
                    <a href="90">4.4.1    Deductive Information Retrieval      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-91">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-91" aria-expanded="false" aria-controls="sidebar-collapse-91">
                    <a href="91">4.4.2    How the Query System Works      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-92">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-92" aria-expanded="false" aria-controls="sidebar-collapse-92">
                    <a href="92">4.4.3    Is Logic Programming Mathematical Logic?      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-93">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-93" aria-expanded="false" aria-controls="sidebar-collapse-93">
                    <a href="93">4.4.4    Implementing the Query System      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-94">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-94" aria-expanded="true" aria-controls="sidebar-collapse-94">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="94">5  Computing with Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-94" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-95">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-95" aria-expanded="true" aria-controls="sidebar-collapse-95">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="95">5.1  Designing Register Machines</a>
                </h5>
              </div>
              <div id="sidebar-collapse-95" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-96">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-96" aria-expanded="false" aria-controls="sidebar-collapse-96">
                    <a href="96">5.1.1    A Language for Describing Register Machines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-97">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-97" aria-expanded="false" aria-controls="sidebar-collapse-97">
                    <a href="97">5.1.2    Abstraction in Machine Design      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-98">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-98" aria-expanded="false" aria-controls="sidebar-collapse-98">
                    <a href="98">5.1.3    Subroutines      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-99">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-99" aria-expanded="false" aria-controls="sidebar-collapse-99">
                    <a href="99">5.1.4    Using a Stack to Implement Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-100">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-100" aria-expanded="false" aria-controls="sidebar-collapse-100">
                    <a href="100">5.1.5    Instruction Summary      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-101">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-101" aria-expanded="true" aria-controls="sidebar-collapse-101">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="101">5.2  A Register-Machine Simulator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-101" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-102">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-102" aria-expanded="false" aria-controls="sidebar-collapse-102">
                    <a href="102">5.2.1    The Machine Model      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-103">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-103" aria-expanded="false" aria-controls="sidebar-collapse-103">
                    <a href="103">5.2.2    The Assembler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-104">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-104" aria-expanded="false" aria-controls="sidebar-collapse-104">
                    <a href="104">5.2.3    Generating Execution  Functions  for Instructions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-105">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-105" aria-expanded="false" aria-controls="sidebar-collapse-105">
                    <a href="105">5.2.4    Monitoring Machine Performance      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-106">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-106" aria-expanded="true" aria-controls="sidebar-collapse-106">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="106">5.3  Storage Allocation and Garbage Collection</a>
                </h5>
              </div>
              <div id="sidebar-collapse-106" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-107">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-107" aria-expanded="false" aria-controls="sidebar-collapse-107">
                    <a href="107">5.3.1    Memory as Vectors      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-108">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-108" aria-expanded="false" aria-controls="sidebar-collapse-108">
                    <a href="108">5.3.2    Maintaining the Illusion of Infinite Memory      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-109">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-109" aria-expanded="true" aria-controls="sidebar-collapse-109">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="109">5.4  The Explicit-Control Evaluator</a>
                </h5>
              </div>
              <div id="sidebar-collapse-109" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-110">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-110" aria-expanded="false" aria-controls="sidebar-collapse-110">
                    <a href="110">5.4.1    The Core of the Explicit-Control Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-111">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-111" aria-expanded="false" aria-controls="sidebar-collapse-111">
                    <a href="111">5.4.2    Sequence Evaluation and Tail Recursion      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-112">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-112" aria-expanded="false" aria-controls="sidebar-collapse-112">
                    <a href="112">5.4.3    Conditionals, Assignments, and Definitions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-113">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-113" aria-expanded="false" aria-controls="sidebar-collapse-113">
                    <a href="113">5.4.4    Running the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-114">
                <h5 class="mb-0">
                  <a class="sidebar-show collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                     &#10148;   <!-- ➤ (because this one is rendered blue on mobile: ▶  -->
                  </a>
                  <a class="sidebar-hide collapsed" data-toggle="collapse" href="#sidebar-collapse-114" aria-expanded="true" aria-controls="sidebar-collapse-114">
                    &#x25BC;    <!-- ▼ (because the corresponding one is not rendered) -->
                  </a>
                    <a href="114">5.5  Compilation</a>
                </h5>
              </div>
              <div id="sidebar-collapse-114" class="collapse" role="tabpanel" aria-labelledby="headingOne">
                <div class="card-block">
                                <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-115">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-115" aria-expanded="false" aria-controls="sidebar-collapse-115">
                    <a href="115">5.5.1    Structure of the Compiler      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-116">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-116" aria-expanded="false" aria-controls="sidebar-collapse-116">
                    <a href="116">5.5.2    Compiling Expressions      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-117">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-117" aria-expanded="false" aria-controls="sidebar-collapse-117">
                    <a href="117">5.5.3    Compiling Combinations      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-118">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-118" aria-expanded="false" aria-controls="sidebar-collapse-118">
                    <a href="118">5.5.4    Combining Instruction Sequences      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-119">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-119" aria-expanded="false" aria-controls="sidebar-collapse-119">
                    <a href="119">5.5.5    An Example of Compiled Code      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-120">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-120" aria-expanded="false" aria-controls="sidebar-collapse-120">
                    <a href="120">5.5.6    Lexical Addressing      </a>
                  </span>
                </h5>
              </div>
            </div>
            <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-121">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-121" aria-expanded="false" aria-controls="sidebar-collapse-121">
                    <a href="121">5.5.7    Interfacing Compiled Code to the Evaluator      </a>
                  </span>
                </h5>
              </div>
            </div>

                </div>
              </div>
            </div>

                </div>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-125">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-125" aria-expanded="false" aria-controls="sidebar-collapse-125">
                    <a href="125">References</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-126">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-126" aria-expanded="false" aria-controls="sidebar-collapse-126">
                    <a href="126">Index</a>
                  </span>
                </h5>
              </div>
            </div>

                     <div class="card card-inverse">
              <div class="card-header" role="tab" id="sidebar-127">
                <h5 class="mb-0">
                  <span class="collapsed" data-toggle="collapse" href="#sidebar-collapse-127" aria-expanded="false" aria-controls="sidebar-collapse-127">
                    <a href="127">JavaScript Adaptation Making-of</a>
                  </span>
                </h5>
              </div>
            </div>

       </div>

           <div id="permalink-msg">
  <div class="screen">
    <div class="alert alert-success">
      <strong>Permalink copied!</strong> 
    </div>
  </div>
</div>
<div class="chapter-content">

  <div class="chapter-title">
    <div class="permalink">
      <a name="top" class="permalink">2.3.4 
        Example: Huffman Encoding Trees
      </a>
    </div>
  </div>
    <div class="chapter-text" >
        <div class="SUBSECTION"><SUBSECTION>
      

      
      

      <div class="permalink">
<a name="p1" class="permalink"></a><p>
      This section provides practice in the use of list structure and data
      abstraction to manipulate sets and trees.  The application is to
      methods for representing data as sequences of ones and zeros (bits).
      For example, the
      
      
      ASCII standard code used to represent text in
      computers encodes each
      
      character as a sequence of seven bits.  Using
      seven bits allows us to distinguish $2^7$, or 128, possible different
      characters.  In general, if we want to distinguish $n$ different
      symbols, we will need to use $\log_2 n$ bits per symbol.  If all our
      messages are made up of the eight symbols A, B, C, D, E, F, G, and H,
      we can choose a code with three bits per character, for example
      <img src="img_tex/ch2_3_4-1.png">
      With this code, the message
      <BLOCKQUOTE>
BACADAEAFABBAAAGAH
      </BLOCKQUOTE>
      is encoded as the string of 54 bits
      <BLOCKQUOTE>
001000010000011000100000101000001001000000000110000111
      </BLOCKQUOTE>
      Codes such as ASCII and the A-through-H code above are known as
      
      
      <EM>fixed-length</EM> codes, because they represent each symbol in the message
      with the same number of bits.  It is sometimes advantageous to use
      
      
      <EM>variable-length</EM> codes, in which different symbols may be
      represented by different numbers of bits.  For example,
      
      
      Morse code
      does not use the same number of dots and dashes for each letter of the
      alphabet.  In particular, E, the most frequent letter, is represented
      by a single dot.  In general, if our messages are such that some
      symbols appear very frequently and some very rarely, we can encode
      data more efficiently (i.e., using fewer bits per message) if we
      assign shorter codes to the frequent symbols.  Consider the following
      alternative code for the letters A through H:

      <img src="img_tex/ch2_3_4-2.png">

      With this code, the same message as above is encoded as the string
      <BLOCKQUOTE>
100010100101101100011010100100000111001111
      </BLOCKQUOTE>
      This string contains 42 bits, so it saves more than 20% in space in
      comparison with the fixed-length code shown above.
      </p>
</div>
      <div class="permalink">
<a name="p2" class="permalink"></a><p>
      One of the difficulties of using a variable-length code is knowing
      when you have reached the end of a symbol in reading a sequence of
      zeros and ones.  Morse code solves this problem by using a special
      
      <EM>separator code</EM> (in this case, a pause) after the sequence of
      dots and dashes for each letter.  Another solution is to design the
      code in such a way that no complete code for any symbol is the
      beginning (or <EM>prefix</EM>) of the code for another symbol.  Such a
      code is called a
      
      
      <EM>prefix code</EM>.  In the example above, A is
      encoded by 0 and B is encoded by 100, so no other symbol can have a
      code that begins with 0 or with 100.
      </p>
</div>
      <div class="permalink">
<a name="p3" class="permalink"></a><p>
      In general, we can attain significant savings if we use
      variable-length prefix codes that take advantage of the relative
      frequencies of the symbols in the messages to be encoded.  One
      particular scheme for doing this is called the Huffman encoding
      method, after its discoverer,
      
      David Huffman.  A Huffman code can be
      represented as a
      
      
      binary tree whose leaves are the symbols that are
      encoded.  At each non-leaf node of the tree there is a set containing
      all the symbols in the leaves that lie below the node.  In addition,
      each symbol at a leaf is assigned a weight (which is its
      relative frequency), and each non-leaf
      node contains a weight that is the sum of all the weights of the
      leaves lying below it.  The weights are not used in the encoding or
      the decoding process.  We will see below how they are used to help
      construct the tree.
      </p>
</div>
      <div class="permalink">
<a name="p4" class="permalink"></a><p>
      <FIGURE>
        <img src="img_original/ch2-Z-G-53.svg">
        <div class="chapter-text-CAPTION">
<b><a class="caption" id="fig_2.18" href="38#fig_2.18">Figure 2.18 </a></b>A Huffman encoding tree.</div>
        
      </FIGURE>
      Figure <REF NAME="fig:huffman"><a class="superscript" id="2.3.4-fig-link-2.18" href="38#fig_2.18">2.18</a></REF> shows the Huffman tree for the A-through-H
      code given above.  The weights at the leaves
      indicate that the tree was designed for messages in which A appears
      with relative frequency 8, B with relative frequency 3, and the
      other letters each with relative frequency 1.
      </p>
</div>
      <div class="permalink">
<a name="p5" class="permalink"></a><p>
      Given a Huffman tree, we can find the encoding of any symbol by
      starting at the root and moving down until we reach the leaf that
      holds the symbol.  Each time we move down a left branch we add a 0 to
      the code, and each time we move down a right branch we add a 1.  (We
      decide which branch to follow by testing to see which branch either is
      the leaf node for the symbol or contains the symbol in its set.)  For
      example, starting from the root of the tree in
      Figure <REF NAME="fig:huffman"><a class="superscript" id="2.3.4-fig-link-2.18" href="38#fig_2.18">2.18</a></REF>, we arrive at the leaf for D by following a
      right branch, then a left branch, then a right branch, then a right
      branch; hence, the code for D is 1011.
      </p>
</div>
      <div class="permalink">
<a name="p6" class="permalink"></a><p>
      To decode a bit sequence using a Huffman tree, we begin at the root
      and use the successive zeros and ones of the bit sequence to determine
      whether to move down the left or the right branch.  Each time we come
      to a leaf, we have generated a new symbol in the message, at which
      point we start over from the root of the tree to find the next symbol.
      For example, suppose we are given the tree above and the sequence
      10001010.  Starting at the root, we move down the right branch, (since
      the first bit of the string is 1), then down the left branch (since
      the second bit is 0), then down the left branch (since the third bit
      is also 0).  This brings us to the leaf for B, so the first symbol of
      the decoded message is B.  Now we start again at the root, and we make
      a left move because the next bit in the string is 0.  This brings us
      to the leaf for A.  Then we start again at the root with the rest of
      the string 1010, so we move right, left, right, left and reach C.
      Thus, the entire message is BAC.
      </p>
</div>

      <div class="permalink">
<a name="h1" class="permalink"></a><h2>
        Generating Huffman trees
      </h2>
</div>

      <div class="permalink">
<a name="p7" class="permalink"></a><p>
      Given an <QUOTE>alphabet</QUOTE> of symbols and their relative frequencies, how
      do we construct the <QUOTE>best</QUOTE> code?  (In other words, which tree will
      encode messages with the fewest bits?)  Huffman gave an algorithm for
      doing this and showed that the resulting code is indeed the best
      variable-length code for messages where the relative frequency of the
      symbols matches the frequencies with which the code was constructed.
      
      
      We will not prove this optimality of Huffman codes here, but we will
      show how Huffman trees are constructed.<a class="superscript" id="footnote-link-1" href="38#footnote-1">[1]</a>
      </p>
</div>
      <div class="permalink">
<a name="p8" class="permalink"></a><p>
      The algorithm for generating a Huffman tree is very simple. The idea
      is to arrange the tree so that the symbols with the lowest frequency
      appear farthest away from the root. Begin with the set of leaf nodes,
      containing symbols and their frequencies, as determined by the initial data
      from which the code is to be constructed. Now find two leaves with
      the lowest weights and merge them to produce a node that has these
      two nodes as its left and right branches. The weight of the new node
      is the sum of the two weights. Remove the two leaves from the
      original set and replace them by this new node. Now continue this
      process. At each step, merge two nodes with the smallest weights,
      removing them from the set and replacing them with a node that has
      these two as its left and right branches. The process stops when
      there is only one node left, which is the root of the entire tree.
      Here is how the Huffman tree of Figure <REF NAME="fig:huffman"><a class="superscript" id="2.3.4-fig-link-2.18" href="38#fig_2.18">2.18</a></REF> was generated:
      <SPLIT>
        
        


      <img src="img_tex/ch2_3_4-3.png">

        
      </SPLIT>
      The algorithm does not always specify a unique tree, because there may
      not be unique smallest-weight nodes at each step.  Also, the choice of
      the order in which the two nodes are merged (i.e., which will be the
      right branch and which will be the left branch) is arbitrary.
      </p>
</div>

      <div class="permalink">
<a name="h2" class="permalink"></a><h2>
        Representing Huffman trees
      </h2>
</div>

      <div class="permalink">
<a name="p9" class="permalink"></a><p>
      In the exercises below we will work with a system that uses
      Huffman trees to encode and decode messages and generates Huffman
      trees according to the algorithm outlined above.  We will begin by
      discussing how trees are represented.
      </p>
</div>
      <div class="permalink">
<a name="p10" class="permalink"></a><p>
      Leaves of the tree are represented by a list consisting of the
      symbol <kbd>leaf</kbd>, the symbol at the leaf, and the weight:

      <div class="snippet" id="javascript_38_0_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent(''+'\n'+'function make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}'+'\n'+'\nconst my_leaf = make_leaf(&quot;A&quot;, 8);\n\nweight_leaf(my_leaf);\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_leaf(symbol, weight) {
   return list("leaf", symbol, weight);
}
function is_leaf(object) {
   return head(object) === "leaf";
}
function symbol_leaf(x) {
  return head(tail(x));
}
function weight_leaf(x) {
   return head(tail(tail(x)));
}</pre></div></div>

      

      
      </p>
</div>
      <div class="permalink">
<a name="p11" class="permalink"></a><p>
      A general tree will be a list of a left branch, a right branch, a set
      of symbols, and a weight.  The set of symbols will be simply a list of
      the symbols, rather than some more sophisticated set representation.
      When we make a tree by merging two nodes, we obtain the weight of the
      tree as the sum of the weights of the nodes, and the set of symbols as
      the union of the sets of symbols for the nodes.  Since our symbol sets are
      represented as lists, we can form the union by using the <kbd>append</kbd>
      function
      we defined in section <REF NAME="sec:sequences"><a class="superscript" id="2.3.4-sec-link-2.2.1" href="30">2.2.1</a></REF>:

      <div class="snippet" id="javascript_38_1_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        '+'\n'+'function make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}'+'\n'+'\nconst my_leaf_1 = make_leaf(&quot;A&quot;, 8);\nconst my_leaf_2 = make_leaf(&quot;B&quot;, 3);\n\nmake_code_tree(my_leaf_1, my_leaf_2);\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_code_tree(left,right) {
    return list(left,
                right,
                append(symbols(left), symbols(right)),
                weight(left) + weight(right));
}</pre></div></div>

      
      
      If we make a tree in this way, we have the following selectors:

      <div class="snippet" id="javascript_38_2_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      '+'\n'+'function left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}'+'\n'+'\nconst my_leaf_1 = make_leaf(&quot;A&quot;, 8);\nconst my_leaf_2 = make_leaf(&quot;B&quot;, 3);\nconst my_tree = make_code_tree(my_leaf_1, my_leaf_2);\n\nweight(my_tree);\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function left_branch(tree) {
    return head(tree);
}
function right_branch(tree) {
    return head(tail(tree));
}
function symbols(tree) {
    return is_leaf(tree)
           ? list(symbol_leaf(tree))
           : head(tail(tail(tree)));
}
function weight(tree) {
    return is_leaf(tree)
           ? weight_leaf(tree)
           : head(tail(tail(tail(tree))));
}</pre></div></div>

      
      </p>
</div>
      <div class="permalink">
<a name="p12" class="permalink"></a><p>
      The
      functions
      <kbd>symbols</kbd> and <kbd>weight</kbd> must do something
      slightly different depending on whether they are called with a leaf or
      a general tree.  These are simple examples of
      
      
      <EM>generic
        functions</EM> (functions
      that can handle more than one kind of data),
      which we will have much more to say about in
      sections <REF NAME="sec:multiple-reps"><a class="superscript" id="2.3.4-sec-link-2.4" href="39">2.4</a></REF> and <REF NAME="sec:generic-operators"><a class="superscript" id="2.3.4-sec-link-2.5" href="43">2.5</a></REF>.
      </p>
</div>

      <div class="permalink">
<a name="h3" class="permalink"></a><h2>
        The decoding
          function
      </h2>
</div>

      <div class="permalink">
<a name="p13" class="permalink"></a><p>
      The following
      function
      implements the decoding algorithm.
      It takes as arguments a list of zeros and ones, together with
      a Huffman tree.

      <div class="snippet" id="javascript_38_3_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      '+'\n'+'function decode(bits, tree) {\n    function decode_1(bits, current_branch) {\n        if (is_null(bits)) {\n            return null;\n        } else {\n            const next_branch = choose_branch(head(bits),\n                                    current_branch);\n            return is_leaf(next_branch)\n                   ? pair(symbol_leaf(next_branch),\n                          decode_1(tail(bits), tree))\n                   : decode_1(tail(bits), next_branch);\n        }\n    }\n    return decode_1(bits, tree);\n}\nfunction choose_branch(bit, branch) {\n    return bit === 0\n           ? left_branch(branch)\n           : bit === 1\n             ? right_branch(branch)\n             : Error(&quot;bad bit -- choose_branch&quot;,bit);\n}'+'\n'+'\nconst my_leaf_1 = make_leaf(&quot;A&quot;, 8);\nconst my_leaf_2 = make_leaf(&quot;B&quot;, 3);\n\nconst my_tree = make_code_tree(my_leaf_1, my_leaf_2);\n\ndecode(list(0, 1, 1, 0), my_tree);\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function decode(bits, tree) {
    function decode_1(bits, current_branch) {
        if (is_null(bits)) {
            return null;
        } else {
            const next_branch = choose_branch(head(bits),
                                    current_branch);
            return is_leaf(next_branch)
                   ? pair(symbol_leaf(next_branch),
                          decode_1(tail(bits), tree))
                   : decode_1(tail(bits), next_branch);
        }
    }
    return decode_1(bits, tree);
}
function choose_branch(bit, branch) {
    return bit === 0
           ? left_branch(branch)
           : bit === 1
             ? right_branch(branch)
             : Error("bad bit -- choose_branch",bit);
}</pre></div></div>


     
      
      </p>
</div>
      <div class="permalink">
<a name="p14" class="permalink"></a><p>
      The
      function
      <kbd>decode_1</kbd> takes two arguments: the list of remaining bits
      and the current position in the tree.  It keeps moving
      <QUOTE>down</QUOTE> the tree, choosing a left or a right branch according to
      whether the next bit in the list is a zero or a one.  (This is done
      with the
      function
      <kbd>choose_branch</kbd>.)  When it reaches a leaf, it
      returns the symbol at that leaf as the next symbol in the message by
      <kbd>pair</kbd>ing it onto the result of decoding
      the rest of the message, starting at the root of the tree.
      Note the error check in the final clause of <kbd>choose_branch</kbd>, which
      complains if the
      function
      finds something other than a zero or a one in the
      input data.
      </p>
</div>

      <div class="permalink">
<a name="h4" class="permalink"></a><h2>
        Sets of weighted elements
      </h2>
</div>

      <div class="permalink">
<a name="p15" class="permalink"></a><p>
      In our representation of trees, each non-leaf node contains a set of
      symbols, which we have represented as a simple list.  However, the
      tree-generating algorithm discussed above requires that we also work
      with sets of leaves and trees, successively merging the two smallest
      items.  Since we will be required to repeatedly find the smallest item
      in a set, it is convenient to use an ordered representation for this
      kind of set.
      </p>
</div>
      <div class="permalink">
<a name="p16" class="permalink"></a><p>
      We will represent a set of leaves and trees as a list of elements,
      arranged in increasing order of weight.
      The following
      
	
	
	  <kbd>adjoin_set</kbd>
	
      
      function
      for constructing sets is similar to the one
      described in exercise <REF NAME="ex:adjoin-set"><a class="superscript" id="2.3.4-ex-link-2.61" href="37#ex_2.61">2.61</a></REF>; however, items are compared
      by their weights, and the element being added to the set is
      never already in it.

      <div class="snippet" id="javascript_38_4_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        '+'\n'+'function adjoin_set(x, set) {\n    return is_null(set)\n           ? list(x)\n           : weight(x) &lt; weight(head(set))\n             ? pair(x, set)\n             : pair(head(set), adjoin_set(x, tail(set)));\n}'+'\n'+'\nconst my_leaf_1 = make_leaf(&quot;A&quot;, 8);\nconst my_leaf_2 = make_leaf(&quot;B&quot;, 3);\n\nadjoin_set(my_leaf_1, adjoin_set(my_leaf_2, null));\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function adjoin_set(x, set) {
    return is_null(set)
           ? list(x)
           : weight(x) &lt; weight(head(set))
             ? pair(x, set)
             : pair(head(set), adjoin_set(x, tail(set)));
}</pre></div></div>

     
      
      </p>
</div>
      <div class="permalink">
<a name="p17" class="permalink"></a><p>
      The following
      function
      takes a list of
      symbol-frequency pairs such as
      
	
	
	  <div class="snippet" id="javascript_38_5_div"><div class="pre-prettyprint"><pre class="prettyprint no-eval">list(list("A", 4), list("B", 2), list("C", 1), list("D", 1))</pre></div></div>
	
      
      and constructs an initial ordered set of leaves, ready to be merged
      according to the Huffman algorithm:

      <div class="snippet" id="javascript_38_6_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction adjoin_set(x, set) {\n    return is_null(set)\n           ? list(x)\n           : weight(x) &lt; weight(head(set))\n             ? pair(x, set)\n             : pair(head(set), adjoin_set(x, tail(set)));\n}\n      '+'\n'+'function make_leaf_set(pairs) {\n   if (is_null(pairs)) {\n      return null;\n   }\n   else {\n      const first_pair = head(pairs);\n      return adjoin_set(\n                 make_leaf(head(first_pair),        // symb\n                           head(tail(first_pair))), // freq\n                 make_leaf_set(tail(pairs)));\n   }\n}'+'\n'+'\nmake_leaf_set( list( make_leaf(&quot;A&quot;, 4),\n                     make_leaf(&quot;B&quot;, 2),\n                     make_leaf(&quot;C&quot;, 1),\n                     make_leaf(&quot;D&quot;, 1) ) );\n	'+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function make_leaf_set(pairs) {
   if (is_null(pairs)) {
      return null;
   }
   else {
      const first_pair = head(pairs);
      return adjoin_set(
                 make_leaf(head(first_pair),        // symb
                           head(tail(first_pair))), // freq
                 make_leaf_set(tail(pairs)));
   }
}</pre></div></div>

      
      </p>
</div>

      <div class="permalink">
<a name="ex_2.67" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.67">Exercise 2.67 </a></b>
        Define an encoding tree and a sample message:

        <div class="snippet" id="javascript_38_7_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      '+'\n'+'const sample_tree =\n    make_code_tree(make_leaf(&quot;A&quot;,4),\n        make_code_tree(make_leaf(&quot;B&quot;,2),\n            make_code_tree(make_leaf(&quot;D&quot;,1),\n                make_leaf(&quot;C&quot;,1))));\nconst sample_message =						 \n    list(0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0);'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const sample_tree =
    make_code_tree(make_leaf("A",4),
        make_code_tree(make_leaf("B",2),
            make_code_tree(make_leaf("D",1),
                make_leaf("C",1))));
const sample_message =						 
    list(0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0);</pre></div></div>

        Use the <kbd>decode</kbd>
        function
        to decode the
        message, and give the result.
        

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_1_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_1_div"><SOLUTION>
	  <div class="snippet" id="javascript_38_8_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      \nfunction decode(bits, tree) {\n    function decode_1(bits, current_branch) {\n        if (is_null(bits)) {\n            return null;\n        } else {\n            const next_branch = choose_branch(head(bits),\n                                    current_branch);\n            return is_leaf(next_branch)\n                   ? pair(symbol_leaf(next_branch),\n                          decode_1(tail(bits), tree))\n                   : decode_1(tail(bits), next_branch);\n        }\n    }\n    return decode_1(bits, tree);\n}\nfunction choose_branch(bit, branch) {\n    return bit === 0\n           ? left_branch(branch)\n           : bit === 1\n             ? right_branch(branch)\n             : Error(&quot;bad bit -- choose_branch&quot;,bit);\n}\n        \nconst sample_tree =\n    make_code_tree(make_leaf(&quot;A&quot;,4),\n        make_code_tree(make_leaf(&quot;B&quot;,2),\n            make_code_tree(make_leaf(&quot;D&quot;,1),\n                make_leaf(&quot;C&quot;,1))));\nconst sample_message =						 \n    list(0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0);\n          '+'\n'+'decode(sample_message, sample_tree);\n// should be: [&quot;A&quot;, [&quot;D&quot;, [&quot;A&quot;, [&quot;B&quot;, [&quot;B&quot;, [&quot;C&quot;, [&quot;A&quot;, null]]]]]]]'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">decode(sample_message, sample_tree);
// should be: ["A", ["D", ["A", ["B", ["B", ["C", ["A", null]]]]]]]</pre></div></div>
	  
	</SOLUTION></div>
</div>
	
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.68" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.68">Exercise 2.68 </a></b>
        The <kbd>encode</kbd>
        function
        takes as arguments a message and a tree and
        produces the list of bits that gives the encoded message.

        <div class="snippet" id="javascript_38_9_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\n// encode_symbol function to be written by students\n  '+'\n'+'function encode(message, tree) {\n    return is_null(message)\n           ? null\n           : append(encode_symbol(head(message), tree),\n                    encode(tail(message), tree));\n}'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function encode(message, tree) {
    return is_null(message)
           ? null
           : append(encode_symbol(head(message), tree),
                    encode(tail(message), tree));
}</pre></div></div>


        <SPLIT>
          Write the function <kbd>encode_symbol</kbd>
            that returns the list of bits that encodes a given symbol according to a given tree.
          
        </SPLIT>
        You should design <kbd>encode_symbol</kbd> so that it signals an
        error if the symbol is not in the tree at all.  Test your
        function
        by
        encoding the result you obtained in exercise <REF NAME="ex:sample-tree"><a class="superscript" id="2.3.4-ex-link-2.67" href="38#ex_2.67">2.67</a></REF> with
        the sample tree and seeing whether it is the same as the original
        sample message.

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_2_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_2_div"><SOLUTION>

	  <div class="snippet" id="javascript_38_10_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      \nfunction decode(bits, tree) {\n    function decode_1(bits, current_branch) {\n        if (is_null(bits)) {\n            return null;\n        } else {\n            const next_branch = choose_branch(head(bits),\n                                    current_branch);\n            return is_leaf(next_branch)\n                   ? pair(symbol_leaf(next_branch),\n                          decode_1(tail(bits), tree))\n                   : decode_1(tail(bits), next_branch);\n        }\n    }\n    return decode_1(bits, tree);\n}\nfunction choose_branch(bit, branch) {\n    return bit === 0\n           ? left_branch(branch)\n           : bit === 1\n             ? right_branch(branch)\n             : Error(&quot;bad bit -- choose_branch&quot;,bit);\n}\n        \n// encode_symbol function to be written by students\n  \nfunction encode(message, tree) {\n    return is_null(message)\n           ? null\n           : append(encode_symbol(head(message), tree),\n                    encode(tail(message), tree));\n}\n          \nconst sample_tree =\n    make_code_tree(make_leaf(&quot;A&quot;,4),\n        make_code_tree(make_leaf(&quot;B&quot;,2),\n            make_code_tree(make_leaf(&quot;D&quot;,1),\n                make_leaf(&quot;C&quot;,1))));\nconst sample_message =						 \n    list(0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0);\n          \nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        '+'\n'+'function encode_symbol(symbol, tree) {\n    function contains_symbol(symbol, current_tree) {\n        return member(symbol, symbols(current_tree)) !== null;\n    }\n    if (is_leaf(tree)) {\n        return null;\n    } else {\n        const left_tree = left_branch(tree);\n	const right_tree = right_branch(tree);\n	return contains_symbol(symbol, left_tree)\n               ? pair(0, encode_symbol(symbol, left_tree))\n                 : contains_symbol(symbol, right_tree)\n                   ? pair(1, encode_symbol(symbol, right_tree))\n                   : error(&quot;symbol not found&quot;);\n    }\n}'+'\n'+'\nis_equal(encode(decode(sample_message, sample_tree),\n                sample_tree),\n         sample_message);\n	    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function encode_symbol(symbol, tree) {
    function contains_symbol(symbol, current_tree) {
        return member(symbol, symbols(current_tree)) !== null;
    }
    if (is_leaf(tree)) {
        return null;
    } else {
        const left_tree = left_branch(tree);
	const right_tree = right_branch(tree);
	return contains_symbol(symbol, left_tree)
               ? pair(0, encode_symbol(symbol, left_tree))
                 : contains_symbol(symbol, right_tree)
                   ? pair(1, encode_symbol(symbol, right_tree))
                   : error("symbol not found");
    }
}</pre></div></div>

	  
	  
	</SOLUTION></div>
</div>

      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.69" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.69">Exercise 2.69 </a></b>
        The following
        function
        takes as its argument a list of
        symbol-frequency pairs (where no symbol appears in more than one pair)
        and generates a Huffman encoding tree according to the Huffman
        algorithm.

        <div class="snippet" id="javascript_38_11_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction adjoin_set(x, set) {\n    return is_null(set)\n           ? list(x)\n           : weight(x) &lt; weight(head(set))\n             ? pair(x, set)\n             : pair(head(set), adjoin_set(x, tail(set)));\n}\n      \nfunction make_leaf_set(pairs) {\n   if (is_null(pairs)) {\n      return null;\n   }\n   else {\n      const first_pair = head(pairs);\n      return adjoin_set(\n                 make_leaf(head(first_pair),        // symb\n                           head(tail(first_pair))), // freq\n                 make_leaf_set(tail(pairs)));\n   }\n}\n        \n// successive_merge function to be written by student\n'+'\n'+'function generate_huffman_tree(pairs) {\n   return successive_merge(make_leaf_set(pairs));\n}'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function generate_huffman_tree(pairs) {
   return successive_merge(make_leaf_set(pairs));
}</pre></div></div>



        <SPLIT>
          
          
            The function <kbd>make_leaf_set</kbd> 
            that transforms the
            list of pairs into an ordered set of leaves is given above.
            Write the function <kbd>successive_merge</kbd>
            using <kbd>make_code_tree</kbd> to
            successively merge the smallest-weight elements of the set until there
            is only one element left, which is the desired Huffman tree.
          
        </SPLIT>
        (This
        function
        is slightly tricky, but not really complicated.  If you find
        yourself designing a complex
        function, then you are almost certainly
        doing something wrong.  You can take significant advantage of the fact
        that we are using an ordered set representation.)
        
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_3_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_3_div"><SOLUTION>
    <div class="snippet" id="javascript_38_12_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      \nfunction adjoin_set(x, set) {\n    return is_null(set)\n           ? list(x)\n           : weight(x) &lt; weight(head(set))\n             ? pair(x, set)\n             : pair(head(set), adjoin_set(x, tail(set)));\n}\n      \nfunction make_leaf_set(pairs) {\n   if (is_null(pairs)) {\n      return null;\n   }\n   else {\n      const first_pair = head(pairs);\n      return adjoin_set(\n                 make_leaf(head(first_pair),        // symb\n                           head(tail(first_pair))), // freq\n                 make_leaf_set(tail(pairs)));\n   }\n}\n        \n// successive_merge function to be written by student\n\nfunction generate_huffman_tree(pairs) {\n   return successive_merge(make_leaf_set(pairs));\n}\n          \nfunction is_equal(a, b) {\n    return (is_pair(a) &amp;&amp; is_pair(b) &amp;&amp;\n            is_equal(head(a), head(b)) &amp;&amp; is_equal(tail(a), tail(b)))\n           || \n           a === b;\n}\n        '+'\n'+'function successive_merge(leaves) {\n    return length(leaves) === 1\n           ? head(leaves)\n           : successive_merge(\n                 adjoin_set(\n                     make_code_tree(head(leaves),\n                                    head(tail(leaves))),\n                     tail(tail(leaves))));\n}'+'\n'+'\nconst sample_tree =\n    make_code_tree(make_leaf(&quot;A&quot;, 4),\n                   make_code_tree(\n                       make_leaf(&quot;B&quot;, 2),\n                       make_code_tree(\n                           make_leaf(&quot;D&quot;, 1),\n                           make_leaf(&quot;C&quot;, 1))));\nconst sample_frequencies = list(list(&quot;A&quot;, 4), \n                                list(&quot;B&quot;, 2), \n                                list(&quot;C&quot;, 1), \n                                list(&quot;D&quot;, 1));\n\nis_equal(sample_tree, \n         generate_huffman_tree(sample_frequencies));\n    '+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">function successive_merge(leaves) {
    return length(leaves) === 1
           ? head(leaves)
           : successive_merge(
                 adjoin_set(
                     make_code_tree(head(leaves),
                                    head(tail(leaves))),
                     tail(tail(leaves))));
}</pre></div></div>

    
    
  </SOLUTION></div>
</div>


      </EXERCISE>
</div>


      <div class="permalink">
<a name="ex_2.70" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.70">Exercise 2.70 </a></b>
        
        The following eight-symbol alphabet with associated relative
        frequencies was designed to efficiently encode the lyrics of 1950s
        rock songs.  (Note that the <QUOTE>symbols</QUOTE> of an <QUOTE>alphabet</QUOTE> need not be
        individual letters.)
        <img src="img_tex/ch2_3_4-4.png">
        Use <kbd>generate_huffman_tree</kbd> (exercise <REF NAME="ex:generate-huffman-tree"><a class="superscript" id="2.3.4-ex-link-2.69" href="38#ex_2.69">2.69</a></REF>)
        to generate a corresponding Huffman tree, and use
        <kbd>encode</kbd> (exercise <REF NAME="ex:encode-symbol"><a class="superscript" id="2.3.4-ex-link-2.68" href="38#ex_2.68">2.68</a></REF>)
        to encode the following message:

<p>
Get a job <br>
Sha na na na na na na na na <br>
Get a job <br>
Sha na na na na na na na na <br>
Wah yip yip yip yip yip yip yip yip yip <br>
Sha boom
</p>
        How many bits are required for the encoding?  What is the smallest
        number of bits that would be needed to encode this song if we
        used a fixed-length code for the eight-symbol alphabet?

	<div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_4_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_4_div"><SOLUTION>

	  <div class="snippet" id="javascript_38_13_div"><div class="pre-prettyprint"><pre class="prettyprint" title="Evaluate Javascript expression" onclick="var compressed = LZString.compressToEncodedURIComponent('\nfunction make_leaf(symbol, weight) {\n   return list(&quot;leaf&quot;, symbol, weight);\n}\nfunction is_leaf(object) {\n   return head(object) === &quot;leaf&quot;;\n}\nfunction symbol_leaf(x) {\n  return head(tail(x));\n}\nfunction weight_leaf(x) {\n   return head(tail(tail(x)));\n}\n        \nfunction left_branch(tree) {\n    return head(tree);\n}\nfunction right_branch(tree) {\n    return head(tail(tree));\n}\nfunction symbols(tree) {\n    return is_leaf(tree)\n           ? list(symbol_leaf(tree))\n           : head(tail(tail(tree)));\n}\nfunction weight(tree) {\n    return is_leaf(tree)\n           ? weight_leaf(tree)\n           : head(tail(tail(tail(tree))));\n}\n        \nfunction make_code_tree(left,right) {\n    return list(left,\n                right,\n                append(symbols(left), symbols(right)),\n                weight(left) + weight(right));\n}\n      \nfunction adjoin_set(x, set) {\n    return is_null(set)\n           ? list(x)\n           : weight(x) &lt; weight(head(set))\n             ? pair(x, set)\n             : pair(head(set), adjoin_set(x, tail(set)));\n}\n      \nfunction make_leaf_set(pairs) {\n   if (is_null(pairs)) {\n      return null;\n   }\n   else {\n      const first_pair = head(pairs);\n      return adjoin_set(\n                 make_leaf(head(first_pair),        // symb\n                           head(tail(first_pair))), // freq\n                 make_leaf_set(tail(pairs)));\n   }\n}\n        \n// successive_merge function to be written by student\n\nfunction generate_huffman_tree(pairs) {\n   return successive_merge(make_leaf_set(pairs));\n}\n          \nfunction successive_merge(leaves) {\n    return length(leaves) === 1\n           ? head(leaves)\n           : successive_merge(\n                 adjoin_set(\n                     make_code_tree(head(leaves),\n                                    head(tail(leaves))),\n                     tail(tail(leaves))));\n}\n    \nfunction encode_symbol(symbol, tree) {\n    function contains_symbol(symbol, current_tree) {\n        return member(symbol, symbols(current_tree)) !== null;\n    }\n    if (is_leaf(tree)) {\n        return null;\n    } else {\n        const left_tree = left_branch(tree);\n	const right_tree = right_branch(tree);\n	return contains_symbol(symbol, left_tree)\n               ? pair(0, encode_symbol(symbol, left_tree))\n                 : contains_symbol(symbol, right_tree)\n                   ? pair(1, encode_symbol(symbol, right_tree))\n                   : error(&quot;symbol not found&quot;);\n    }\n}\n	    \n// encode_symbol function to be written by students\n  \nfunction encode(message, tree) {\n    return is_null(message)\n           ? null\n           : append(encode_symbol(head(message), tree),\n                    encode(tail(message), tree));\n}\n          '+'\n'+'const lyrics_frequencies = 	  \n    list(list(&quot;A&quot;, 2),\n         list(&quot;NA&quot;, 16),\n         list(&quot;BOOM&quot;, 1),\n         list(&quot;SHA&quot;, 3),\n         list(&quot;GET&quot;, 2),\n         list(&quot;YIP&quot;, 9),\n         list(&quot;JOB&quot;, 2),\n         list(&quot;WAH&quot;, 2));\nconst lyrics_tree = generate_huffman_tree(lyrics_frequencies);\nconst lyrics = list(\n    \'GET\', \'A\', \'JOB\',\n    \'SHA\', \'NA\', \'NA\', \'NA\', \'NA\', \'NA\', \'NA\', \'NA\', \'NA\',\n    \'GET\', \'A\', \'JOB\', \'SHA\', \'NA\', \'NA\', \'NA\', \'NA\', \'NA\', \n    \'NA\', \'NA\', \'NA\', \'WAH\', \'YIP\', \'YIP\', \'YIP\', \'YIP\',\n    \'YIP\', \'YIP\', \'YIP\', \'YIP\', \'YIP\', \'SHA\', \'BOOM\'\n   );\n \nlength(encode(lyrics, lyrics_tree));\n// 84'+'\n'+''+'\n'); var url = 'https://sourceacademy.nus.edu.sg/playground#chap=2&amp;prgrm='+compressed; window.open(url); ">const lyrics_frequencies = 	  
    list(list("A", 2),
         list("NA", 16),
         list("BOOM", 1),
         list("SHA", 3),
         list("GET", 2),
         list("YIP", 9),
         list("JOB", 2),
         list("WAH", 2));
const lyrics_tree = generate_huffman_tree(lyrics_frequencies);
const lyrics = list(
    'GET', 'A', 'JOB',
    'SHA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA', 'NA',
    'GET', 'A', 'JOB', 'SHA', 'NA', 'NA', 'NA', 'NA', 'NA', 
    'NA', 'NA', 'NA', 'WAH', 'YIP', 'YIP', 'YIP', 'YIP',
    'YIP', 'YIP', 'YIP', 'YIP', 'YIP', 'SHA', 'BOOM'
   );
 
length(encode(lyrics, lyrics_tree));
// 84</pre></div></div>
We have an alphabet of $n = 8$ symbols,    
and a message of $m = 36$ symbols.
Then the minimum number of bits to encode a specific symbol using a fixed-length
code is $\lceil \log_2{n} \rceil = 3$. Thus
the minimum number of bits to encode all the lyrics is 
$m \lceil \log_2{n} \rceil = 36 \times 3 = 108$.
	  
      </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.71" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.71">Exercise 2.71 </a></b>
        Suppose we have a Huffman tree for an alphabet of $n$ symbols, and
        that the relative frequencies of the symbols are 1, 2, 4, …,
        $2^{n-1}$.  Sketch the tree for $n$=5; for $n$=10.  In such a tree
        (for general $n$) how may bits are required to encode the most
        frequent symbol?  the least frequent symbol?
        
  <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_5_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_5_div"><SOLUTION>
    <div class="permalink">
<a name="p18" class="permalink"></a><p>
      The tree will be unbalanced, similar to the tree given in
      figure <REF NAME="fig:unbalanced-tree"><a class="superscript" id="2.3.4-fig-link-2.17" href="37#fig_2.17">2.17</a></REF>.
      Encoding the most frequent symbol requires one bit,
      whereas $n - 1$
      bits are required to encode the least frequent symbol.
    </p>
</div>
  </SOLUTION></div>
</div>
      </EXERCISE>
</div>

      <div class="permalink">
<a name="ex_2.72" class="permalink"></a><EXERCISE><b><a class="exercise-number permalink" id="ex_2.72">Exercise 2.72 </a></b>
        
        Consider the encoding
        function
        that you designed in
        exercise <REF NAME="ex:encode-symbol"><a class="superscript" id="2.3.4-ex-link-2.68" href="38#ex_2.68">2.68</a></REF>.  What is the order of growth in the
        number of steps needed to encode a symbol?  Be sure to include the
        number of steps needed to search the symbol list at each node
        encountered.  To answer this question in general is difficult.
        Consider the special case where the relative frequencies of the $n$
        symbols are as described in exercise <REF NAME="ex:huffman-count"><a class="superscript" id="2.3.4-ex-link-2.71" href="38#ex_2.71">2.71</a></REF>, and give
        the order of growth (as a function of $n$) of the number of steps
        needed to encode the most frequent and least frequent symbols in the
        alphabet.
    <div class="Solution">
<div class="solution_btn"><button class="btn btn-secondary solution_btn" href="#solution_38_6_div" data-toggle="collapse">Solution</button></div>
<div class="solution_content collapse" id="solution_38_6_div"><SOLUTION>
Consider the special case in exercise <REF NAME="ex:encode-symbol"><a class="superscript" id="2.3.4-ex-link-2.68" href="38#ex_2.68">2.68</a></REF>.
At each step down the
path of length $n$, we need to do a linear
search in a list of length $n, n-1, \ldots, 1$.
In the worst case, there are $O(n \times n / 2) = O(n^2)$
number of steps.
$O(n^2)$.
 </SOLUTION></div>
</div>
      </EXERCISE>
</div>
      

    <hr>
<div class="footnote">
<a class="footnote-number" id="footnote-1" href="38#footnote-link-1">[1] </a><FOOTNOTE>See
        <CITATION>Hamming 1980</CITATION>
        
        for a discussion of the mathematical properties of Huffman codes.</FOOTNOTE>
</div></SUBSECTION></div>
    </div>

    <div class="nav">

        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a href="37">&lt; Previous</a>
        </button>

    <div style="flex-grow: 1;"></div>
    
        <button type="button" class="btn btn-secondary" style="background-color: #fff;">
          <a class="scroll-next" href="39">Next &gt;</a>
        </button>


  </div>
  <div class="chapter_sign">
        2.3.4 
        Example: Huffman Encoding Trees
      
    </div>
  <script>
//<![CDATA[
var chapter_id = 38;
//]]>
</script>
  <div class="next-page"></div>
</div>

     </div><!-- /.container -->


     <!--<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
     -->
   </body>
</html>
