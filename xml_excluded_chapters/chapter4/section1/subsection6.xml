    <SUBSECTION>
      <NAME>
  Internal Definitions
      </NAME>

      <LABEL NAME="sec:internal-definitions"/>
      <INDEX>internal definition<SUBINDEX>scope of name|(</SUBINDEX></INDEX>
      <INDEX>block structure|(</INDEX>

      <TEXT>
  <INDEX>scope of a variable<SUBINDEX>internal <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
  Our environment model of evaluation and our metacircular evaluator execute
  definitions in sequence, extending the environment frame one
  definition at a time.  This is particularly convenient for interactive
  program development, in which the programmer needs to freely mix the
  application of
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  with the definition of new
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
  However, if we think carefully about the internal definitions
  used to implement block structure (introduced in
  Section<SPACE/><REF NAME="sec:black-box"/>), we will find that name-by-name extension
  of the environment may not be the best way to define local variables.
      </TEXT>

      <TEXT>
  Consider a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  with internal definitions, such as

  <SNIPPET EVAL="no">
    <SCHEME>
(define (f x)
   (define (even? n)
      (if (= n 0)
          true
          (odd? (- n 1))))
   (define (odd? n)
      (if (= n 0)
          false
          (even? (- n 1))))
   ^rest of body of^ f)
    </SCHEME>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Our intention here is that the name <SCHEMEINLINE>odd?</SCHEMEINLINE> in the body of the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>even?</SCHEMEINLINE> should refer to the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>odd?</SCHEMEINLINE> that is
  defined after <SCHEMEINLINE>even?</SCHEMEINLINE>.  The scope of the name <SCHEMEINLINE>odd?</SCHEMEINLINE> is the
  entire body of <SCHEMEINLINE>f</SCHEMEINLINE>, not just the portion of the body of <SCHEMEINLINE>f</SCHEMEINLINE>
  starting at the point where the <SCHEMEINLINE>define</SCHEMEINLINE> for <SCHEMEINLINE>odd?</SCHEMEINLINE> occurs.
  Indeed, when we consider that <SCHEMEINLINE>odd?</SCHEMEINLINE> is itself defined in terms of
  <SCHEMEINLINE>even?</SCHEMEINLINE><EMDASH/>so that <SCHEMEINLINE>even?</SCHEMEINLINE> and <SCHEMEINLINE>odd?</SCHEMEINLINE> are mutually
  recursive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE><EMDASH/>we see that the only satisfactory
  interpretation of the two <SCHEMEINLINE>define</SCHEMEINLINE>s is to regard them as if the
  names <SCHEMEINLINE>even?</SCHEMEINLINE> and <SCHEMEINLINE>odd?</SCHEMEINLINE> were being added to the environment
  simultaneously.
  More generally, in block structure, the scope of a local name is the
  entire
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  body in which the <SCHEMEINLINE>define</SCHEMEINLINE> is evaluated.
      </TEXT>

      <TEXT>
  As it happens, our interpreter will evaluate calls to <SCHEMEINLINE>f</SCHEMEINLINE>
  correctly, but for an <QUOTE>accidental</QUOTE> reason: Since the definitions of
  the internal
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  come first, no calls to these
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  will
  be evaluated until all of them have been defined.  Hence, <SCHEMEINLINE>odd?</SCHEMEINLINE>
  will have been defined by the time <SCHEMEINLINE>even?</SCHEMEINLINE> is executed.  In fact,
  our sequential evaluation mechanism will give the same result as a
  mechanism that directly implements simultaneous definition for any
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in which the 
  <INDEX>internal definition<SUBINDEX>restrictions on</SUBINDEX></INDEX>
  internal definitions come first in a body and
  evaluation of the value expressions for the defined variables doesn<APOS/>t
  actually use any of the defined variables.
  (For an example of a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that doesn<APOS/>t obey these restrictions,
  so that sequential definition isn<APOS/>t equivalent to simultaneous definition,
  see Exercise<SPACE/><REF NAME="ex:simultaneous-def"/>.)<FOOTNOTE>Wanting programs to not depend on this evaluation
    mechanism is the reason for the <QUOTE>management is not
      responsible</QUOTE> remark in footnote<SPACE/><REF NAME="foot:management"/> of Chapter<SPACE/>1.
    By insisting that internal definitions come first and do not use each
    other while the definitions are being evaluated, the IEEE standard
    for Scheme leaves implementors some choice in the mechanism used to
    evaluate these definitions.  The choice of one evaluation rule rather
    than another here may seem like a small issue, affecting only the
    interpretation of <QUOTE>badly formed</QUOTE> programs.  However, we will see in
    Section<SPACE/><REF NAME="sec:lexical-addressing"/> that moving to a model of
    simultaneous scoping for internal definitions avoids some nasty
    difficulties that would otherwise arise in implementing a compiler.</FOOTNOTE>
      </TEXT>

      <TEXT>
  There is, however, a simple way to treat definitions so that
  internally defined names have truly simultaneous scope<EMDASH/>just create
  all local variables that will be in the current environment before
  evaluating any of the value expressions.  One way to do this is by a
  syntax transformation on <SCHEMEINLINE>lambda</SCHEMEINLINE> expressions.  Before evaluating
  the body of a <SCHEMEINLINE>lambda</SCHEMEINLINE> expression, we 
  <INDEX>scanning out internal definitions</INDEX>
  <INDEX>internal definition<SUBINDEX>scanning out</SUBINDEX></INDEX>
  <QUOTE>scan out</QUOTE> and eliminate
  all the internal definitions in the body.  The internally defined
  variables will be created with a <SCHEMEINLINE>let</SCHEMEINLINE> and then set to their
  values by assignment.  For example, the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

  <SNIPPET EVAL="no">
    <SCHEME>
(lambda ^vars^
   (define u ^e1^)
   (define v ^e2^)
   ^e3^)
    </SCHEME>
  </SNIPPET>

  would be transformed into

  <SNIPPET EVAL="no">
    <SCHEME>
(lambda ^vars^
   (let ((u '*unassigned*)
         (v '*unassigned*))
      (set! u ^e1^)
      (set! v ^e2^)
      ^e3^))
    </SCHEME>
  </SNIPPET>

  where <SCHEMEINLINE>*unassigned*</SCHEMEINLINE> is a special symbol that causes looking up a
  variable to signal an error if an attempt is made to use the value of
  the not-yet-assigned variable.
      </TEXT>

      <TEXT>
  An alternative strategy for scanning out internal definitions is shown
  in Exercise<SPACE/><REF NAME="ex:alternative-scanout"/>.  Unlike the transformation
  shown above, this enforces the restriction that the defined variables<APOS/>
  values can be evaluated without using any of the variables<APOS/> 
  values.<FOOTNOTE>The IEEE standard for Scheme
    allows for different implementation strategies by specifying that it
    is up to the programmer to obey this restriction, not up to the
    implementation to enforce it.  Some Scheme implementations, including
    <INDEX>MIT Scheme<SUBINDEX>internal definitions</SUBINDEX></INDEX>
    MIT Scheme, use the transformation shown above.  Thus, some programs
    that don<APOS/>t obey this restriction will in fact run in such implementations.</FOOTNOTE>
  <INDEX>internal definition<SUBINDEX>scope of name|)</SUBINDEX></INDEX>
  <INDEX>block structure|)</INDEX>
      </TEXT>

      <EXERCISE>
  In this exercise we implement the method just described for
  interpreting internal definitions.
  We assume that the evaluator supports <SCHEMEINLINE>let</SCHEMEINLINE>
  (see Exercise<SPACE/><REF NAME="ex:implement-let"/>).
  <OL>
    <!--  \indcode{lookup-variable-value}[for scanned-out definitions] -->
    <LI>
      Change <SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>
      (Section<SPACE/><REF NAME="sec:operations-on-environments"/>) to signal an error if
      the value it finds is the symbol <SCHEMEINLINE>*unassigned*</SCHEMEINLINE>.
    </LI>
    <LI>
      <!--  \indcode{scan-out-defines} -->
      Write a
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      <SCHEMEINLINE>scan-out-defines</SCHEMEINLINE> that takes a
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      body and returns an equivalent one that has no internal
      definitions, by making the transformation described above.
    </LI>
    <LI>
      Install <SCHEMEINLINE>scan-out-defines</SCHEMEINLINE> in the interpreter, either in 
      <SCHEMEINLINE>make-procedure</SCHEMEINLINE> or in <SCHEMEINLINE>procedure-body</SCHEMEINLINE> (see
      Section<SPACE/><REF NAME="sec:eval-data-structures"/>).  Which place is better?
      Why?
    </LI>
  </OL>
  <LABEL NAME="ex:internal-defs"/>
      </EXERCISE>


      <EXERCISE>
  Draw diagrams of the environment in effect when evaluating the
  expression <LATEXINLINE>e3</LATEXINLINE> in the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  in the text, comparing how this
  will be structured when definitions are interpreted sequentially with
  how it will be structured if definitions are scanned out as described.
  Why is there an extra frame in the transformed program?  Explain why
  this difference in environment structure can never make a difference
  in the behavior of a correct program.  Design a way to make the
  interpreter implement the <QUOTE>simultaneous</QUOTE> scope rule for internal
  definitions without constructing the extra frame.
      </EXERCISE>


      <EXERCISE>
  Consider an alternative strategy for scanning out definitions that
  translates the example in the text to
  <SNIPPET EVAL="no">
    <SCHEME>
(lambda ^vars^
   (let ((u '*unassigned*)
         (v '*unassigned*))
      (let ((a ^e1^)
            (b ^e2^))
         (set! u a)
   (set! v b))
   ^e3^))
    </SCHEME>
  </SNIPPET>

  Here <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are meant to represent new variable names,
  created by the interpreter, that do not appear in the user<APOS/>s
  program.
  Consider the <SCHEMEINLINE>solve</SCHEMEINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  from
  Section<SPACE/><REF NAME="sec:streams-and-delayed-evaluation"/>:

  <SNIPPET>
    <SCHEME>
<!-- \indcodeplus*{solve}{differential equation}[scan@with scanned-out definitions]-->
(define (solve f y0 dt)
(define y (integral (delay dy) y0 dt))
(define dy (stream-map f y))
      y)
    </SCHEME>
  </SNIPPET>

  Will this
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  work if internal definitions are scanned out as
  shown in this exercise?  What if they are scanned out as shown in the
  text?  Explain.
  <LABEL NAME="ex:alternative-scanout"/>
      </EXERCISE>

      <EXERCISE>
  Ben Bitdiddle, Alyssa P. Hacker, and Eva Lu Ator are arguing about
  the desired result of evaluating the expression

  <SNIPPET>
    <SCHEME>
(let ((a 1))
   (define (f x)
      (define b (+ a x))
      (define a 5)
      (+ a b))
   (f 10))
    </SCHEME>
  </SNIPPET>

  Ben asserts that the result should be obtained using the sequential
  rule for <SCHEMEINLINE>define</SCHEMEINLINE>: 
  <SCHEMEINLINE>b</SCHEMEINLINE> is defined to be 11, then <SCHEMEINLINE>a</SCHEMEINLINE> is
  defined to be 5, so the result is 16.  Alyssa objects that mutual
  recursion requires the simultaneous scope rule for internal
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  definitions, and that it is unreasonable to treat
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  names
  differently from other names.  Thus, she argues for the mechanism
  implemented in Exercise<SPACE/><REF NAME="ex:internal-defs"/>.  This would lead to
  <SCHEMEINLINE>a</SCHEMEINLINE> being unassigned at the time that the value for <SCHEMEINLINE>b</SCHEMEINLINE> is to
  be computed.  Hence, in Alyssa<APOS/>s view the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  should produce an
  error.  Eva has a third opinion.  She says that if the definitions of
  <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are truly meant to be simultaneous, then the value
  5 for <SCHEMEINLINE>a</SCHEMEINLINE> should be used in evaluating <SCHEMEINLINE>b</SCHEMEINLINE>.  Hence, in Eva<APOS/>s
  view <SCHEMEINLINE>a</SCHEMEINLINE> should be 5, <SCHEMEINLINE>b</SCHEMEINLINE> should be 15, and the result should
  be 20.  Which (if any) of these viewpoints do you support?  Can you
  devise a way to implement internal definitions so that they behave as
  Eva prefers?<FOOTNOTE>The MIT implementors of Scheme support Alyssa on
    the following grounds: Eva is in principle correct<EMDASH/>the definitions
    should be regarded as simultaneous.  But it seems difficult to
    implement a general, efficient mechanism that does what Eva requires.
    In the absence of such a mechanism, it is better to generate an error
    in the difficult cases of simultaneous definitions (Alyssa<APOS/>s notion)
    than to produce an incorrect answer (as Ben would have it).</FOOTNOTE>
  <LABEL NAME="ex:simultaneous-def"/>
      </EXERCISE>

      <EXERCISE>
  <LABEL NAME="ex:letrec"/>
  <!-- 
      \indsf*{letrec}
      \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[letrec@<SCHEMEINLINE>letrec</SCHEMEINLINE>]
    -->
  Because internal definitions look sequential but are actually
  simultaneous, some people prefer to avoid them entirely, and use the
  special form <SCHEMEINLINE>letrec</SCHEMEINLINE> instead.  
  <SCHEMEINLINE>Letrec</SCHEMEINLINE> looks like <SCHEMEINLINE>let</SCHEMEINLINE>,
  so it is not surprising that the variables it binds are bound
  simultaneously and have the same scope as each other.  The sample
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SCHEMEINLINE>f</SCHEMEINLINE> above can be written without internal definitions,
  but with exactly the same meaning, as
  <SNIPPET EVAL="no">
    <SCHEME>
(define (f x)
   (letrec ((even?
               (lambda (n)
                  (if (= n 0)
                      true
                      (odd? (- n 1)))))
            (odd?
               (lambda (n)
                  (if (= n 0)
                      false
                      (even? (- n 1))))))
      ^rest of body of^ f))
    </SCHEME>
  </SNIPPET>
  <SCHEMEINLINE>Letrec</SCHEMEINLINE> expressions, which have the form
  <SNIPPET EVAL="no">
    <SCHEME>
(letrec ((^var$_{1}$^ ^exp$_{1}$^) ^$\ldots$^ (^var$_{n}$^ ^exp$_{n}$^))
    ^body^)
    </SCHEME>
  </SNIPPET>
  are a variation on <SCHEMEINLINE>let</SCHEMEINLINE> in which the expressions
  <LATEXINLINE>exp$_{k}$</LATEXINLINE> that provide the initial values for the variables <LATEXINLINE>var$_{k}$</LATEXINLINE>
  are evaluated in an environment that includes all the <SCHEMEINLINE>letrec</SCHEMEINLINE>
  bindings.  This permits recursion in the bindings, such as the mutual
  recursion of <SCHEMEINLINE>even?</SCHEMEINLINE> and <SCHEMEINLINE>odd?</SCHEMEINLINE> in the example above, or
  <INDEX>factorial<SUBINDEX>letrec@with <SCHEMEINLINE>letrec</SCHEMEINLINE></SUBINDEX></INDEX>
  the evaluation of 10 factorial with
  <SNIPPET>
    <SCHEME>
(letrec ((fact
            (lambda (n)
               (if (= n 1)
                   1
                   (* n (fact (- n 1)))))))
        (fact 10))
    </SCHEME>
  </SNIPPET>
  <OL>
    <LI>
      Implement <SCHEMEINLINE>letrec</SCHEMEINLINE> as a derived expression, by transforming
      a <SCHEMEINLINE>letrec</SCHEMEINLINE> expression into a <SCHEMEINLINE>let</SCHEMEINLINE> expression as shown in
      the text above or in Exercise<SPACE/><REF NAME="ex:alternative-scanout"/>.
      That is, the <SCHEMEINLINE>letrec</SCHEMEINLINE> variables should be created with a <SCHEMEINLINE>let</SCHEMEINLINE>
      and then be assigned their values with <SPLITINLINE><SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME><JAVASCRIPT>assignment</JAVASCRIPT></SPLITINLINE>.
    </LI>
    <LI>
      Louis Reasoner is confused by all this fuss about internal
      definitions.  The way he sees it, if you don<APOS/>t like to use <SCHEMEINLINE>define</SCHEMEINLINE> inside a
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, you can just use <SCHEMEINLINE>let</SCHEMEINLINE>.  Illustrate
      what is loose about his reasoning by drawing an environment diagram
      that shows the environment in which the 
      <SCHEMEINLINE>^rest of body of^ f</SCHEMEINLINE>
      is evaluated during evaluation of the expression <SPLITINLINE><SCHEME><SCHEMEINLINE>(f 5)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, with
      <SCHEMEINLINE>f</SCHEMEINLINE> defined as in this exercise.  Draw
      an environment diagram for the same evaluation, but with <SCHEMEINLINE>let</SCHEMEINLINE> in
      place of <SCHEMEINLINE>letrec</SCHEMEINLINE> in the definition of <SCHEMEINLINE>f</SCHEMEINLINE>.
    </LI>
  </OL>
      </EXERCISE>

      <EXERCISE>
  <INDEX>recursive
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>specifying without <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
  Amazingly, Louis<APOS/>s intuition in Exercise<SPACE/><REF NAME="ex:letrec"/>
  is correct.  It is indeed possible to specify recursive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  without using <SCHEMEINLINE>letrec</SCHEMEINLINE> (or even <SCHEMEINLINE>define</SCHEMEINLINE>), although the method
  for accomplishing this is much more subtle than Louis imagined.  The
  following expression computes 10 factorial by applying a recursive
  <INDEX>factorial<SUBINDEX>letrec@without <SCHEMEINLINE>letrec</SCHEMEINLINE> or <SCHEMEINLINE>define</SCHEMEINLINE></SUBINDEX></INDEX>
  factorial
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>:<FOOTNOTE>This example illustrates a programming trick for
    formulating recursive
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    without using <SCHEMEINLINE>define</SCHEMEINLINE>.  The
    <INDEX>Y@<LATEXINLINE>$Y$</LATEXINLINE> operator</INDEX>
    most general trick of this sort is the <LATEXINLINE>$Y$</LATEXINLINE> <EM>operator</EM>, which can
    be used to give a <QUOTE>pure <LATEXINLINE>$\lambda$</LATEXINLINE>-calculus</QUOTE> implementation of
    <INDEX>Stoy, Joseph E.</INDEX><INDEX>Gabriel, Richard P.</INDEX>
    recursion.  (See <CITATION>Stoy 1977</CITATION> for details on the lambda calculus, and
    <CITATION>Gabriel 1988</CITATION> for an exposition of the <LATEXINLINE>$Y$</LATEXINLINE> operator in Scheme.)</FOOTNOTE>
  <SNIPPET>
    <SCHEME>
((lambda (n)
    ((lambda (fact)
        (fact fact n))
     (lambda (ft k)
        (if (= k 1)
            1
            (* k (ft ft (- k 1)))))))
 10)
    </SCHEME>
  </SNIPPET>
  <OL>
    <LI>
      Check (by evaluating the expression) that this really does compute
      factorials.  Devise an analogous expression for computing Fibonacci numbers.
    </LI>
    <LI>
      Consider the following
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which includes mutually recursive
      internal definitions:
      <SNIPPET>
        <SCHEME>
(define (f x)
   (define (even? n)
      (if (= n 0)
          true
      (odd? (- n 1))))
   (define (odd? n)
      (if (= n 0)
          false
          (even? (- n 1))))
   (even? x))
        </SCHEME>
      </SNIPPET>
      Fill in the missing expressions to complete an alternative definition
      of <SCHEMEINLINE>f</SCHEMEINLINE>, which uses neither internal definitions nor <SCHEMEINLINE>letrec</SCHEMEINLINE>:
      <SNIPPET EVAL="no">
        <SCHEME>
(define (f x)
   ((lambda (even? odd?)
  (even? even? odd? x))
    (lambda (ev? od? n)
  (if (= n 0) true (od? ^??^ ^??^ ^??^)))
    (lambda (ev? od? n)
  (if (= n 0) false (ev? ^??^ ^??^ ^??^)))))
        </SCHEME>
      </SNIPPET>
    </LI>
  </OL>
      </EXERCISE>

    </SUBSECTION>